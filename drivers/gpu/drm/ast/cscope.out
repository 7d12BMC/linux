cscope 15 /mnt/d/Src/DRM/sources/src504 -q 0000003338 0000310226
	@/mnt/d/Src/DRM/sources/src504/ast_dp.c

1 
	~<löux/fúmw¨e.h
>

2 
	~<drm/drmP.h
>

3 
	~"a°_drv.h
"

5 
boﬁ
 
	$a°_dp_ªad_edid
(
drm_devi˚
 *
dev
, 
u8
 *
edidd©a
)

7 
a°_¥iv©e
 *
a°
 = 
dev
->
dev_¥iv©e
;

9 
u32
 
i
;

11 #ifde‡
DPC⁄åﬁPowî


12 
u8
 
bDPSèã_Ch™ge
 = 
Ál£
;

15 if(
a°
->
ASTDP_Sèã
 & 0x10)

18 
	`a°_dp_PowîOnOff
(
a°
->
dev
, 1);

19 
bDPSèã_Ch™ge
 = 
åue
;

23 i‡(
	`a°_gë_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xDC, 0xFF) == 0)

25 #ifde‡
DPC⁄åﬁPowî


27 if(
bDPSèã_Ch™ge
)

28 
	`a°_dp_PowîOnOff
(
a°
->
dev
, 0);

30  
Ál£
;

33 
	`a°_£t_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xE5, 0x00, 0x00);

35 
i
=0; i<64; i++)

37 
	`a°_£t_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xE4, 0x00, (
u8
Ë
i
);

39 (
	`a°_gë_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xD7, 0xFF) != 0x01)

40 || (
	`a°_gë_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xD6, 0xFFË!
i
)){

41 
	`m¶ìp
(1);

44 *(
edidd©a
Ë
	`a°_gë_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xD8, 0xFF);

45 *(
edidd©a
 + 1Ë
	`a°_gë_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xD9, 0xFF);

46 *(
edidd©a
 + 2Ë
	`a°_gë_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xDA, 0xFF);

47 *(
edidd©a
 + 3Ë
	`a°_gë_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xDB, 0xFF);

49 
edidd©a
 += 4;

52 
	`a°_£t_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xE5, 0x00, 0x01);

54 #ifde‡
DPC⁄åﬁPowî


56 if(
bDPSèã_Ch™ge
)

57 
	`a°_dp_PowîOnOff
(
a°
->
dev
, 0);

60  
åue
;

62 
	}
}

67 
boﬁ
 
	$a°_dp_œunch
(
drm_devi˚
 *
dev
, 
u8
 
bPowî
)

69 
u32
 
i
 = 0,
j
 = 0,
WaôCou¡
 = 5;

70 
u8
 
bDPTX
 = 0;

71 
u8
 
bDPExecuã
 = 1;

73 
a°_¥iv©e
 *
a°
 = 
dev
->
dev_¥iv©e
;

76 if(
bPowî
)

77 
WaôCou¡
 = 300;

80 
a°
->
tx_chù_ty≥
 = 
AST_TX_NONE
;

84 
j
=0;j<
WaôCou¡
;j++)

87 
i
=0;i<100;i++)

90 
	`m¶ìp
(1);

93 
bDPTX
 = 
	`a°_gë_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xD1, 0x0E);

95 if(
bDPTX
)

100 if(
bDPTX
 == 0x0E)

103 
i
 = 0;

105 
	`a°_gë_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xD1, 0x20) != 0x20)

107 
i
++;

109 
	`m¶ìp
(1);

111 if(
i
 >= 1000)

114 
bDPExecuã
 = 0;

119 if(
bDPExecuã
)

120 
a°
->
tx_chù_ty≥
 = 
AST_TX_ASTDP
;

124  
åue
;

125 
	}
}

127 #ifde‡
DPC⁄åﬁPowî


129 
	$a°_dp_PowîOnOff
(
drm_devi˚
 *
dev
, 
u8
 
Mode
)

131 
a°_¥iv©e
 *
a°
 = 
dev
->
dev_¥iv©e
;

133 
u8
 
bE3
 = 
	`a°_gë_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xE3, 0x0F);

136 if(!
Mode
)

137 
bE3
 |= 0x10;

139 
	`a°_£t_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xE3, 0x00, 
bE3
);

142 
a°
->
ASTDP_Sèã
 = 
bE3
;

144 
	}
}

148 
	$a°_dp_SëOnOff
(
drm_devi˚
 *
dev
, 
u8
 
Mode
)

150 
a°_¥iv©e
 *
a°
 = 
dev
->
dev_¥iv©e
;

152 
	`a°_£t_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xE3, 0x00, 
Mode
);

155 
a°
->
ASTDP_Sèã
 = 
Mode
;

158 if(
	`a°_gë_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xDC, 0x01) &&

159 
	`a°_gë_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xDF, 0x01))

161 
Mode
 <<= 4;

162 
	`a°_gë_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xDF, 0x10Ë!
Mode
){

164 
	`m¶ìp
(1);

167 
	}
}

169 
	$a°_dp_SëOuçut
(
drm_¸tc
 *
¸tc
, 
a°_vbios_mode_öfo
 *
vbios_mode
)

171 
a°_¥iv©e
 *
a°
 = 
¸tc
->
dev
->
dev_¥iv©e
;

173 
u32
 
ulRe‰eshR©eIndex
;

174 
u8
 
ModeIdx
;

176 
ulRe‰eshR©eIndex
 = 
vbios_mode
->
íh_èbÀ
->
ª‰esh_øã_ödex
 -1;

178 
	`DRM_INFO
("ulRe‰eshR©eIndex=%x\n", 
ulRe‰eshR©eIndex
);

179 
	`DRM_INFO
("¸tc_hdi•œy=%d, cπc_vdi•œy=%d\n", 
¸tc
->
mode
.
¸tc_hdi•œy
, cπc->mode.
¸tc_vdi•œy
);

181 
¸tc
->
mode
.
¸tc_hdi•œy
)

184 
ModeIdx
 = 0x11;

187 
ModeIdx
 = 0x12;

190 
ModeIdx
 = 0x13;

193 
ModeIdx
 = (0x00 + (
u8
Ë
ulRe‰eshR©eIndex
);

196 
ModeIdx
 = (0x04 + (
u8
Ë
ulRe‰eshR©eIndex
);

199 
ModeIdx
 = (0x09 + (
u8
Ë
ulRe‰eshR©eIndex
);

202 
ModeIdx
 = 0x1F;

205 i‡(
¸tc
->
mode
.
¸tc_vdi•œy
 == 800)

206 
ModeIdx
 = (0x17 - (
u8
Ë
ulRe‰eshR©eIndex
);

208 
ModeIdx
 = (0x0D + (
u8
Ë
ulRe‰eshR©eIndex
);

212 
ModeIdx
 = 0x1E;

215 
ModeIdx
 = (0x19 - (
u8
Ë
ulRe‰eshR©eIndex
);

218 i‡(
¸tc
->
mode
.
¸tc_vdi•œy
 == 900)

219 
ModeIdx
 = (0x1D - (
u8
Ë
ulRe‰eshR©eIndex
);

221 
ModeIdx
 = 0x10;

224 
ModeIdx
 = (0x1B - (
u8
Ë
ulRe‰eshR©eIndex
);

227 i‡(
¸tc
->
mode
.
¸tc_vdi•œy
 == 1080)

228 
ModeIdx
 = 0x15;

230 
ModeIdx
 = 0x14;

236 
	`a°_£t_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xE5, 0x00, 0x01);

237 
	`a°_£t_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xE0, 0x00, 0x20);

238 
	`a°_£t_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xE1, 0x00, 0x00);

239 
	`a°_£t_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xE2, 0x00, 
ModeIdx
);

243 
	}
}

	@/mnt/d/Src/DRM/sources/src504/ast_dp501.c

3 
	~<löux/dñay.h
>

4 
	~<löux/fúmw¨e.h
>

5 
	~<löux/moduÀ.h
>

7 
	~"a°_drv.h
"

8 
	~"a°_hdmôx.h
"

10 
MODULE_FIRMWARE
("ast_dp501_fw.bin");

12 
	$a°_lﬂd_dp501_mi¸ocode
(
drm_devi˚
 *
dev
)

14 
a°_¥iv©e
 *
a°
 = 
dev
->
dev_¥iv©e
;

16  
	`ªque°_fúmw¨e
(&
a°
->
dp501_fw
, "a°_dp501_fw.bö", 
dev
->dev);

17 
	}
}

19 
	$£nd_ack
(
a°_¥iv©e
 *
a°
)

21 
u8
 
£ndack
;

22 
£ndack
 = 
	`a°_gë_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0x9b, 0xff);

23 
£ndack
 |= 0x80;

24 
	`a°_£t_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0x9b, 0x00, 
£ndack
);

25 
	}
}

27 
	$£nd_«ck
(
a°_¥iv©e
 *
a°
)

29 
u8
 
£ndack
;

30 
£ndack
 = 
	`a°_gë_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0x9b, 0xff);

31 
£ndack
 &= ~0x80;

32 
	`a°_£t_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0x9b, 0x00, 
£ndack
);

33 
	}
}

35 
boﬁ
 
	$waô_ack
(
a°_¥iv©e
 *
a°
)

37 
u8
 
waôack
;

38 
u32
 
ªåy
 = 0;

40 
waôack
 = 
	`a°_gë_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xd2, 0xff);

41 
waôack
 &= 0x80;

42 
	`udñay
(100);

43 } (!
waôack
Ë&& (
ªåy
++ < 1000));

45 i‡(
ªåy
 < 1000)

46  
åue
;

48  
Ál£
;

49 
	}
}

51 
boﬁ
 
	$waô_«ck
(
a°_¥iv©e
 *
a°
)

53 
u8
 
waôack
;

54 
u32
 
ªåy
 = 0;

56 
waôack
 = 
	`a°_gë_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xd2, 0xff);

57 
waôack
 &= 0x80;

58 
	`udñay
(100);

59 } (
waôack
Ë&& (
ªåy
++ < 1000));

61 i‡(
ªåy
 < 1000)

62  
åue
;

64  
Ál£
;

65 
	}
}

67 
	$£t_cmd_åiggî
(
a°_¥iv©e
 *
a°
)

69 
	`a°_£t_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0x9b, ~0x40, 0x40);

70 
	}
}

72 
	$˛ór_cmd_åiggî
(
a°_¥iv©e
 *
a°
)

74 
	`a°_£t_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0x9b, ~0x40, 0x00);

75 
	}
}

78 
boﬁ
 
	$waô_fw_ªady
(
a°_¥iv©e
 *
a°
)

80 
u8
 
waôªady
;

81 
u32
 
ªåy
 = 0;

83 
waôªady
 = 
	`a°_gë_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xd2, 0xff);

84 
waôªady
 &= 0x40;

85 
	`udñay
(100);

86 } (!
waôªady
Ë&& (
ªåy
++ < 1000));

88 i‡(
ªåy
 < 1000)

89  
åue
;

91  
Ál£
;

92 
	}
}

95 
boﬁ
 
	$a°_wrôe_cmd
(
drm_devi˚
 *
dev
, 
u8
 
d©a
)

97 
a°_¥iv©e
 *
a°
 = 
dev
->
dev_¥iv©e
;

98 
ªåy
 = 0;

99 i‡(
	`waô_«ck
(
a°
)) {

100 
	`£nd_«ck
(
a°
);

101 
	`a°_£t_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0x9a, 0x00, 
d©a
);

102 
	`£nd_ack
(
a°
);

103 
	`£t_cmd_åiggî
(
a°
);

105 i‡(
	`waô_ack
(
a°
)) {

106 
	`˛ór_cmd_åiggî
(
a°
);

107 
	`£nd_«ck
(
a°
);

108  
åue
;

110 } 
ªåy
++ < 100);

112 
	`˛ór_cmd_åiggî
(
a°
);

113 
	`£nd_«ck
(
a°
);

114  
Ál£
;

115 
	}
}

117 
boﬁ
 
	$a°_wrôe_d©a
(
drm_devi˚
 *
dev
, 
u8
 
d©a
)

119 
a°_¥iv©e
 *
a°
 = 
dev
->
dev_¥iv©e
;

121 i‡(
	`waô_«ck
(
a°
)) {

122 
	`£nd_«ck
(
a°
);

123 
	`a°_£t_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0x9a, 0x00, 
d©a
);

124 
	`£nd_ack
(
a°
);

125 i‡(
	`waô_ack
(
a°
)) {

126 
	`£nd_«ck
(
a°
);

127  
åue
;

130 
	`£nd_«ck
(
a°
);

131  
Ál£
;

132 
	}
}

135 
boﬁ
 
	$a°_ªad_d©a
(
drm_devi˚
 *
dev
, 
u8
 *
d©a
)

137 
a°_¥iv©e
 *
a°
 = 
dev
->
dev_¥iv©e
;

138 
u8
 
tmp
;

140 *
d©a
 = 0;

142 i‡(
	`waô_ack
(
a°
Ë=
Ál£
)

143  
Ál£
;

144 
tmp
 = 
	`a°_gë_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xd3, 0xff);

145 *
d©a
 = 
tmp
;

146 i‡(
	`waô_«ck
(
a°
Ë=
Ál£
) {

147 
	`£nd_«ck
(
a°
);

148  
Ál£
;

150 
	`£nd_«ck
(
a°
);

151  
åue
;

152 
	}
}

154 
	$˛ór_cmd
(
a°_¥iv©e
 *
a°
)

156 
	`£nd_«ck
(
a°
);

157 
	`a°_£t_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0x9a, 0x00, 0x00);

158 
	}
}

161 
	$a°_£t_dp501_video_ouçut
(
drm_devi˚
 *
dev
, 
u8
 
mode
)

163 
	`a°_wrôe_cmd
(
dev
, 0x40);

164 
	`a°_wrôe_d©a
(
dev
, 
mode
);

166 
	`m¶ìp
(10);

167 
	}
}

169 
u32
 
	$gë_fw_ba£
(
a°_¥iv©e
 *
a°
)

171 i‡(
a°
->
chù
 =
AST2500
)

172  
	`a°_mödwm
(
a°
, 0x1e6e2104) & 0xfffffffe;

174  
	`a°_mödwm
(
a°
, 0x1e6e2104) & 0x7fffffff;

175 
	}
}

177 
boﬁ
 
	$a°_backup_fw
(
drm_devi˚
 *
dev
, 
u8
 *
addr
, 
u32
 
size
)

179 
a°_¥iv©e
 *
a°
 = 
dev
->
dev_¥iv©e
;

180 
u32
 
i
, 
d©a
;

181 
u32
 
boŸ_addªss
;

183 i‡(
a°
->
c⁄fig_mode
 !
a°_u£_p2a
Ë 
Ál£
;

185 
d©a
 = 
	`a°_mödwm
(
a°
, 0x1e6e2100) & 0x01;

186 i‡(
d©a
) {

187 
boŸ_addªss
 = 
	`gë_fw_ba£
(
a°
);

188 
i
 = 0; i < 
size
; i += 4)

189 *(
u32
 *)(
addr
 + 
i
Ë
	`a°_mödwm
(
a°
, 
boŸ_addªss
 + i);

190  
åue
;

192  
Ál£
;

193 
	}
}

195 
boﬁ
 
	$a°_œunch_m68k
(
drm_devi˚
 *
dev
)

197 
a°_¥iv©e
 *
a°
 = 
dev
->
dev_¥iv©e
;

198 
u32
 
i
, 
d©a
, 
Àn
 = 0;

199 
u32
 
boŸ_addªss
;

200 
u8
 *
fw_addr
 = 
NULL
;

201 
u8
 
jªg
;

203 i‡(
a°
->
c⁄fig_mode
 !
a°_u£_p2a
Ë 
Ál£
;

205 
d©a
 = 
	`a°_mödwm
(
a°
, 0x1e6e2100) & 0x03;

207 i‡(
d©a
 != 0x01) {

208 i‡(
a°
->
dp501_fw_addr
) {

209 
fw_addr
 = 
a°
->
dp501_fw_addr
;

210 
Àn
 = 32*1024;

212 i‡(!
a°
->
dp501_fw
 &&

213 
	`a°_lﬂd_dp501_mi¸ocode
(
dev
) < 0)

214  
Ál£
;

216 
fw_addr
 = (
u8
 *)
a°
->
dp501_fw
->
d©a
;

217 
Àn
 = 
a°
->
dp501_fw
->
size
;

220 
	`a°_moutdwm
(
a°
, 0x1e6e2000, 0x1688a8a8);

221 
d©a
 = 
	`a°_mödwm
(
a°
, 0x1e6e0004);

222 i‡(
a°
->
chù
 =
AST2500
)

223 
boŸ_addªss
 = 0x8000000;

225 
boŸ_addªss
 = 0x4000000;

226 
boŸ_addªss
 <<(
d©a
 & 0x03);

227 i‡(
a°
->
chù
 =
AST2500
)

228 
boŸ_addªss
 |= 0x80000000;

230 
boŸ_addªss
 |= 0x40000000;

231 
boŸ_addªss
 -= 0x200000;

234 
i
 = 0; i < 
Àn
; i += 4) {

235 
d©a
 = *(
u32
 *)(
fw_addr
 + 
i
);

236 
	`a°_moutdwm
(
a°
, 
boŸ_addªss
 + 
i
, 
d©a
);

240 
	`a°_moutdwm
(
a°
, 0x1e6e2000, 0x1688a8a8);

243 i‡(
a°
->
chù
 =
AST2500
)

244 
	`a°_moutdwm
(
a°
, 0x1e6e2104, 
boŸ_addªss
 | 0x00000001);

246 
	`a°_moutdwm
(
a°
, 0x1e6e2104, 
boŸ_addªss
 | 0x80000000);

247 
	`a°_moutdwm
(
a°
, 0x1e6e2100, 1);

250 
d©a
 = 
	`a°_mödwm
(
a°
, 0x1e6e2040) & 0xfffff1ff;

251 
d©a
 |= 0x800;

252 
	`a°_moutdwm
(
a°
, 0x1e6e2040, 
d©a
);

254 
jªg
 = 
	`a°_gë_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0x99, 0xfc);

255 
jªg
 |= 0x02;

256 
	`a°_£t_ödex_ªg
(
a°
, 
AST_IO_CRTC_PORT
, 0x99, 
jªg
);

258  
åue
;

259 
	}
}

261 
u8
 
	$a°_gë_dp501_max_˛k
(
drm_devi˚
 *
dev
)

263 
a°_¥iv©e
 *
a°
 = 
dev
->
dev_¥iv©e
;

264 
u32
 
boŸ_addªss
, 
off£t
, 
d©a
;

265 
u8
 
lökˇp
[4], 
lökøã
, 
lökœ√s
, 
max˛k
 = 0xff;

267 i‡(
a°
->
c⁄fig_mode
 =
a°_u£_p2a
) {

268 
boŸ_addªss
 = 
	`gë_fw_ba£
(
a°
);

271 
off£t
 = 0xf000;

272 
d©a
 = 
	`a°_mödwm
(
a°
, 
boŸ_addªss
 + 
off£t
);

273 i‡((
d©a
 & 0xf0) != 0x10)

274  
max˛k
;

277 
off£t
 = 0xf014;

278 *(
u32
 *)
lökˇp
 = 
	`a°_mödwm
(
a°
, 
boŸ_addªss
 + 
off£t
);

279 i‡(
lökˇp
[2] == 0) {

280 
lökøã
 = 
lökˇp
[0];

281 
lökœ√s
 = 
lökˇp
[1];

282 
d©a
 = (
lökøã
 =0x0aË? (90 * 
lökœ√s
) : (54 *Üinklanes);

283 i‡(
d©a
 > 0xff)

284 
d©a
 = 0xff;

285 
max˛k
 = (
u8
)
d©a
;

289 i‡(!
a°
->
ª£rvedbuf„r
)  65;

292 
off£t
 = 0x0000;

293 
d©a
 = *(
u32
 *Ë(
a°
->
ª£rvedbuf„r
 + 
off£t
);

296 
off£t
 = 0xf000;

297 
d©a
 = *(
u32
 *Ë(
a°
->
ª£rvedbuf„r
 + 
off£t
);

298 i‡((
d©a
 & 0xf0) != 0x10)

299  
max˛k
;

302 
off£t
 = 0xf014;

303 *(
u32
 *)
lökˇp
 = *(u32 *Ë(
a°
->
ª£rvedbuf„r
 + 
off£t
);

304 i‡(
lökˇp
[2] == 0) {

305 
lökøã
 = 
lökˇp
[0];

306 
lökœ√s
 = 
lökˇp
[1];

307 
d©a
 = (
lökøã
 =0x0aË? (90 * 
lökœ√s
) : (54 *Üinklanes);

308 i‡(
d©a
 > 0xff)

309 
d©a
 = 0xff;

310 
max˛k
 = (
u8
)
d©a
;

313  
max˛k
;

314 
	}
}

316 
boﬁ
 
	$a°_dp501_ªad_edid
(
drm_devi˚
 *
dev
, 
u8
 *
edidd©a
)

318 
a°_¥iv©e
 *
a°
 = 
dev
->
dev_¥iv©e
;

319 
u32
 
i
, 
boŸ_addªss
, 
off£t
, 
d©a
;

321 i‡(
a°
->
c⁄fig_mode
 =
a°_u£_p2a
) {

322 
boŸ_addªss
 = 
	`gë_fw_ba£
(
a°
);

325 
off£t
 = 0xf000;

326 
d©a
 = 
	`a°_mödwm
(
a°
, 
boŸ_addªss
 + 
off£t
);

327 i‡((
d©a
 & 0xf0) != 0x10)

328  
Ál£
;

331 
off£t
 = 0xf010;

332 
d©a
 = 
	`a°_mödwm
(
a°
, 
boŸ_addªss
 + 
off£t
);

333 i‡(!(
d©a
 & 0x01))

334  
Ál£
;

337 
off£t
 = 0xf020;

338 
i
 = 0; i < 128; i+=4) {

339 
d©a
 = 
	`a°_mödwm
(
a°
, 
boŸ_addªss
 + 
off£t
 + 
i
);

340 *(
u32
 *)(
edidd©a
 + 
i
Ë
d©a
;

344 i‡(!
a°
->
ª£rvedbuf„r
Ë 
Ál£
;

347 
off£t
 = 0x0000;

348 
d©a
 = *(
u32
 *Ë(
a°
->
ª£rvedbuf„r
 + 
off£t
);

351 
off£t
 = 0xf000;

352 
d©a
 = *(
u32
 *Ë(
a°
->
ª£rvedbuf„r
 + 
off£t
);

353 i‡((
d©a
 & 0xf0) != 0x10)

354  
Ál£
;

357 
off£t
 = 0xf010;

358 
d©a
 = *(
u32
 *Ë(
a°
->
ª£rvedbuf„r
 + 
off£t
);

359 i‡(!(
d©a
 & 0x01))

360  
Ál£
;

363 
off£t
 = 0xf020;

364 
i
 = 0; i < 128; i+=4) {

365 
d©a
 = *(
u32
 *Ë(
a°
->
ª£rvedbuf„r
 + 
off£t
 + 
i
);

366 *(
u32
 *)(
edidd©a
 + 
i
Ë
d©a
;

370  
åue
;

371 
	}
}

373 
boﬁ
 
	$a°_öô_dvo
(
drm_devi˚
 *
dev
)

375 
a°_¥iv©e
 *
a°
 = 
dev
->
dev_¥iv©e
;

376 
u8
 
jªg
;

377 
u32
 
d©a
;

378 
	`a°_wrôe32
(
a°
, 0xf004, 0x1e6e0000);

379 
	`a°_wrôe32
(
a°
, 0xf000, 0x1);

380 
	`a°_wrôe32
(
a°
, 0x12000, 0x1688a8a8);

382 
jªg
 = 
	`a°_gë_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xd0, 0xff);

383 i‡(!(
jªg
 & 0x80)) {

385 
d©a
 = 
	`a°_ªad32
(
a°
, 0x12008);

387 
d©a
 &= 0xfffff8ff;

388 
d©a
 |= 0x00000500;

389 
	`a°_wrôe32
(
a°
, 0x12008, 
d©a
);

391 i‡(
a°
->
chù
 =
AST2300
) {

392 
d©a
 = 
	`a°_ªad32
(
a°
, 0x12084);

394 
d©a
 |= 0xfffe0000;

395 
	`a°_wrôe32
(
a°
, 0x12084, 
d©a
);

397 
d©a
 = 
	`a°_ªad32
(
a°
, 0x12088);

399 
d©a
 |= 0x000fffff;

400 
	`a°_wrôe32
(
a°
, 0x12088, 
d©a
);

402 
d©a
 = 
	`a°_ªad32
(
a°
, 0x12090);

404 
d©a
 &= 0xffffffcf;

405 
d©a
 |= 0x00000020;

406 
	`a°_wrôe32
(
a°
, 0x12090, 
d©a
);

408 
d©a
 = 
	`a°_ªad32
(
a°
, 0x12088);

410 
d©a
 |= 0x30000000;

411 
	`a°_wrôe32
(
a°
, 0x12088, 
d©a
);

413 
d©a
 = 
	`a°_ªad32
(
a°
, 0x1208c);

415 
d©a
 |= 0x000000cf;

416 
	`a°_wrôe32
(
a°
, 0x1208c, 
d©a
);

418 
d©a
 = 
	`a°_ªad32
(
a°
, 0x120a4);

420 
d©a
 |= 0xffff0000;

421 
	`a°_wrôe32
(
a°
, 0x120a4, 
d©a
);

423 
d©a
 = 
	`a°_ªad32
(
a°
, 0x120a8);

425 
d©a
 |= 0x0000000f;

426 
	`a°_wrôe32
(
a°
, 0x120a8, 
d©a
);

428 
d©a
 = 
	`a°_ªad32
(
a°
, 0x12094);

430 
d©a
 |= 0x00000002;

431 
	`a°_wrôe32
(
a°
, 0x12094, 
d©a
);

436 
d©a
 = 
	`a°_ªad32
(
a°
, 0x1202c);

437 
d©a
 &= 0xfffbffff;

438 
	`a°_wrôe32
(
a°
, 0x1202c, 
d©a
);

441 
	`a°_£t_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xa3, 0xcf, 0x80);

442  
åue
;

443 
	}
}

446 
	$a°_öô_™Æog
(
drm_devi˚
 *
dev
)

448 
a°_¥iv©e
 *
a°
 = 
dev
->
dev_¥iv©e
;

449 
u32
 
d©a
;

456 
	`a°_wrôe32
(
a°
, 0xf004, 0x1e6e0000);

457 
	`a°_wrôe32
(
a°
, 0xf000, 0x1);

460 
	`a°_wrôe32
(
a°
, 0x12000, 0x1688a8a8);

461 
	`a°_wrôe32
(
a°
, 0x12000, 0x1688a8a8);

462 
	`a°_wrôe32
(
a°
, 0x12000, 0x1688a8a8);

465 
d©a
 = 
	`a°_ªad32
(
a°
, 0x1202c);

466 
d©a
 &= 0xfffcffff;

467 
	`a°_wrôe32
(
a°
, 0, 
d©a
);

470 
	`a°_£t_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xa3, 0xcf, 0x00);

471 
	}
}

473 
	$a°_öô_3rdtx
(
drm_devi˚
 *
dev
)

475 
a°_¥iv©e
 *
a°
 = 
dev
->
dev_¥iv©e
;

476 
u8
 
jªg
;

478 i‡(
a°
->
chù
 =
AST2300
 ||á°->chù =
AST2400
 ||á°->chù =
AST2500
) {

479 
jªg
 = 
	`a°_gë_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xd1, 0xff);

480 
jªg
 & 0x0e) {

482 i‡(
	`a°_hdmi_check
(
dev
)){

483 
	`a°_öô_dvo
(
dev
);

484 
	`a°_hdmi_öô
(
dev
);

488 
	`a°_öô_dvo
(
dev
);

491 
	`a°_œunch_m68k
(
dev
);

494 
	`a°_öô_dvo
(
dev
);

497 i‡(
a°
->
tx_chù_ty≥
 =
AST_TX_SIL164
)

498 
	`a°_öô_dvo
(
dev
);

500 
	`a°_öô_™Æog
(
dev
);

503 
	}
}

505 
	$a°_ªÀa£_fúmw¨e
(
drm_devi˚
 *
dev
)

507 
a°_¥iv©e
 *
a°
 = 
dev
->
dev_¥iv©e
;

509 
	`ªÀa£_fúmw¨e
(
a°
->
dp501_fw
);

510 
a°
->
dp501_fw
 = 
NULL
;

511 
	}
}

	@/mnt/d/Src/DRM/sources/src504/ast_dram_tables.h

1 #i‚de‡
AST_DRAM_TABLES_H


2 
	#AST_DRAM_TABLES_H


	)

5 
	sa°_døm°ru˘
 {

6 
u16
 
	mödex
;

7 
u32
 
	md©a
;

10 c⁄° 
a°_døm°ru˘
 
	ga°2000_døm_èbÀ_d©a
[] = {

38 c⁄° 
a°_døm°ru˘
 
	ga°1100_døm_èbÀ_d©a
[] = {

91 c⁄° 
a°_døm°ru˘
 
	ga°2100_døm_èbÀ_d©a
[] = {

147 
	#REGTBL_NUM
 17

	)

148 
	#REGIDX_010
 0

	)

149 
	#REGIDX_014
 1

	)

150 
	#REGIDX_018
 2

	)

151 
	#REGIDX_020
 3

	)

152 
	#REGIDX_024
 4

	)

153 
	#REGIDX_02C
 5

	)

154 
	#REGIDX_030
 6

	)

155 
	#REGIDX_214
 7

	)

156 
	#REGIDX_2E0
 8

	)

157 
	#REGIDX_2E4
 9

	)

158 
	#REGIDX_2E8
 10

	)

159 
	#REGIDX_2EC
 11

	)

160 
	#REGIDX_2F0
 12

	)

161 
	#REGIDX_2F4
 13

	)

162 
	#REGIDX_2F8
 14

	)

163 
	#REGIDX_RFC
 15

	)

164 
	#REGIDX_PLL
 16

	)

166 c⁄° 
u32
 
	ga°2500_ddr3_1600_timög_èbÀ
[
REGTBL_NUM
] = {

185 c⁄° 
u32
 
	ga°2500_ddr4_1600_timög_èbÀ
[
REGTBL_NUM
] = {

	@/mnt/d/Src/DRM/sources/src504/ast_drv.c

29 
	~<löux/c⁄sﬁe.h
>

30 
	~<löux/moduÀ.h
>

31 
	~<löux/pci.h
>

33 
	~<drm/drm_¸tc_hñ≥r.h
>

34 
	~<drm/drm_drv.h
>

35 
	~<drm/drm_gem_vøm_hñ≥r.h
>

36 
	~<drm/drm_pci.h
>

37 
	~<drm/drm_¥obe_hñ≥r.h
>

38 
	~<drm/drm_vøm_mm_hñ≥r.h
>

40 
	~"a°_drv.h
"

42 
	ga°_mode£t
 = -1;

44 
MODULE_PARM_DESC
(
mode£t
, "Disable/Enable modesetting");

45 
moduÀ_∑øm_«med
(
mode£t
, 
a°_mode£t
, , 0400);

47 
	#PCI_VENDOR_ASPEED
 0x1a03

	)

49 
drm_drivî
 
	gdrivî
;

51 
	#AST_VGA_DEVICE
(
id
, 
öfo
) { \

52 .
˛ass
 = 
PCI_BASE_CLASS_DISPLAY
 << 16, \

53 .
˛ass_mask
 = 0xff0000, \

54 .
víd‹
 = 
PCI_VENDOR_ASPEED
, \

55 .
devi˚
 = 
id
, \

56 .
subvíd‹
 = 
PCI_ANY_ID
, \

57 .
subdevi˚
 = 
PCI_ANY_ID
, \

58 .
drivî_d©a
 = (Ë
öfo
 }

	)

60 c⁄° 
pci_devi˚_id
 
	gpciidli°
[] = {

61 
AST_VGA_DEVICE
(
PCI_CHIP_AST2000
, 
NULL
),

62 
AST_VGA_DEVICE
(
PCI_CHIP_AST2100
, 
NULL
),

63 
AST_VGA_DEVICE
(
PCI_CHIP_AIP200
, 
NULL
),

68 
MODULE_DEVICE_TABLE
(
pci
, 
pciidli°
);

70 
	$a°_kick_out_fúmw¨e_fb
(
pci_dev
 *
pdev
)

72 
≠îtuªs_°ru˘
 *
≠
;

73 
boﬁ
 
¥im¨y
 = 
Ál£
;

75 
≠
 = 
	`Æloc_≠îtuªs
(1);

76 i‡(!
≠
)

79 
≠
->
ønges
[0].
ba£
 = 
	`pci_ªsour˚_°¨t
(
pdev
, 0);

80 
≠
->
ønges
[0].
size
 = 
	`pci_ªsour˚_Àn
(
pdev
, 0);

82 #ifde‡
CONFIG_X86


83 
¥im¨y
 = 
pdev
->
ªsour˚
[
PCI_ROM_RESOURCE
].
Êags
 & 
IORESOURCE_ROM_SHADOW
;

85 
	`drm_fb_hñ≥r_ªmove_c⁄Êi˘ög_‰amebuf„rs
(
≠
, "a°drmfb", 
¥im¨y
);

86 
	`k‰ì
(
≠
);

87 
	}
}

89 
	$a°_pci_¥obe
(
pci_dev
 *
pdev
, c⁄° 
pci_devi˚_id
 *
ít
)

91 
	`a°_kick_out_fúmw¨e_fb
(
pdev
);

93  
	`drm_gë_pci_dev
(
pdev
, 
ít
, &
drivî
);

94 
	}
}

97 
	$a°_pci_ªmove
(
pci_dev
 *
pdev
)

99 
drm_devi˚
 *
dev
 = 
	`pci_gë_drvd©a
(
pdev
);

101 
	`drm_put_dev
(
dev
);

102 
	}
}

106 
	$a°_drm_‰ìze
(
drm_devi˚
 *
dev
)

108 
	`drm_kms_hñ≥r_pﬁl_dißbÀ
(
dev
);

109 
	`pci_ßve_°©e
(
dev
->
pdev
);

110 
	`drm_fb_hñ≥r_£t_su•íd_u∆ocked
(
dev
->
fb_hñ≥r
, 
åue
);

113 
	}
}

115 
	$a°_drm_thaw
(
drm_devi˚
 *
dev
)

117 
	`a°_po°_gpu
(
dev
);

119 
	`drm_mode_c⁄fig_ª£t
(
dev
);

120 
	`drm_hñ≥r_ªsume_f‹˚_mode
(
dev
);

121 
	`drm_fb_hñ≥r_£t_su•íd_u∆ocked
(
dev
->
fb_hñ≥r
, 
Ál£
);

124 
	}
}

126 
	$a°_drm_ªsume
(
drm_devi˚
 *
dev
)

128 
ªt
;

130 i‡(
	`pci_íabÀ_devi˚
(
dev
->
pdev
))

131  -
EIO
;

133 
ªt
 = 
	`a°_drm_thaw
(
dev
);

134 i‡(
ªt
)

135  
ªt
;

137 
	`drm_kms_hñ≥r_pﬁl_íabÀ
(
dev
);

139 
	}
}

141 
	$a°_pm_su•íd
(
devi˚
 *
dev
)

143 
pci_dev
 *
pdev
 = 
	`to_pci_dev
(
dev
);

144 
drm_devi˚
 *
ddev
 = 
	`pci_gë_drvd©a
(
pdev
);

145 
îr‹
;

147 
îr‹
 = 
	`a°_drm_‰ìze
(
ddev
);

148 i‡(
îr‹
)

149  
îr‹
;

151 
	`pci_dißbÀ_devi˚
(
pdev
);

152 
	`pci_£t_powî_°©e
(
pdev
, 
PCI_D3hŸ
);

154 
	}
}

155 
	$a°_pm_ªsume
(
devi˚
 *
dev
)

157 
pci_dev
 *
pdev
 = 
	`to_pci_dev
(
dev
);

158 
drm_devi˚
 *
ddev
 = 
	`pci_gë_drvd©a
(
pdev
);

159  
	`a°_drm_ªsume
(
ddev
);

160 
	}
}

162 
	$a°_pm_‰ìze
(
devi˚
 *
dev
)

164 
pci_dev
 *
pdev
 = 
	`to_pci_dev
(
dev
);

165 
drm_devi˚
 *
ddev
 = 
	`pci_gë_drvd©a
(
pdev
);

167 i‡(!
ddev
 || !ddev->
dev_¥iv©e
)

168  -
ENODEV
;

169  
	`a°_drm_‰ìze
(
ddev
);

171 
	}
}

173 
	$a°_pm_thaw
(
devi˚
 *
dev
)

175 
pci_dev
 *
pdev
 = 
	`to_pci_dev
(
dev
);

176 
drm_devi˚
 *
ddev
 = 
	`pci_gë_drvd©a
(
pdev
);

177  
	`a°_drm_thaw
(
ddev
);

178 
	}
}

180 
	$a°_pm_powîoff
(
devi˚
 *
dev
)

182 
pci_dev
 *
pdev
 = 
	`to_pci_dev
(
dev
);

183 
drm_devi˚
 *
ddev
 = 
	`pci_gë_drvd©a
(
pdev
);

185  
	`a°_drm_‰ìze
(
ddev
);

186 
	}
}

188 c⁄° 
dev_pm_›s
 
	ga°_pm_›s
 = {

189 .
su•íd
 = 
a°_pm_su•íd
,

190 .
	gªsume
 = 
a°_pm_ªsume
,

191 .
	g‰ìze
 = 
a°_pm_‰ìze
,

192 .
	gthaw
 = 
a°_pm_thaw
,

193 .
	gpowîoff
 = 
a°_pm_powîoff
,

194 .
	gª°‹e
 = 
a°_pm_ªsume
,

197 
pci_drivî
 
	ga°_pci_drivî
 = {

198 .
«me
 = 
DRIVER_NAME
,

199 .
	gid_èbÀ
 = 
pciidli°
,

200 .
	g¥obe
 = 
a°_pci_¥obe
,

201 .
	gªmove
 = 
a°_pci_ªmove
,

202 .
	gdrivî
.
	gpm
 = &
a°_pm_›s
,

205 c⁄° 
fûe_›î©i⁄s
 
	ga°_f›s
 = {

206 .
ow√r
 = 
THIS_MODULE
,

207 
	gDRM_VRAM_MM_FILE_OPERATIONS


210 
drm_drivî
 
	gdrivî
 = {

211 .
drivî_„©uªs
 = 
DRIVER_MODESET
 | 
DRIVER_GEM
,

213 .
	glﬂd
 = 
a°_drivî_lﬂd
,

214 .
	gu∆ﬂd
 = 
a°_drivî_u∆ﬂd
,

216 .
	gf›s
 = &
a°_f›s
,

217 .
	g«me
 = 
DRIVER_NAME
,

218 .
	gdesc
 = 
DRIVER_DESC
,

219 .
	gd©e
 = 
DRIVER_DATE
,

220 .
	gmaj‹
 = 
DRIVER_MAJOR
,

221 .
	gmö‹
 = 
DRIVER_MINOR
,

222 .
	g∑tchÀvñ
 = 
DRIVER_PATCHLEVEL
,

224 
	gDRM_GEM_VRAM_DRIVER


227 
__öô
 
	$a°_öô
()

229 i‡(
	`vgac⁄_ãxt_f‹˚
(Ë&& 
a°_mode£t
 == -1)

230  -
EINVAL
;

232 i‡(
a°_mode£t
 == 0)

233  -
EINVAL
;

234  
	`pci_ªgi°î_drivî
(&
a°_pci_drivî
);

235 
	}
}

236 
__exô
 
	$a°_exô
()

238 
	`pci_uƒegi°î_drivî
(&
a°_pci_drivî
);

239 
	}
}

241 
moduÀ_öô
(
a°_öô
);

242 
moduÀ_exô
(
a°_exô
);

244 
MODULE_AUTHOR
(
DRIVER_AUTHOR
);

245 
MODULE_DESCRIPTION
(
DRIVER_DESC
);

246 
MODULE_LICENSE
("GPLándádditionalÑights");

	@/mnt/d/Src/DRM/sources/src504/ast_drv.h

28 #i‚de‡
__AST_DRV_H__


29 
	#__AST_DRV_H__


	)

31 
	~<löux/ty≥s.h
>

32 
	~<löux/io.h
>

33 
	~<löux/i2c.h
>

34 
	~<löux/i2c-Ægo-bô.h
>

36 
	~<drm/drm_c⁄√˘‹.h
>

37 
	~<drm/drm_¸tc.h
>

38 
	~<drm/drm_ícodî.h
>

39 
	~<drm/drm_mode.h
>

40 
	~<drm/drm_‰amebuf„r.h
>

41 
	~<drm/drm_fb_hñ≥r.h
>

43 
	#DRIVER_AUTHOR
 "DavêAúlõ"

	)

45 
	#DRIVER_NAME
 "a°"

	)

46 
	#DRIVER_DESC
 "AST"

	)

47 
	#DRIVER_DATE
 "20210324"

	)

49 
	#DRIVER_MAJOR
 1

	)

50 
	#DRIVER_MINOR
 12

	)

51 
	#DRIVER_PATCHLEVEL
 0

	)

53 
	#PCI_CHIP_AST2000
 0x2000

	)

54 
	#PCI_CHIP_AST2100
 0x2010

	)

55 
	#PCI_CHIP_AST1180
 0x1180

	)

56 
	#PCI_CHIP_AIP200
 0xA200

	)

59 
	ea°_chù
 {

60 
	mAST2000
,

61 
	mAST2100
,

62 
	mAST1100
,

63 
	mAST2200
,

64 
	mAST2150
,

65 
	mAST2300
,

66 
	mAST2400
,

67 
	mAST2500
,

68 
	mAST2600
,

69 
	mAST1180
,

70 
	mAIP200
,

73 
	ea°_tx_chù
 {

74 
	mAST_TX_NONE
,

75 
	mAST_TX_SIL164
,

76 
	mAST_TX_ITE66121
,

77 
	mAST_TX_DP501
,

78 
	mAST_TX_ASTDP
,

81 
	#AST_DRAM_512Mx16
 0

	)

82 
	#AST_DRAM_1Gx16
 1

	)

83 
	#AST_DRAM_512Mx32
 2

	)

84 
	#AST_DRAM_1Gx32
 3

	)

85 
	#AST_DRAM_2Gx16
 6

	)

86 
	#AST_DRAM_4Gx16
 7

	)

87 
	#AST_DRAM_8Gx16
 8

	)

89 
	sa°_¥iv©e
 {

90 
drm_devi˚
 *
	mdev
;

92 
__iomem
 *
	mªgs
;

93 
__iomem
 *
	mi‹egs
;

94 
__iomem
 *
	mª£rvedbuf„r
;

96 
a°_chù
 
	mchù
;

97 
boﬁ
 
	mvga2_˛⁄e
;

98 
uöt32_t
 
	mdøm_bus_width
;

99 
uöt32_t
 
	mdøm_ty≥
;

100 
uöt32_t
 
	mm˛k
;

101 
uöt32_t
 
	mvøm_size
;

103 
	mfb_mår
;

105 
drm_gem_obje˘
 *
	mcurs‹_ˇche
;

106 
	m√xt_curs‹
;

107 
boﬁ
 
	msuµ‹t_wide_s¸ìn
;

108 
boﬁ
 
	msuµ‹t_√wvga_mode
;

109 
boﬁ
 
	mRefCLK25MHz
;

111 
	ma°_u£_p2a
,

112 
	ma°_u£_dt
,

113 
	ma°_u£_deÁu…s


114 } 
	mc⁄fig_mode
;

116 
a°_tx_chù
 
	mtx_chù_ty≥
;

117 
u8
 
	mdp501_max˛k
;

118 
u8
 *
	mdp501_fw_addr
;

119 c⁄° 
fúmw¨e
 *
	mdp501_fw
;

122 
u8
 
	mASTDP_Sèã
;

125 
a°_drivî_lﬂd
(
drm_devi˚
 *
dev
, 
Êags
);

126 
a°_drivî_u∆ﬂd
(
drm_devi˚
 *
dev
);

128 
	ga°_gem_obje˘
;

130 
	#AST_IO_AR_PORT_WRITE
 (0x40)

	)

131 
	#AST_IO_MISC_PORT_WRITE
 (0x42)

	)

132 
	#AST_IO_VGA_ENABLE_PORT
 (0x43)

	)

133 
	#AST_IO_SEQ_PORT
 (0x44)

	)

134 
	#AST_IO_DAC_INDEX_READ
 (0x47)

	)

135 
	#AST_IO_DAC_INDEX_WRITE
 (0x48)

	)

136 
	#AST_IO_DAC_DATA
 (0x49)

	)

137 
	#AST_IO_GR_PORT
 (0x4E)

	)

138 
	#AST_IO_CRTC_PORT
 (0x54)

	)

139 
	#AST_IO_INPUT_STATUS1_READ
 (0x5A)

	)

140 
	#AST_IO_MISC_PORT_READ
 (0x4C)

	)

142 
	#MMIOREG_DP_DATA
 (0x20000)

143 
	#MMIOREG_DP_EDID
 (0x20800)

	)

144 
	#MMIOREG_DP_REG
 (0x24000)

145 
	#MMIOREG_DP_INST
 (0x28000)

146 

	)

147 
	#AST_IO_MM_OFFSET
 (0x380)

	)

149 
	#__a°_ªad
(
x
) \

150 
ölöe
 
u
##
x
 
a°_ªad
##
	`x
(
a°_¥iv©e
 *
a°
, 
u32
 
ªg
) { \

151 
u
##
x
 
vÆ
 = 0;\

152 
vÆ
 = 
i‹ód
##
	`x
(
a°
->
ªgs
 + 
ªg
); \

153  
vÆ
;\

154 }

	)

156 
__a°_ªad
(8);

157 
__a°_ªad
(16);

158 
	$__a°_ªad
(32)

160 
	#__a°_io_ªad
(
x
) \

161 
ölöe
 
u
##
x
 
a°_io_ªad
##
	`x
(
a°_¥iv©e
 *
a°
, 
u32
 
ªg
) { \

162 
u
##
x
 
vÆ
 = 0;\

163 
vÆ
 = 
i‹ód
##
	`x
(
a°
->
i‹egs
 + 
ªg
); \

164  
vÆ
;\

165 
	}

	)
}

167 
__a°_io_ªad
(8);

168 
__a°_io_ªad
(16);

169 
__a°_io_ªad
(32);

171 
	#__a°_wrôe
(
x
) \

172 
ölöe
 
a°_wrôe
##
	`x
(
a°_¥iv©e
 *
a°
, 
u32
 
ªg
, 
u
##
x
 
vÆ
) {\

173 
iowrôe
##
	`x
(
vÆ
, 
a°
->
ªgs
 + 
ªg
);\

174 }

	)

176 
__a°_wrôe
(8);

177 
__a°_wrôe
(16);

178 
__a°_wrôe
(32);

180 
	#__a°_io_wrôe
(
x
) \

181 
ölöe
 
a°_io_wrôe
##
	`x
(
a°_¥iv©e
 *
a°
, 
u32
 
ªg
, 
u
##
x
 
vÆ
) {\

182 
iowrôe
##
	`x
(
vÆ
, 
a°
->
i‹egs
 + 
ªg
);\

183 }

	)

185 
__a°_io_wrôe
(8);

186 
__a°_io_wrôe
(16);

187 #unde‡
__a°_io_wrôe


189 
ölöe
 
	$a°_£t_ödex_ªg
(
a°_¥iv©e
 *
a°
,

190 
uöt32_t
 
ba£
, 
uöt8_t
 
ödex
,

191 
uöt8_t
 
vÆ
)

193 
	`a°_io_wrôe16
(
a°
, 
ba£
, ((
u16
)
vÆ
 << 8Ë| 
ödex
);

194 
	}
}

196 
a°_£t_ödex_ªg_mask
(
a°_¥iv©e
 *
a°
,

197 
uöt32_t
 
ba£
, 
uöt8_t
 
ödex
,

198 
uöt8_t
 
mask
, uöt8_à
vÆ
);

199 
uöt8_t
 
a°_gë_ödex_ªg
(
a°_¥iv©e
 *
a°
,

200 
uöt32_t
 
ba£
, 
uöt8_t
 
ödex
);

201 
uöt8_t
 
a°_gë_ödex_ªg_mask
(
a°_¥iv©e
 *
a°
,

202 
uöt32_t
 
ba£
, 
uöt8_t
 
ödex
, uöt8_à
mask
);

204 
ölöe
 
	$a°_›í_key
(
a°_¥iv©e
 *
a°
)

206 
	`a°_£t_ödex_ªg
(
a°
, 
AST_IO_CRTC_PORT
, 0x80, 0xA8);

207 
	}
}

209 
ölöe
 
a°_waô_⁄e_vsync
(
a°_¥iv©e
 *
a°
);

211 
	#AST_VIDMEM_SIZE_8M
 0x00800000

	)

212 
	#AST_VIDMEM_SIZE_16M
 0x01000000

	)

213 
	#AST_VIDMEM_SIZE_32M
 0x02000000

	)

214 
	#AST_VIDMEM_SIZE_64M
 0x04000000

	)

215 
	#AST_VIDMEM_SIZE_128M
 0x08000000

	)

217 
	#AST_VIDMEM_DEFAULT_SIZE
 
AST_VIDMEM_SIZE_8M


	)

219 
	#AST_MAX_HWC_WIDTH
 64

	)

220 
	#AST_MAX_HWC_HEIGHT
 64

	)

222 
	#AST_HWC_SIZE
 (
AST_MAX_HWC_WIDTH
*
AST_MAX_HWC_HEIGHT
*2)

	)

223 
	#AST_HWC_SIGNATURE_SIZE
 32

	)

225 
	#AST_DEFAULT_HWC_NUM
 2

	)

227 
	#AST_HWC_SIGNATURE_CHECKSUM
 0x00

	)

228 
	#AST_HWC_SIGNATURE_SizeX
 0x04

	)

229 
	#AST_HWC_SIGNATURE_SizeY
 0x08

	)

230 
	#AST_HWC_SIGNATURE_X
 0x0C

	)

231 
	#AST_HWC_SIGNATURE_Y
 0x10

	)

232 
	#AST_HWC_SIGNATURE_HOTSPOTX
 0x14

	)

233 
	#AST_HWC_SIGNATURE_HOTSPOTY
 0x18

	)

236 
	sa°_i2c_ch™
 {

237 
i2c_ad≠ãr
 
	mad≠ãr
;

238 
drm_devi˚
 *
	mdev
;

239 
i2c_Ægo_bô_d©a
 
	mbô
;

242 
	sa°_c⁄√˘‹
 {

243 
drm_c⁄√˘‹
 
	mba£
;

244 
a°_i2c_ch™
 *
	mi2c
;

247 
	sa°_¸tc
 {

248 
drm_¸tc
 
	mba£
;

249 
u8
 
	moff£t_x
, 
	moff£t_y
;

252 
	sa°_ícodî
 {

253 
drm_ícodî
 
	mba£
;

256 
	#to_a°_¸tc
(
x
Ë
	`c⁄èöî_of
(x, 
a°_¸tc
, 
ba£
)

	)

257 
	#to_a°_c⁄√˘‹
(
x
Ë
	`c⁄èöî_of
(x, 
a°_c⁄√˘‹
, 
ba£
)

	)

258 
	#to_a°_ícodî
(
x
Ë
	`c⁄èöî_of
(x, 
a°_ícodî
, 
ba£
)

	)

260 
	sa°_vbios_°dèbÀ
 {

261 
u8
 
	mmisc
;

262 
u8
 
	m£q
[4];

263 
u8
 
	m¸tc
[25];

264 
u8
 
	m¨
[20];

265 
u8
 
	mgr
[9];

268 
	sa°_vbios_íhèbÀ
 {

269 
u32
 
	mht
;

270 
u32
 
	mhde
;

271 
u32
 
	mhÂ
;

272 
u32
 
	mhsync
;

273 
u32
 
	mvt
;

274 
u32
 
	mvde
;

275 
u32
 
	mvÂ
;

276 
u32
 
	mvsync
;

277 
u32
 
	md˛k_ödex
;

278 
u32
 
	mÊags
;

279 
u32
 
	mª‰esh_øã
;

280 
u32
 
	mª‰esh_øã_ödex
;

281 
u32
 
	mmode_id
;

284 
	sa°_vbios_d˛k_öfo
 {

285 
u8
 
	m∑øm1
;

286 
u8
 
	m∑øm2
;

287 
u8
 
	m∑øm3
;

290 
	sa°_vbios_mode_öfo
 {

291 c⁄° 
a°_vbios_°dèbÀ
 *
	m°d_èbÀ
;

292 c⁄° 
a°_vbios_íhèbÀ
 *
	míh_èbÀ
;

295 
a°_mode_öô
(
drm_devi˚
 *
dev
);

296 
a°_mode_föi
(
drm_devi˚
 *
dev
);

298 
	#AST_MM_ALIGN_SHIFT
 4

	)

299 
	#AST_MM_ALIGN_MASK
 ((1 << 
AST_MM_ALIGN_SHIFT
Ë- 1)

	)

301 
a°_mm_öô
(
a°_¥iv©e
 *
a°
);

302 
a°_mm_föi
(
a°_¥iv©e
 *
a°
);

304 
a°_gem_¸óã
(
drm_devi˚
 *
dev
,

305 
u32
 
size
, 
boﬁ
 
iskî√l
,

306 
drm_gem_obje˘
 **
obj
);

309 
a°_íabÀ_vga
(
drm_devi˚
 *
dev
);

310 
a°_íabÀ_mmio
(
drm_devi˚
 *
dev
);

311 
boﬁ
 
a°_is_vga_íabÀd
(
drm_devi˚
 *
dev
);

312 
a°_po°_gpu
(
drm_devi˚
 *
dev
);

313 
u32
 
a°_mödwm
(
a°_¥iv©e
 *
a°
, u32 
r
);

314 
a°_moutdwm
(
a°_¥iv©e
 *
a°
, 
u32
 
r
, u32 
v
);

315 
∑tch_ahb_a°2500
(
a°_¥iv©e
 *
a°
);

317 
a°_£t_dp501_video_ouçut
(
drm_devi˚
 *
dev
, 
u8
 
mode
);

318 
boﬁ
 
a°_backup_fw
(
drm_devi˚
 *
dev
, 
u8
 *
addr
, 
u32
 
size
);

319 
boﬁ
 
a°_dp501_ªad_edid
(
drm_devi˚
 *
dev
, 
u8
 *
edidd©a
);

320 
u8
 
a°_gë_dp501_max_˛k
(
drm_devi˚
 *
dev
);

321 
a°_öô_3rdtx
(
drm_devi˚
 *
dev
);

322 
a°_ªÀa£_fúmw¨e
(
drm_devi˚
 *
dev
);

324 
	#DPC⁄åﬁPowî


	)

325 
boﬁ
 
a°_dp_ªad_edid
(
drm_devi˚
 *
dev
, 
u8
 *
edidd©a
);

326 
boﬁ
 
a°_dp_œunch
(
drm_devi˚
 *
dev
, 
u8
 
bPowî
);

327 #ifde‡
DPC⁄åﬁPowî


328 
a°_dp_PowîOnOff
(
drm_devi˚
 *
dev
, 
u8
 
Mode
);

330 
a°_dp_SëOnOff
(
drm_devi˚
 *
dev
, 
u8
 
Mode
);

331 
a°_dp_SëOuçut
(
drm_¸tc
 *
¸tc
, 
a°_vbios_mode_öfo
 *
vbios_mode
);

	@/mnt/d/Src/DRM/sources/src504/ast_fb.c

28 
	~<löux/moduÀ.h
>

29 
	~<löux/kî√l.h
>

30 
	~<löux/î∫o.h
>

31 
	~<löux/°rög.h
>

32 
	~<löux/mm.h
>

33 
	~<löux/ây.h
>

34 
	~<löux/sy§q.h
>

35 
	~<löux/dñay.h
>

36 
	~<löux/öô.h
>

39 
	~<drm/drmP.h
>

40 
	~<drm/drm_¸tc.h
>

41 
	~<drm/drm_fb_hñ≥r.h
>

42 
	~<drm/drm_utû.h
>

43 
	~<drm/drm_¸tc_hñ≥r.h
>

45 
	~"a°_drv.h
"

47 
	$a°_dúty_upd©e
(
a°_fbdev
 *
afbdev
,

48 
x
, 
y
, 
width
, 
height
)

50 
i
;

51 
drm_gem_vøm_obje˘
 *
gbo
;

52 
§c_off£t
, 
d°_off£t
;

53 
bµ
 = 
afbdev
->
afb
.
ba£
.
f‹m©
->
˝p
[0];

54 
ªt
;

55 
u8
 *
d°
;

56 
boﬁ
 
unm≠
 = 
Ál£
;

57 
boﬁ
 
°‹e_f‹_œãr
 = 
Ál£
;

58 
x2
, 
y2
;

59 
Êags
;

61 
gbo
 = 
	`drm_gem_vøm_of_gem
(
afbdev
->
afb
.
obj
);

63 i‡(
	`drm_ˇn_¶ìp
()) {

68 
ªt
 = 
	`drm_gem_vøm_pö
(
gbo
, 0);

69 i‡(
ªt
) {

70 i‡(
ªt
 !-
EBUSY
)

72 
°‹e_f‹_œãr
 = 
åue
;

75 
°‹e_f‹_œãr
 = 
åue
;

78 
x2
 = 
x
 + 
width
 - 1;

79 
y2
 = 
y
 + 
height
 - 1;

80 
	`•ö_lock_úqßve
(&
afbdev
->
dúty_lock
, 
Êags
);

82 i‡(
afbdev
->
y1
 < 
y
)

83 
y
 = 
afbdev
->
y1
;

84 i‡(
afbdev
->
y2
 > y2)

85 
y2
 = 
afbdev
->y2;

86 i‡(
afbdev
->
x1
 < 
x
)

87 
x
 = 
afbdev
->
x1
;

88 i‡(
afbdev
->
x2
 > x2)

89 
x2
 = 
afbdev
->x2;

91 i‡(
°‹e_f‹_œãr
) {

92 
afbdev
->
x1
 = 
x
;

93 
afbdev
->
x2
 = x2;

94 
afbdev
->
y1
 = 
y
;

95 
afbdev
->
y2
 = y2;

96 
	`•ö_u∆ock_úqª°‹e
(&
afbdev
->
dúty_lock
, 
Êags
);

100 
afbdev
->
x1
 =áfbdev->
y1
 = 
INT_MAX
;

101 
afbdev
->
x2
 =áfbdev->
y2
 = 0;

102 
	`•ö_u∆ock_úqª°‹e
(&
afbdev
->
dúty_lock
, 
Êags
);

104 
d°
 = 
	`drm_gem_vøm_km≠
(
gbo
, 
Ál£
, 
NULL
);

105 i‡(
	`IS_ERR
(
d°
)) {

106 
	`DRM_ERROR
("failedÅo kmap fb updates\n");

107 
out
;

108 } i‡(!
d°
) {

109 
d°
 = 
	`drm_gem_vøm_km≠
(
gbo
, 
åue
, 
NULL
);

110 i‡(
	`IS_ERR
(
d°
)) {

111 
	`DRM_ERROR
("failedÅo kmap fb updates\n");

112 
out
;

114 
unm≠
 = 
åue
;

117 
i
 = 
y
; i <
y2
; i++) {

119 
§c_off£t
 = 
d°_off£t
 =

120 
i
 * 
afbdev
->
afb
.
ba£
.
pôches
[0] + (
x
 * 
bµ
);

121 
	`mem˝y_toio
(
d°
 + 
d°_off£t
, 
afbdev
->
sy§am
 + 
§c_off£t
,

122 (
x2
 - 
x
 + 1Ë* 
bµ
);

125 i‡(
unm≠
)

126 
	`drm_gem_vøm_kunm≠
(
gbo
);

128 
out
:

129 
	`drm_gem_vøm_u≈ö
(
gbo
);

130 
	}
}

132 
	$a°_fûÃe˘
(
fb_öfo
 *
öfo
,

133 c⁄° 
fb_fûÃe˘
 *
ª˘
)

135 
a°_fbdev
 *
afbdev
 = 
öfo
->
∑r
;

136 
	`drm_fb_hñ≥r_sys_fûÃe˘
(
öfo
, 
ª˘
);

137 
	`a°_dúty_upd©e
(
afbdev
, 
ª˘
->
dx
,Ñe˘->
dy
,Ñe˘->
width
,

138 
ª˘
->
height
);

139 
	}
}

141 
	$a°_c›y¨ó
(
fb_öfo
 *
öfo
,

142 c⁄° 
fb_c›y¨ó
 *
¨ó
)

144 
a°_fbdev
 *
afbdev
 = 
öfo
->
∑r
;

145 
	`drm_fb_hñ≥r_sys_c›y¨ó
(
öfo
, 
¨ó
);

146 
	`a°_dúty_upd©e
(
afbdev
, 
¨ó
->
dx
,áªa->
dy
,áªa->
width
,

147 
¨ó
->
height
);

148 
	}
}

150 
	$a°_imageblô
(
fb_öfo
 *
öfo
,

151 c⁄° 
fb_image
 *
image
)

153 
a°_fbdev
 *
afbdev
 = 
öfo
->
∑r
;

154 
	`drm_fb_hñ≥r_sys_imageblô
(
öfo
, 
image
);

155 
	`a°_dúty_upd©e
(
afbdev
, 
image
->
dx
, image->
dy
, image->
width
,

156 
image
->
height
);

157 
	}
}

159 
fb_›s
 
	ga°fb_›s
 = {

160 .
ow√r
 = 
THIS_MODULE
,

161 .
	gfb_check_v¨
 = 
drm_fb_hñ≥r_check_v¨
,

162 .
	gfb_£t_∑r
 = 
drm_fb_hñ≥r_£t_∑r
,

163 .
	gfb_fûÃe˘
 = 
a°_fûÃe˘
,

164 .
	gfb_c›y¨ó
 = 
a°_c›y¨ó
,

165 .
	gfb_imageblô
 = 
a°_imageblô
,

166 .
	gfb_∑n_di•œy
 = 
drm_fb_hñ≥r_∑n_di•œy
,

167 .
	gfb_bœnk
 = 
drm_fb_hñ≥r_bœnk
,

168 .
	gfb_£tcm≠
 = 
drm_fb_hñ≥r_£tcm≠
,

171 
	$a°fb_¸óã_obje˘
(
a°_fbdev
 *
afbdev
,

172 c⁄° 
drm_mode_fb_cmd2
 *
mode_cmd
,

173 
drm_gem_obje˘
 **
gobj_p
)

175 
drm_devi˚
 *
dev
 = 
afbdev
->
hñ≥r
.dev;

176 
u32
 
size
;

177 
drm_gem_obje˘
 *
gobj
;

178 
ªt
 = 0;

180 
size
 = 
mode_cmd
->
pôches
[0] * mode_cmd->
height
;

181 
ªt
 = 
	`a°_gem_¸óã
(
dev
, 
size
, 
åue
, &
gobj
);

182 i‡(
ªt
)

183  
ªt
;

185 *
gobj_p
 = 
gobj
;

186  
ªt
;

187 
	}
}

189 
	$a°fb_¸óã
(
drm_fb_hñ≥r
 *
hñ≥r
,

190 
drm_fb_hñ≥r_surÁ˚_size
 *
sizes
)

192 
a°_fbdev
 *
afbdev
 =

193 
	`c⁄èöî_of
(
hñ≥r
, 
a°_fbdev
, helper);

194 
drm_devi˚
 *
dev
 = 
afbdev
->
hñ≥r
.dev;

195 
drm_mode_fb_cmd2
 
mode_cmd
;

196 
drm_‰amebuf„r
 *
fb
;

197 
fb_öfo
 *
öfo
;

198 
size
, 
ªt
;

199 *
sy§am
;

200 
drm_gem_obje˘
 *
gobj
 = 
NULL
;

201 
mode_cmd
.
width
 = 
sizes
->
surÁ˚_width
;

202 
mode_cmd
.
height
 = 
sizes
->
surÁ˚_height
;

203 
mode_cmd
.
pôches
[0] = mode_cmd.
width
 * ((
sizes
->
surÁ˚_bµ
 + 7)/8);

205 
mode_cmd
.
pixñ_f‹m©
 = 
	`drm_mode_Àgacy_fb_f‹m©
(
sizes
->
surÁ˚_bµ
,

206 
sizes
->
surÁ˚_dïth
);

208 
size
 = 
mode_cmd
.
pôches
[0] * mode_cmd.
height
;

210 
ªt
 = 
	`a°fb_¸óã_obje˘
(
afbdev
, &
mode_cmd
, &
gobj
);

211 i‡(
ªt
) {

212 
	`DRM_ERROR
("ÁûedÅÿ¸óã fbc⁄ backög obje˘ %d\n", 
ªt
);

213  
ªt
;

216 
sy§am
 = 
	`vmÆloc
(
size
);

217 i‡(!
sy§am
)

218  -
ENOMEM
;

220 
öfo
 = 
	`drm_fb_hñ≥r_Æloc_fbi
(
hñ≥r
);

221 i‡(
	`IS_ERR
(
öfo
)) {

222 
ªt
 = 
	`PTR_ERR
(
öfo
);

223 
out
;

225 
ªt
 = 
	`a°_‰amebuf„r_öô
(
dev
, &
afbdev
->
afb
, &
mode_cmd
, 
gobj
);

226 i‡(
ªt
)

227 
out
;

229 
afbdev
->
sy§am
 = sysram;

230 
afbdev
->
size
 = size;

232 
fb
 = &
afbdev
->
afb
.
ba£
;

233 
afbdev
->
hñ≥r
.
fb
 = fb;

235 
öfo
->
fb›s
 = &
a°fb_›s
;

237 
öfo
->
≠îtuªs
->
ønges
[0].
ba£
 = 
	`pci_ªsour˚_°¨t
(
dev
->
pdev
, 0);

238 
öfo
->
≠îtuªs
->
ønges
[0].
size
 = 
	`pci_ªsour˚_Àn
(
dev
->
pdev
, 0);

240 
	`drm_fb_hñ≥r_fûl_öfo
(
öfo
, &
afbdev
->
hñ≥r
, 
sizes
);

242 
öfo
->
s¸ìn_ba£
 = 
sy§am
;

243 
öfo
->
s¸ìn_size
 = 
size
;

245 
öfo
->
pixm≠
.
Êags
 = 
FB_PIXMAP_SYSTEM
;

247 
	`DRM_DEBUG_KMS
("allocated %dx%d\n",

248 
fb
->
width
, fb->
height
);

252 
out
:

253 
	`v‰ì
(
sy§am
);

254  
ªt
;

255 
	}
}

257 c⁄° 
drm_fb_hñ≥r_funcs
 
	ga°_fb_hñ≥r_funcs
 = {

258 .
fb_¥obe
 = 
a°fb_¸óã
,

261 
	$a°_fbdev_de°roy
(
drm_devi˚
 *
dev
,

262 
a°_fbdev
 *
afbdev
)

264 
a°_‰amebuf„r
 *
afb
 = &
afbdev
->afb;

266 
	`drm_hñ≥r_f‹˚_dißbÀ_Æl
(
dev
);

267 
	`drm_fb_hñ≥r_uƒegi°î_fbi
(&
afbdev
->
hñ≥r
);

269 i‡(
afb
->
obj
) {

270 
	`drm_gem_obje˘_put_u∆ocked
(
afb
->
obj
);

271 
afb
->
obj
 = 
NULL
;

273 
	`drm_fb_hñ≥r_föi
(&
afbdev
->
hñ≥r
);

275 
	`v‰ì
(
afbdev
->
sy§am
);

276 
	`drm_‰amebuf„r_uƒegi°î_¥iv©e
(&
afb
->
ba£
);

277 
	`drm_‰amebuf„r_˛ónup
(&
afb
->
ba£
);

278 
	}
}

280 
	$a°_fbdev_öô
(
drm_devi˚
 *
dev
)

282 
a°_¥iv©e
 *
a°
 = 
dev
->
dev_¥iv©e
;

283 
a°_fbdev
 *
afbdev
;

284 
ªt
;

286 
afbdev
 = 
	`kzÆloc
((
a°_fbdev
), 
GFP_KERNEL
);

287 i‡(!
afbdev
)

288  -
ENOMEM
;

290 
a°
->
fbdev
 = 
afbdev
;

291 
	`•ö_lock_öô
(&
afbdev
->
dúty_lock
);

293 
	`drm_fb_hñ≥r_¥ï¨e
(
dev
, &
afbdev
->
hñ≥r
, &
a°_fb_hñ≥r_funcs
);

295 
ªt
 = 
	`drm_fb_hñ≥r_öô
(
dev
, &
afbdev
->
hñ≥r
, 1);

296 i‡(
ªt
)

297 
‰ì
;

299 
ªt
 = 
	`drm_fb_hñ≥r_sögÀ_add_Æl_c⁄√˘‹s
(&
afbdev
->
hñ≥r
);

300 i‡(
ªt
)

301 
föi
;

304 
	`drm_hñ≥r_dißbÀ_unu£d_fun˘i⁄s
(
dev
);

306 
ªt
 = 
	`drm_fb_hñ≥r_öôül_c⁄fig
(&
afbdev
->
hñ≥r
, 32);

307 i‡(
ªt
)

308 
föi
;

312 
föi
:

313 
	`drm_fb_hñ≥r_föi
(&
afbdev
->
hñ≥r
);

314 
‰ì
:

315 
	`k‰ì
(
afbdev
);

316  
ªt
;

317 
	}
}

319 
	$a°_fbdev_föi
(
drm_devi˚
 *
dev
)

321 
a°_¥iv©e
 *
a°
 = 
dev
->
dev_¥iv©e
;

323 i‡(!
a°
->
fbdev
)

326 
	`a°_fbdev_de°roy
(
dev
, 
a°
->
fbdev
);

327 
	`k‰ì
(
a°
->
fbdev
);

328 
a°
->
fbdev
 = 
NULL
;

329 
	}
}

331 
	$a°_fbdev_£t_su•íd
(
drm_devi˚
 *
dev
, 
°©e
)

333 
a°_¥iv©e
 *
a°
 = 
dev
->
dev_¥iv©e
;

335 i‡(!
a°
->
fbdev
)

338 
	`drm_fb_hñ≥r_£t_su•íd
(&
a°
->
fbdev
->
hñ≥r
, 
°©e
);

339 
	}
}

341 
	$a°_fbdev_£t_ba£
(
a°_¥iv©e
 *
a°
, 
gpu_addr
)

343 
a°
->
fbdev
->
hñ≥r
.fbdev->
fix
.
smem_°¨t
 =

344 
a°
->
fbdev
->
hñ≥r
.fbdev->
≠îtuªs
->
ønges
[0].
ba£
 + 
gpu_addr
;

345 
a°
->
fbdev
->
hñ≥r
.fbdev->
fix
.
smem_Àn
 =á°->
vøm_size
 - 
gpu_addr
;

346 
	}
}

	@/mnt/d/Src/DRM/sources/src504/ast_hdmitx.c

2 
	~<löux/dñay.h
>

4 
	~"a°_drv.h
"

5 
	~"a°_hdmôx.h
"

7 
	#I2C_BASE
 0x1e780000

	)

9 
	$SëI2CReg
(
drm_devi˚
 *
dev
, 
u8
 
jCh™√l
, u8 
Devi˚Addr
, u8 
jIndex
, u8 
jD©a
 )

11 
a°_¥iv©e
 *
a°
 = 
dev
->
dev_¥iv©e
;

12 
u32
 
ulD©a
, 
ulI2CBa£
, 
ulI2CAddr
;

13 
u8
 *
ulI2CP‹tBa£
;

14 
u8
 *
pjMMIOBa£
;

15 
u32
 
ªåy
;

18 
pjMMIOBa£
 = 
a°
->
i‹egs
;

19 
ulI2CBa£
 = 
I2C_BASE
;

20 
ulI2CP‹tBa£
 = 
pjMMIOBa£
 + 0x1a000 + 0x40 * 
jCh™√l
;

21 
ulI2CAddr
 = 
Devi˚Addr
;

24 *(
u32
 *Ë(
pjMMIOBa£
 + 0xF004Ë
ulI2CBa£
;

25 *(
u32
 *Ë(
pjMMIOBa£
 + 0xF000) = 0x1;

27 *(
u32
 *Ë(
ulI2CP‹tBa£
 + 0x00) = 0x0;

28 *(
u32
 *Ë(
ulI2CP‹tBa£
 + 0x04) = 0x77743356;

29 *(
u32
 *Ë(
ulI2CP‹tBa£
 + 0x08) = 0x0;

30 *(
u32
 *Ë(
ulI2CP‹tBa£
 + 0x10) = 0xffffffff;

31 *(
u32
 *Ë(
ulI2CP‹tBa£
 + 0x00) = 0x1;

32 *(
u32
 *Ë(
ulI2CP‹tBa£
 + 0x0C) = 0xAF;

33 *(
u32
 *Ë(
ulI2CP‹tBa£
 + 0x20Ë
ulI2CAddr
;

34 *(
u32
 *Ë(
ulI2CP‹tBa£
 + 0x14) = 0x03;

35 
ªåy
 = 0;

37 
ulD©a
 = *(
u32
 *Ë(
ulI2CP‹tBa£
 + 0x10);

38 
	`udñay
(10);

39 i‡(
ªåy
++ > 1000)

40 
Exô_SëI2CReg
;

41 } !(
ulD©a
 & 0x01));

42 *(
u32
 *Ë(
ulI2CP‹tBa£
 + 0x10) = 0xffffffff;

43 *(
u32
 *Ë(
ulI2CP‹tBa£
 + 0x20Ë(u32Ë
jIndex
;

44 *(
u32
 *Ë(
ulI2CP‹tBa£
 + 0x14) = 0x02;

46 
ulD©a
 = *(
u32
 *Ë(
ulI2CP‹tBa£
 + 0x10);

47 } !(
ulD©a
 & 0x01));

48 *(
u32
 *Ë(
ulI2CP‹tBa£
 + 0x10) = 0xffffffff;

49 *(
u32
 *Ë(
ulI2CP‹tBa£
 + 0x20Ë(u32Ë
jD©a
;

50 *(
u32
 *Ë(
ulI2CP‹tBa£
 + 0x14) = 0x02;

52 
ulD©a
 = *(
u32
 *Ë(
ulI2CP‹tBa£
 + 0x10);

53 } !(
ulD©a
 & 0x01));

54 *(
u32
 *Ë(
ulI2CP‹tBa£
 + 0x10) = 0xffffffff;

55 *(
u32
 *Ë(
ulI2CP‹tBa£
 + 0x0C) |= 0x10;

56 *(
u32
 *Ë(
ulI2CP‹tBa£
 + 0x14) = 0x20;

58 
ulD©a
 = *(
u32
 *Ë(
ulI2CP‹tBa£
 + 0x10);

59 } !(
ulD©a
 & 0x10));

60 *(
u32
 *Ë(
ulI2CP‹tBa£
 + 0x0C) &= 0xffffffef;

61 *(
u32
 *Ë(
ulI2CP‹tBa£
 + 0x10) = 0xffffffff;

62 
	`udñay
(10);

64 
Exô_SëI2CReg
:

66 
	}
}

68 
u8
 
	$GëI2CReg
(
drm_devi˚
 *
dev
, 
u8
 
jCh™√l
, u8 
Devi˚Addr
, u8 
jIndex
)

70 
a°_¥iv©e
 *
a°
 = 
dev
->
dev_¥iv©e
;

71 
u8
 
jD©a
;

72 
u32
 
ulD©a
, 
ulI2CBa£
, 
ulI2CAddr
;

73 
u8
 *
ulI2CP‹tBa£
;

74 
u8
 *
pjMMIOBa£
;

75 
u32
 
ªåy
;

78 
pjMMIOBa£
 = 
a°
->
i‹egs
;

79 
ulI2CBa£
 = 
I2C_BASE
;

80 
ulI2CP‹tBa£
 = 
pjMMIOBa£
 + 0x1a000 + 0x40 * 
jCh™√l
;

81 
ulI2CAddr
 = 
Devi˚Addr
;

84 *(
u32
 *Ë(
pjMMIOBa£
 + 0xF004Ë
ulI2CBa£
;

85 *(
u32
 *Ë(
pjMMIOBa£
 + 0xF000) = 0x1;

87 *(
u32
 *Ë(
ulI2CP‹tBa£
 + 0x00) = 0x0;

88 *(
u32
 *Ë(
ulI2CP‹tBa£
 + 0x04) = 0x77743356;

89 *(
u32
 *Ë(
ulI2CP‹tBa£
 + 0x08) = 0x0;

90 *(
u32
 *Ë(
ulI2CP‹tBa£
 + 0x10) = 0xffffffff;

91 *(
u32
 *Ë(
ulI2CP‹tBa£
 + 0x00) = 0x1;

92 *(
u32
 *Ë(
ulI2CP‹tBa£
 + 0x0C) = 0xAF;

93 *(
u32
 *Ë(
ulI2CP‹tBa£
 + 0x20Ë
ulI2CAddr
;

94 *(
u32
 *Ë(
ulI2CP‹tBa£
 + 0x14) = 0x03;

95 
ªåy
 = 0;

97 
ulD©a
 = *(
u32
 *Ë(
ulI2CP‹tBa£
 + 0x10);

98 
	`udñay
(10);

99 i‡(
ªåy
++ > 1000)

101 } !(
ulD©a
 & 0x01));

102 *(
u32
 *Ë(
ulI2CP‹tBa£
 + 0x10) = 0xffffffff;

103 *(
u32
 *Ë(
ulI2CP‹tBa£
 + 0x20Ë(u32Ë
jIndex
;

104 *(
u32
 *Ë(
ulI2CP‹tBa£
 + 0x14) = 0x02;

106 
ulD©a
 = *(
u32
 *Ë(
ulI2CP‹tBa£
 + 0x10);

107 } !(
ulD©a
 & 0x01));

108 *(
u32
 *Ë(
ulI2CP‹tBa£
 + 0x10) = 0xffffffff;

109 *(
u32
 *Ë(
ulI2CP‹tBa£
 + 0x20Ë
ulI2CAddr
 + 1;

110 *(
u32
 *Ë(
ulI2CP‹tBa£
 + 0x14) = 0x1B;

112 
ulD©a
 = *(
u32
 *Ë(
ulI2CP‹tBa£
 + 0x10);

113 } !(
ulD©a
 & 0x04));

114 *(
u32
 *Ë(
ulI2CP‹tBa£
 + 0x10) = 0xffffffff;

115 *(
u32
 *Ë(
ulI2CP‹tBa£
 + 0x0C) |= 0x10;

116 *(
u32
 *Ë(
ulI2CP‹tBa£
 + 0x14) = 0x20;

118 
ulD©a
 = *(
u32
 *Ë(
ulI2CP‹tBa£
 + 0x10);

119 } !(
ulD©a
 & 0x10));

120 *(
u32
 *Ë(
ulI2CP‹tBa£
 + 0x0C) &= 0xffffffef;

121 *(
u32
 *Ë(
ulI2CP‹tBa£
 + 0x10) = 0xffffffff;

122 
jD©a
 = (
u8
Ë((*(
u32
 *Ë(
ulI2CP‹tBa£
 + 0x20) & 0xFF00) >> 8);

124  (
jD©a
);

125 
	}
}

126 
boﬁ
 
	$I2C_Ród_ByãN
(
drm_devi˚
 *
dev
, 
u8
 
Addr
, u8 
RegAddr
, u8 *
pD©a
, 
N
)

128 
u8
 
i
, *
pI2CD©a
, 
jD©a
;

130 
pI2CD©a
 = 
pD©a
;

131 
i
 = 0; i < 
N
; i++)

133 
jD©a
 = 
	`GëI2CReg
(
dev
, (
u8
Ë
HDMI_I2C_CHANNEL
, 
Addr
, (
RegAddr
 + 
i
));

134 *(
u8
 *Ë(
pI2CD©a
++Ë
jD©a
;

137  
TRUE
 ;

138 
	}
}

140 
boﬁ
 
	$I2C_Wrôe_ByãN
(
drm_devi˚
 *
dev
, 
u8
 
Addr
,u8 
RegAddr
,u8 *
pD©a
,
N
)

142 
u8
 
i
;

144 
i
 = 0; i < 
N
; i++)

146 
	`SëI2CReg
(
dev
, (
u8
Ë
HDMI_I2C_CHANNEL
, 
Addr
, (
RegAddr
 + 
i
), *(u8 *)(
pD©a
 + i));

149  
TRUE
 ;

150 
	}
}

152 
u8
 
	$I2C_Ród_Byã
(
drm_devi˚
 *
dev
, 
u8
 
Addr
,u8 
RegAddr
)

154 
u8
 
d©a
 ;

156 
	`I2C_Ród_ByãN
(
dev
, 
Addr
,
RegAddr
,&
d©a
, 1) ;

158  
d©a
 ;

159 
	}
}

161 
boﬁ
 
	$I2C_Wrôe_Byã
(
drm_devi˚
 *
dev
, 
u8
 
Addr
,u8 
RegAddr
,u8 
D©a
)

163  
	`I2C_Wrôe_ByãN
(
dev
, 
Addr
,
RegAddr
,&
D©a
, 1) ;

164 
	}
}

166 
u8
 
	$HDMITX_RódI2C_Byã
(
drm_devi˚
 *
dev
, 
u8
 
RegAddr
)

168  
	`I2C_Ród_Byã
(
dev
, 
HDMI_TX_I2C_SLAVE_ADDR
,
RegAddr
) ;

169 
	}
}

171 
boﬁ
 
	$HDMITX_WrôeI2C_Byã
(
drm_devi˚
 *
dev
, 
u8
 
RegAddr
,u8 
D©a
)

173  
	`I2C_Wrôe_Byã
(
dev
, 
HDMI_TX_I2C_SLAVE_ADDR
,
RegAddr
,
D©a
) ;

174 
	}
}

176 
boﬁ
 
	$HDMITX_RódI2C_ByãN
(
drm_devi˚
 *
dev
, 
u8
 
RegAddr
,u8 *
pD©a
,
N
)

178  
	`I2C_Ród_ByãN
(
dev
, 
HDMI_TX_I2C_SLAVE_ADDR
,
RegAddr
,
pD©a
,
N
) ;

179 
	}
}

181 
boﬁ
 
	$HDMITX_SëI2C_Byã
(
drm_devi˚
 *
dev
, 
u8
 
Reg
,u8 
Mask
,u8 
VÆue
)

183 
u8
 
Temp
;

184 if–
Mask
 != 0xFF )

186 
Temp
=
	`HDMITX_RódI2C_Byã
(
dev
, 
Reg
);

187 
Temp
&=(~
Mask
);

188 
Temp
|=
VÆue
&
Mask
;

192 
Temp
=
VÆue
;

194  
	`HDMITX_WrôeI2C_Byã
(
dev
, 
Reg
,
Temp
);

195 
	}
}

197 
	$hdmôx_LﬂdRegSëtög
(
drm_devi˚
 *
dev
, 
RegSëE¡ry
 
èbÀ
[])

199 
u32
 
i
 ;

201  
i
 = 0 ; ; i++ )

203 if–
èbÀ
[
i
].
off£t
 =0 &&ÅabÀ[i].
övAndMask
 =0 &&ÅabÀ[i].
OrMask
 == 0 )

207 if–
èbÀ
[
i
].
övAndMask
 =0 &&ÅabÀ[i].
OrMask
 == 0 )

209 
	`udñay
(
èbÀ
[
i
].
off£t
);

211 if–
èbÀ
[
i
].
övAndMask
 == 0xFF )

213 
	`HDMITX_WrôeI2C_Byã
(
dev
, 
èbÀ
[
i
].
off£t
,èbÀ[i].
OrMask
);

217 
	`HDMITX_SëI2C_Byã
(
dev
, 
èbÀ
[
i
].
off£t
,èbÀ[i].
övAndMask
,èbÀ[i].
OrMask
);

220 
	}
}

225 
boﬁ
 
	$a°_hdmi_check
(
drm_devi˚
 *
dev
)

228 
u16
 
Víd‹ID
, 
Devi˚ID
;

229 
u8
 
pD©a
[4];

231 
	`Swôch_HDMITX_B™k
(
dev
, 0) ;

232 
	`HDMITX_RódI2C_ByãN
(
dev
, 0x00, 
pD©a
, 4);

233 
Víd‹ID
 = *(
u16
 *)(
pD©a
) & 0xFFFF;

234 
Devi˚ID
 = *(
u16
 *)(
pD©a
 + 2) & 0x0FFF;

235 i‡((
Víd‹ID
 !0x4954Ë|| (
Devi˚ID
 != 0x0612))

237  
FALSE
;

240  (
TRUE
);

242 
	}
}

244 #i‚de‡
INV_INPUT_PCLK


245 
	#PCLKINV
 0

	)

247 
	#PCLKINV
 
B_TX_VDO_LATCH_EDGE


	)

250 #i‚de‡
INV_INPUT_ACLK


251 
	#InvAudCLK
 0

	)

253 
	#InvAudCLK
 
B_TX_AUDFMT_FALL_EDGE_SAMPLE_WS


	)

256 
	#INIT_CLK_HIGH


	)

259 
RegSëE¡ry
 
	gHDMITX_Inô_TabÀ
[] = {

271 #ifde‡
INIT_CLK_LOW


279 #ifde‡
NON_SEQUENTIAL_YCBCR422


285 {0x8D, 0xFF, 
CEC_I2C_SLAVE_ADDR
},

295 {0x59, 0xD8, 0x40|
PCLKINV
},

296 {0xE1, 0x20, 
InvAudCLK
},

298 {
REG_TX_INT_MASK1
, 0xFF, (
u8
)(~(
B_TX_RXSEN_MASK
|
B_TX_HPD_MASK
))},

299 {
REG_TX_INT_MASK2
, 0xFF, (
u8
)(~(
B_TX_KSVLISTCHK_MASK
|
B_TX_AUTH_DONE_MASK
|
B_TX_AUTH_FAIL_MASK
))},

300 {
REG_TX_INT_MASK3
, 0xFF, (
u8
)(~(
B_TX_VIDSTABLE_MASK
))},

312 
RegSëE¡ry
 
	gHDMITX_DeÁu…Video_TabÀ
[] = {

319 #i‚de‡
DEFAULT_INPUT_YCBCR


374 
RegSëE¡ry
 
	gHDMITX_SëHDMI_TabÀ
[] = {

385 
RegSëE¡ry
 
	gHDMITX_SëDVI_TabÀ
[] = {

399 
RegSëE¡ry
 
	gHDMITX_DeÁu…AVIInfo_TabÀ
[] = {

423 
RegSëE¡ry
 
	gHDMITX_Dóu…AudioInfo_TabÀ
[] = {

441 
RegSëE¡ry
 
	gHDMITX_Aud_CHSètus_LPCM_20bô_48Khz
[] =

457 
RegSëE¡ry
 
	gHDMITX_AUD_SPDIF_2ch_24bô
[] =

471 
RegSëE¡ry
 
	gHDMITX_AUD_I2S_2ch_24bô
[] =

485 
RegSëE¡ry
 
	gHDMITX_DeÁu…Audio_TabÀ
[] = {

514 
RegSëE¡ry
 
	gHDMITX_PwrDown_TabÀ
[] = {

534 
RegSëE¡ry
 
	gHDMITX_PwrOn_TabÀ
[] = {

551 
	$a°_hdmi_öô
(
drm_devi˚
 *
dev
)

554 
	`hdmôx_LﬂdRegSëtög
(
dev
, 
HDMITX_Inô_TabÀ
);

555 
	`hdmôx_LﬂdRegSëtög
(
dev
, 
HDMITX_DeÁu…Video_TabÀ
);

556 
	`hdmôx_LﬂdRegSëtög
(
dev
, 
HDMITX_SëDVI_TabÀ
);

563 
	}
}

564 
RegSëE¡ry
 
	gHDMITX_DißbÀVideoOuçut_TabÀ
[] = {

566 {
REG_TX_SW_RST
, 0x00, 
B_HDMITX_VID_RST
},

567 {
REG_TX_AFE_DRV_CTRL
, 0xFF, (
B_TX_AFE_DRV_RST
 + 
B_TX_AFE_DRV_PWD
)},

573 
	$a°_hdmi_dißbÀ
(
drm_devi˚
 *
dev
)

575 
	`hdmôx_LﬂdRegSëtög
(
dev
, 
HDMITX_DißbÀVideoOuçut_TabÀ
);

576 
	}
}

578 
RegSëE¡ry
 
	gCÀ¨DDCFIFO_HDMITX_TabÀ
[] = {

580 {
REG_TX_DDC_MASTER_CTRL
, 0xff, (
B_TX_MASTERDDC
+
B_TX_MASTERHOST
)},

581 {
REG_TX_DDC_CMD
, 0xff, 
CMD_FIFO_CLR
},

586 
RegSëE¡ry
 
	gRódEDID_HDMITX_TabÀ
[] = {

588 {
REG_TX_DDC_MASTER_CTRL
, 0xff, (
B_TX_MASTERDDC
+
B_TX_MASTERHOST
)},

589 {
REG_TX_DDC_HEADER
, 0xff, 0xa0},

590 {
REG_TX_DDC_REQCOUNT
, 0xff, 0x20},

591 {
REG_TX_DDC_EDIDSEG
, 0xff, 0x00},

592 {
REG_TX_DDC_CMD
, 0xff, 
CMD_EDID_READ
},

596 
boﬁ
 
	$a°_hdmi_ªad_edid
(
drm_devi˚
 *
dev
, 
u8
 *
pEDIDD©a
)

598 
u8
 
i
, 
j
;

599 
u8
 *
pEDIDPå
 = 
pEDIDD©a
;

600 
u8
 vﬁ©ûê
jReg
;

601 
boﬁ
 
Sètus
 = 
FALSE
;

604 
i
=0; i<4; i++)

606 
	`hdmôx_LﬂdRegSëtög
(
dev
, 
CÀ¨DDCFIFO_HDMITX_TabÀ
);

608 
jReg
 = 
	`HDMITX_RódI2C_Byã
(
dev
, 
REG_TX_DDC_STATUS
);

609 i‡(
jReg
 & 
B_TX_DDC_ERROR
)

610  
FALSE
;

611 } !(
jReg
 & 
B_TX_DDC_DONE
));

613 
	`HDMITX_WrôeI2C_Byã
(
dev
, 
REG_TX_DDC_REQOFF
, 
i
*0x20);

614 
	`hdmôx_LﬂdRegSëtög
(
dev
, 
RódEDID_HDMITX_TabÀ
);

616 
jReg
 = 
	`HDMITX_RódI2C_Byã
(
dev
, 
REG_TX_DDC_STATUS
);

617 i‡(
jReg
 & 
B_TX_DDC_ERROR
)

618  
FALSE
;

619 } !(
jReg
 & 
B_TX_DDC_DONE
));

621 
j
=0; j<
DDC_FIFO_MAXREQ
; j++)

623 
jReg
 = 
	`HDMITX_RódI2C_Byã
(
dev
, 
REG_TX_DDC_READFIFO
);

624 *(
u8
 *)(
pEDIDPå
++Ë
jReg
;

628 
Sètus
 = 
TRUE
;

631  
Sètus
;

633 
	}
}

635 
RegSëE¡ry
 
	gHDMITX_SëOuçut_TabÀ
 [] = {

638 {
REG_TX_SW_RST
, (
B_HDMITX_AUD_RST
 + 
B_TX_AREF_RST
), (B_HDMITX_AUD_RST + B_TX_AREF_RST)},

643 {
REG_TX_SW_RST
, 0xff, (
B_HDMITX_VID_RST
+
B_HDMITX_AUD_RST
+
B_TX_AREF_RST
+
B_TX_HDCP_RST_HDMITX
)},

645 {
REG_TX_AVIINFO_DB1
, 0xff, 0x00},

648 {
REG_TX_INPUT_MODE
, (
M_TX_INCOLMOD
+
B_TX_2X656CLK
+
B_TX_SYNCEMB
+
B_TX_INDDR
+
B_TX_PCLKDIV2
), (
B_TX_IN_RGB
 + 0x01)},

651 {
REG_TX_CSC_CTRL
, (
M_TX_CSC_SEL
+
B_TX_DNFREE_GO
+
B_TX_EN_DITHER
+
B_TX_EN_UDFILTER
), 
B_HDMITX_CSC_BYPASS
},

653 {
REG_TX_HDMI_MODE
, 0xff, 
B_TX_DVI_MODE
},

655 {
REG_TX_AFE_DRV_CTRL
, 0xff, 
B_TX_AFE_DRV_RST
},

662 {
REG_TX_SW_RST
, (
B_TX_REF_RST_HDMITX
+
B_HDMITX_VID_RST
), 0x00},

663 {
REG_TX_AFE_DRV_CTRL
, 0xff, 0x00},

665 {
REG_TX_SW_RST
, 0xff, (
B_HDMITX_AUD_RST
+
B_TX_AREF_RST
+
B_TX_HDCP_RST_HDMITX
)},

667 {
REG_TX_AFE_DRV_CTRL
, 0xff, 0x00},

668 {
REG_TX_AVI_INFOFRM_CTRL
, 0xff, 0x00},

669 {
REG_TX_3D_INFO_CTRL
, 0xff, 0x00},

670 {
REG_TX_GCP
, 
B_TX_SETAVMUTE
, 0x00},

671 {
REG_TX_PKT_GENERAL_CTRL
, 0xff, (
B_TX_ENABLE_PKT
+
B_TX_REPEAT_PKT
)},

675 
	$a°_hdmi_£t_ouçut
(
drm_devi˚
 *
dev
)

678 
	`hdmôx_LﬂdRegSëtög
(
dev
, 
HDMITX_SëOuçut_TabÀ
);

679 
	}
}

	@/mnt/d/Src/DRM/sources/src504/ast_hdmitx.h

5 
	#DDC_HDCP_ADDRESS
 0x74

	)

6 
	#DDC_EDID_ADDRESS
 0xA0

	)

7 
	#DDC_FIFO_MAXREQ
 0x20

	)

11 
	#_80MHz
 80000000

	)

12 
	#HDMI_I2C_CHANNEL
 1

	)

13 
	#HDMI_TX_I2C_SLAVE_ADDR
 0x98

	)

14 
	#CEC_I2C_SLAVE_ADDR
 0x9C

	)

19 
	#REG_TX_VENDOR_ID0
 0x00

	)

20 
	#REG_TX_VENDOR_ID1
 0x01

	)

21 
	#REG_TX_DEVICE_ID0
 0x02

	)

22 
	#REG_TX_DEVICE_ID1
 0x03

	)

24 
	#O_TX_DEVID
 0

	)

25 
	#M_TX_DEVID
 0xF

	)

26 
	#O_TX_REVID
 4

	)

27 
	#M_TX_REVID
 0xF

	)

29 
	#REG_TX_SW_RST
 0x04

	)

30 
	#B_TX_ENTEST
 (1<<7)

	)

31 
	#B_TX_REF_RST_HDMITX
 (1<<5)

	)

32 
	#B_TX_AREF_RST
 (1<<4)

	)

33 
	#B_HDMITX_VID_RST
 (1<<3)

	)

34 
	#B_HDMITX_AUD_RST
 (1<<2)

	)

35 
	#B_TX_HDMI_RST
 (1<<1)

	)

36 
	#B_TX_HDCP_RST_HDMITX
 (1<<0)

	)

38 
	#REG_TX_INT_CTRL
 0x05

	)

39 
	#B_TX_INTPOL_ACTL
 0

	)

40 
	#B_TX_INTPOL_ACTH
 (1<<7)

	)

41 
	#B_TX_INT_PUSHPULL
 0

	)

42 
	#B_TX_INT_OPENDRAIN
 (1<<6)

	)

44 
	#REG_TX_INT_STAT1
 0x06

	)

45 
	#B_TX_INT_AUD_OVERFLOW
 (1<<7)

	)

46 
	#B_TX_INT_ROMACQ_NOACK
 (1<<6)

	)

47 
	#B_TX_INT_RDDC_NOACK
 (1<<5)

	)

48 
	#B_TX_INT_DDCFIFO_ERR
 (1<<4)

	)

49 
	#B_TX_INT_ROMACQ_BUS_HANG
 (1<<3)

	)

50 
	#B_TX_INT_DDC_BUS_HANG
 (1<<2)

	)

51 
	#B_TX_INT_RX_SENSE
 (1<<1)

	)

52 
	#B_TX_INT_HPD_PLUG
 (1<<0)

	)

54 
	#REG_TX_INT_STAT2
 0x07

	)

55 
	#B_TX_INT_HDCP_SYNC_DET_FAIL
 (1<<7)

	)

56 
	#B_TX_INT_VID_UNSTABLE
 (1<<6)

	)

57 
	#B_TX_INT_PKTACP
 (1<<5)

	)

58 
	#B_TX_INT_PKTNULL
 (1<<4)

	)

59 
	#B_TX_INT_PKTGENERAL
 (1<<3)

	)

60 
	#B_TX_INT_KSVLIST_CHK
 (1<<2)

	)

61 
	#B_TX_INT_AUTH_DONE
 (1<<1)

	)

62 
	#B_TX_INT_AUTH_FAIL
 (1<<0)

	)

64 
	#REG_TX_INT_STAT3
 0x08

	)

65 
	#B_TX_INT_AUD_CTS
 (1<<6)

	)

66 
	#B_TX_INT_VSYNC
 (1<<5)

	)

67 
	#B_TX_INT_VIDSTABLE
 (1<<4)

	)

68 
	#B_TX_INT_PKTMPG
 (1<<3)

	)

69 
	#B_TX_INT_PKTSPD
 (1<<2)

	)

70 
	#B_TX_INT_PKTAUD
 (1<<1)

	)

71 
	#B_TX_INT_PKTAVI
 (1<<0)

	)

73 
	#REG_TX_INT_MASK1
 0x09

	)

74 
	#B_TX_AUDIO_OVFLW_MASK
 (1<<7)

	)

75 
	#B_TX_DDC_NOACK_MASK
 (1<<5)

	)

76 
	#B_TX_DDC_FIFO_ERR_MASK
 (1<<4)

	)

77 
	#B_TX_DDC_BUS_HANG_MASK
 (1<<2)

	)

78 
	#B_TX_RXSEN_MASK
 (1<<1)

	)

79 
	#B_TX_HPD_MASK
 (1<<0)

	)

81 
	#REG_TX_INT_MASK2
 0x0A

	)

82 
	#B_TX_PKT_AVI_MASK
 (1<<7)

	)

83 
	#B_TX_PKT_VID_UNSTABLE_MASK
 (1<<6)

	)

84 
	#B_TX_PKT_ACP_MASK
 (1<<5)

	)

85 
	#B_TX_PKT_NULL_MASK
 (1<<4)

	)

86 
	#B_TX_PKT_GEN_MASK
 (1<<3)

	)

87 
	#B_TX_KSVLISTCHK_MASK
 (1<<2)

	)

88 
	#B_TX_AUTH_DONE_MASK
 (1<<1)

	)

89 
	#B_TX_AUTH_FAIL_MASK
 (1<<0)

	)

91 
	#REG_TX_INT_MASK3
 0x0B

	)

92 
	#B_TX_HDCP_SYNC_DET_FAIL_MASK
 (1<<6)

	)

93 
	#B_TX_AUDCTS_MASK
 (1<<5)

	)

94 
	#B_TX_VSYNC_MASK
 (1<<4)

	)

95 
	#B_TX_VIDSTABLE_MASK
 (1<<3)

	)

96 
	#B_TX_PKT_MPG_MASK
 (1<<2)

	)

97 
	#B_TX_PKT_SPD_MASK
 (1<<1)

	)

98 
	#B_TX_PKT_AUD_MASK
 (1<<0)

	)

100 
	#REG_TX_INT_CLR0
 0x0C

	)

101 
	#B_TX_CLR_PKTACP
 (1<<7)

	)

102 
	#B_TX_CLR_PKTNULL
 (1<<6)

	)

103 
	#B_TX_CLR_PKTGENERAL
 (1<<5)

	)

104 
	#B_TX_CLR_KSVLISTCHK
 (1<<4)

	)

105 
	#B_TX_CLR_AUTH_DONE
 (1<<3)

	)

106 
	#B_TX_CLR_AUTH_FAIL
 (1<<2)

	)

107 
	#B_TX_CLR_RXSENSE
 (1<<1)

	)

108 
	#B_TX_CLR_HPD
 (1<<0)

	)

110 
	#REG_TX_INT_CLR1
 0x0D

	)

111 
	#B_TX_CLR_VSYNC
 (1<<7)

	)

112 
	#B_TX_CLR_VIDSTABLE
 (1<<6)

	)

113 
	#B_TX_CLR_PKTMPG
 (1<<5)

	)

114 
	#B_TX_CLR_PKTSPD
 (1<<4)

	)

115 
	#B_TX_CLR_PKTAUD
 (1<<3)

	)

116 
	#B_TX_CLR_PKTAVI
 (1<<2)

	)

117 
	#B_TX_CLR_HDCP_SYNC_DET_FAIL
 (1<<1)

	)

118 
	#B_TX_CLR_VID_UNSTABLE
 (1<<0)

	)

120 
	#REG_TX_SYS_STATUS
 0x0E

	)

122 
	#B_TX_INT_ACTIVE
 (1<<7)

	)

123 
	#B_TX_HPDETECT
 (1<<6)

	)

124 
	#B_TX_RXSENDETECT
 (1<<5)

	)

125 
	#B_TXVIDSTABLE
 (1<<4)

	)

127 
	#O_TX_CTSINTSTEP
 2

	)

128 
	#M_TX_CTSINTSTEP
 (3<<2)

	)

129 
	#B_TX_CLR_AUD_CTS
 (1<<1)

	)

130 
	#B_TX_INTACTDONE
 (1<<0)

	)

132 
	#REG_TX_BANK_CTRL
 0x0F

	)

133 
	#B_TX_BANK0
 0

	)

134 
	#B_TX_BANK1
 1

	)

138 
	#REG_TX_DDC_MASTER_CTRL
 0x10

	)

139 
	#B_TX_MASTERROM
 (1<<1)

	)

140 
	#B_TX_MASTERDDC
 (0<<1)

	)

141 
	#B_TX_MASTERHOST
 (1<<0)

	)

142 
	#B_TX_MASTERHDCP
 (0<<0)

	)

144 
	#REG_TX_DDC_HEADER
 0x11

	)

145 
	#REG_TX_DDC_REQOFF
 0x12

	)

146 
	#REG_TX_DDC_REQCOUNT
 0x13

	)

147 
	#REG_TX_DDC_EDIDSEG
 0x14

	)

148 
	#REG_TX_DDC_CMD
 0x15

	)

149 
	#CMD_DDC_SEQ_BURSTREAD
 0

	)

150 
	#CMD_LINK_CHKREAD
 2

	)

151 
	#CMD_EDID_READ
 3

	)

152 
	#CMD_FIFO_CLR
 9

	)

153 
	#CMD_GEN_SCLCLK
 0xA

	)

154 
	#CMD_DDC_ABORT
 0xF

	)

156 
	#REG_TX_DDC_STATUS
 0x16

	)

157 
	#B_TX_DDC_DONE
 (1<<7)

	)

158 
	#B_TX_DDC_ACT
 (1<<6)

	)

159 
	#B_TX_DDC_NOACK
 (1<<5)

	)

160 
	#B_TX_DDC_WAITBUS
 (1<<4)

	)

161 
	#B_TX_DDC_ARBILOSE
 (1<<3)

	)

162 
	#B_TX_DDC_ERROR
 (
B_TX_DDC_NOACK
|
B_TX_DDC_WAITBUS
|
B_TX_DDC_ARBILOSE
)

	)

163 
	#B_TX_DDC_FIFOFULL
 (1<<2)

	)

164 
	#B_TX_DDC_FIFOEMPTY
 (1<<1)

	)

166 
	#REG_TX_DDC_READFIFO
 0x17

	)

167 
	#REG_TX_ROM_STARTADDR
 0x18

	)

168 
	#REG_TX_HDCP_HEADER
 0x19

	)

169 
	#REG_TX_ROM_HEADER
 0x1A

	)

170 
	#REG_TX_BUSHOLD_T
 0x1B

	)

171 
	#REG_TX_ROM_STAT
 0x1C

	)

172 
	#B_TX_ROM_DONE
 (1<<7)

	)

173 
	#B_TX_ROM_ACTIVE
 (1<<6)

	)

174 
	#B_TX_ROM_NOACK
 (1<<5)

	)

175 
	#B_TX_ROM_WAITBUS
 (1<<4)

	)

176 
	#B_TX_ROM_ARBILOSE
 (1<<3)

	)

177 
	#B_TX_ROM_BUSHANG
 (1<<2)

	)

180 
	#REG_TX_AN_GENERATE
 0x1F

	)

181 
	#B_TX_START_CIPHER_GEN
 1

	)

182 
	#B_TX_STOP_CIPHER_GEN
 0

	)

184 
	#REG_TX_CLK_CTRL0
 0x58

	)

185 
	#O_TX_OSCLK_SEL
 5

	)

186 
	#M_TX_OSCLK_SEL
 3

	)

187 
	#B_TX_AUTO_OVER_SAMPLING_CLOCK
 (1<<4)

	)

188 
	#O_TX_EXT_MCLK_SEL
 2

	)

189 
	#M_TX_EXT_MCLK_SEL
 (3<<
O_TX_EXT_MCLK_SEL
)

	)

190 
	#B_TX_EXT_128FS
 (0<<
O_TX_EXT_MCLK_SEL
)

	)

191 
	#B_TX_EXT_256FS
 (1<<
O_TX_EXT_MCLK_SEL
)

	)

192 
	#B_TX_EXT_512FS
 (2<<
O_TX_EXT_MCLK_SEL
)

	)

193 
	#B_TX_EXT_1024FS
 (3<<
O_TX_EXT_MCLK_SEL
)

	)

195 
	#REG_TX_SHA_SEL
 0x50

	)

196 
	#REG_TX_SHA_RD_BYTE1
 0x51

	)

197 
	#REG_TX_SHA_RD_BYTE2
 0x52

	)

198 
	#REG_TX_SHA_RD_BYTE3
 0x53

	)

199 
	#REG_TX_SHA_RD_BYTE4
 0x54

	)

200 
	#REG_TX_AKSV_RD_BYTE5
 0x55

	)

203 
	#REG_TX_CLK_CTRL1
 0x59

	)

204 
	#B_TX_EN_TXCLK_COUNT
 (1<<5)

	)

205 
	#B_TX_VDO_LATCH_EDGE
 (1<<3)

	)

207 
	#REG_TX_CLK_STATUS1
 0x5E

	)

208 
	#REG_TX_CLK_STATUS2
 0x5F

	)

209 
	#B_TX_IP_LOCK
 (1<<7)

	)

210 
	#B_TX_XP_LOCK
 (1<<6)

	)

211 
	#B_TX_OSF_LOCK
 (1<<5)

	)

213 
	#REG_TX_AUD_COUNT
 0x60

	)

214 
	#REG_TX_AFE_DRV_CTRL
 0x61

	)

216 
	#B_TX_AFE_DRV_PWD
 (1<<5)

	)

217 
	#B_TX_AFE_DRV_RST
 (1<<4)

	)

220 
	#REG_TX_INPUT_MODE
 0x70

	)

221 
	#O_TX_INCLKDLY
 0

	)

222 
	#M_TX_INCLKDLY
 3

	)

223 
	#B_TX_INDDR
 (1<<2)

	)

224 
	#B_TX_SYNCEMB
 (1<<3)

	)

225 
	#B_TX_2X656CLK
 (1<<4)

	)

226 
	#B_TX_PCLKDIV2
 (1<<5)

	)

227 
	#M_TX_INCOLMOD
 (3<<6)

	)

228 
	#B_TX_IN_RGB
 0

	)

229 
	#B_TX_IN_YUV422
 (1<<6)

	)

230 
	#B_TX_IN_YUV444
 (2<<6)

	)

232 
	#REG_TX_TXFIFO_RST
 0x71

	)

233 
	#B_TX_ENAVMUTERST
 1

	)

234 
	#B_TXFFRST
 (1<<1)

	)

236 
	#REG_TX_CSC_CTRL
 0x72

	)

237 
	#B_HDMITX_CSC_BYPASS
 0

	)

238 
	#B_HDMITX_CSC_RGB2YUV
 2

	)

239 
	#B_HDMITX_CSC_YUV2RGB
 3

	)

240 
	#M_TX_CSC_SEL
 3

	)

241 
	#B_TX_EN_DITHER
 (1<<7)

	)

242 
	#B_TX_EN_UDFILTER
 (1<<6)

	)

243 
	#B_TX_DNFREE_GO
 (1<<5)

	)

245 
	#SIZEOF_CSCMTX
 21

	)

246 
	#SIZEOF_CSCGAIN
 6

	)

247 
	#SIZEOF_CSCOFFSET
 3

	)

250 
	#REG_TX_CSC_YOFF
 0x73

	)

251 
	#REG_TX_CSC_COFF
 0x74

	)

252 
	#REG_TX_CSC_RGBOFF
 0x75

	)

254 
	#REG_TX_CSC_MTX11_L
 0x76

	)

255 
	#REG_TX_CSC_MTX11_H
 0x77

	)

256 
	#REG_TX_CSC_MTX12_L
 0x78

	)

257 
	#REG_TX_CSC_MTX12_H
 0x79

	)

258 
	#REG_TX_CSC_MTX13_L
 0x7A

	)

259 
	#REG_TX_CSC_MTX13_H
 0x7B

	)

260 
	#REG_TX_CSC_MTX21_L
 0x7C

	)

261 
	#REG_TX_CSC_MTX21_H
 0x7D

	)

262 
	#REG_TX_CSC_MTX22_L
 0x7E

	)

263 
	#REG_TX_CSC_MTX22_H
 0x7F

	)

264 
	#REG_TX_CSC_MTX23_L
 0x80

	)

265 
	#REG_TX_CSC_MTX23_H
 0x81

	)

266 
	#REG_TX_CSC_MTX31_L
 0x82

	)

267 
	#REG_TX_CSC_MTX31_H
 0x83

	)

268 
	#REG_TX_CSC_MTX32_L
 0x84

	)

269 
	#REG_TX_CSC_MTX32_H
 0x85

	)

270 
	#REG_TX_CSC_MTX33_L
 0x86

	)

271 
	#REG_TX_CSC_MTX33_H
 0x87

	)

273 
	#REG_TX_CSC_GAIN1V_L
 0x88

	)

274 
	#REG_TX_CSC_GAIN1V_H
 0x89

	)

275 
	#REG_TX_CSC_GAIN2V_L
 0x8A

	)

276 
	#REG_TX_CSC_GAIN2V_H
 0x8B

	)

277 
	#REG_TX_CSC_GAIN3V_L
 0x8C

	)

278 
	#REG_TX_CSC_GAIN3V_H
 0x8D

	)

280 
	#REG_TX_HVPﬁ
 0x90

	)

281 
	#REG_TX_HfPixñ
 0x91

	)

282 
	#REG_TX_HSSL
 0x95

	)

283 
	#REG_TX_HSEL
 0x96

	)

284 
	#REG_TX_HSH
 0x97

	)

285 
	#REG_TX_VSS1
 0xA0

	)

286 
	#REG_TX_VSE1
 0xA1

	)

287 
	#REG_TX_VSS2
 0xA2

	)

288 
	#REG_TX_VSE2
 0xA3

	)

292 
	#REG_TX_HDMI_MODE
 0xC0

	)

293 
	#B_TX_HDMI_MODE
 1

	)

294 
	#B_TX_DVI_MODE
 0

	)

295 
	#REG_TX_AV_MUTE
 0xC1

	)

296 
	#REG_TX_GCP
 0xC1

	)

297 
	#B_TX_CLR_AVMUTE
 0

	)

298 
	#B_TX_SET_AVMUTE
 1

	)

299 
	#B_TX_SETAVMUTE
 (1<<0)

	)

300 
	#B_TX_BLUE_SCR_MUTE
 (1<<1)

	)

301 
	#B_TX_NODEF_PHASE
 (1<<2)

	)

302 
	#B_TX_PHASE_RESYNC
 (1<<3)

	)

304 
	#O_TX_COLOR_DEPTH
 4

	)

305 
	#M_TX_COLOR_DEPTH
 7

	)

306 
	#B_TX_COLOR_DEPTH_MASK
 (
M_TX_COLOR_DEPTH
<<
O_TX_COLOR_DEPTH
)

	)

307 
	#B_TX_CD_NODEF
 0

	)

308 
	#B_TX_CD_24
 (4<<4)

	)

309 
	#B_TX_CD_30
 (5<<4)

	)

310 
	#B_TX_CD_36
 (6<<4)

	)

311 
	#B_TX_CD_48
 (7<<4)

	)

312 
	#REG_TX_PKT_GENERAL_CTRL
 0xC6

	)

314 
	#REG_TX_OESS_CYCLE
 0xC3

	)

320 
	#Swôch_HDMITX_B™k
(
pS¸n
, 
x
Ë
	`HDMITX_SëI2C_Byã
’S¸n, 0x0f,1, (x)&1)

	)

321 
	#HDMITX_OrReg_Byã
(
pS¸n
, 
ªg
,
‹mask
Ë
	`HDMITX_SëI2C_Byã
’S¸n,Ñeg,(‹mask),(‹mask))

	)

322 
	#HDMITX_AndReg_Byã
(
pS¸n
, 
ªg
,
™dmask
Ë
	`HDMITX_WrôeI2C_Byã
’S¸n,Ñeg,(
	`HDMITX_RódI2C_Byã
’S¸n,ÑegË& (™dmask)))

	)

327 
	s_HDMITXDEV_STRUCT
 {

329 
u8
 
	mI2C_DEV
 ;

330 
u8
 
	mI2C_ADDR
 ;

335 
u8
 
	mbI¡Ty≥
 ;

339 
u8
 
	mbI≈utVideoSig«lTy≥
 ;

343 
u8
 
	mbOuçutAudioMode
 ;

344 
u8
 
	mbAudioCh™√lSw≠
 ;

345 
u8
 
	mbAudioCh™√lE«bÀ
 ;

346 
u8
 
	mbAudFs
 ;

347 
	mTMDSClock
 ;

348 
	mRCLK
 ;

349 
u8
 
	mbAuthítiˇãd
:1 ;

350 
u8
 
	mbHDMIMode
: 1;

351 
u8
 
	mbI¡POL
:1 ;

352 
u8
 
	mbHPD
:1 ;

353 
u8
 
	mbSPDIF_OUT
;

354 
u8
 
	mTxEMEMSètus
:1 ;

355 } 
	tHDMITXDEV
 ;

357 
	e_mode_id
 {

358 
	mUNKNOWN_MODE
=0,

359 
	mCEA_640x480p60
,

360 
	mCEA_720x480p60
,

361 
	mCEA_1280x720p60
,

362 
	mCEA_1920x1080i60
,

363 
	mCEA_720x480i60
,

364 
	mCEA_720x240p60
,

365 
	mCEA_1440x480i60
,

366 
	mCEA_1440x240p60
,

367 
	mCEA_2880x480i60
,

368 
	mCEA_2880x240p60
,

369 
	mCEA_1440x480p60
,

370 
	mCEA_1920x1080p60
,

371 
	mCEA_720x576p50
,

372 
	mCEA_1280x720p50
,

373 
	mCEA_1920x1080i50
,

374 
	mCEA_720x576i50
,

375 
	mCEA_1440x576i50
,

376 
	mCEA_720x288p50
,

377 
	mCEA_1440x288p50
,

378 
	mCEA_2880x576i50
,

379 
	mCEA_2880x288p50
,

380 
	mCEA_1440x576p50
,

381 
	mCEA_1920x1080p50
,

382 
	mCEA_1920x1080p24
,

383 
	mCEA_1920x1080p25
,

384 
	mCEA_1920x1080p30
,

385 
	mVESA_640x350p85
,

386 
	mVESA_640x400p85
,

387 
	mVESA_720x400p85
,

388 
	mVESA_640x480p60
,

389 
	mVESA_640x480p72
,

390 
	mVESA_640x480p75
,

391 
	mVESA_640x480p85
,

392 
	mVESA_800x600p56
,

393 
	mVESA_800x600p60
,

394 
	mVESA_800x600p72
,

395 
	mVESA_800x600p75
,

396 
	mVESA_800X600p85
,

397 
	mVESA_840X480p60
,

398 
	mVESA_1024x768p60
,

399 
	mVESA_1024x768p70
,

400 
	mVESA_1024x768p75
,

401 
	mVESA_1024x768p85
,

402 
	mVESA_1152x864p75
,

403 
	mVESA_1280x768p60R
,

404 
	mVESA_1280x768p60
,

405 
	mVESA_1280x768p75
,

406 
	mVESA_1280x768p85
,

407 
	mVESA_1280x960p60
,

408 
	mVESA_1280x960p85
,

409 
	mVESA_1280x1024p60
,

410 
	mVESA_1280x1024p75
,

411 
	mVESA_1280X1024p85
,

412 
	mVESA_1360X768p60
,

413 
	mVESA_1400x768p60R
,

414 
	mVESA_1400x768p60
,

415 
	mVESA_1400x1050p75
,

416 
	mVESA_1400x1050p85
,

417 
	mVESA_1440x900p60R
,

418 
	mVESA_1440x900p60
,

419 
	mVESA_1440x900p75
,

420 
	mVESA_1440x900p85
,

421 
	mVESA_1600x1200p60
,

422 
	mVESA_1600x1200p65
,

423 
	mVESA_1600x1200p70
,

424 
	mVESA_1600x1200p75
,

425 
	mVESA_1600x1200p85
,

426 
	mVESA_1680x1050p60R
,

427 
	mVESA_1680x1050p60
,

428 
	mVESA_1680x1050p75
,

429 
	mVESA_1680x1050p85
,

430 
	mVESA_1792x1344p60
,

431 
	mVESA_1792x1344p75
,

432 
	mVESA_1856x1392p60
,

433 
	mVESA_1856x1392p75
,

434 
	mVESA_1920x1200p60R
,

435 
	mVESA_1920x1200p60
,

436 
	mVESA_1920x1200p75
,

437 
	mVESA_1920x1200p85
,

438 
	mVESA_1920x1440p60
,

439 
	mVESA_1920x1440p75
,

440 } 
	tMODE_ID
 ;

442 
	s°ru˘RegSëE¡ry
 {

443 
u8
 
	moff£t
 ;

444 
u8
 
	mövAndMask
 ;

445 
u8
 
	mOrMask
 ;

446 } 
	tRegSëE¡ry
;

449 
	#REG_TX_AUDIO_CTRL0
 0xE0

	)

450 
	#M_TX_AUD_SWL
 (3<<6)

	)

451 
	#M_TX_AUD_16BIT
 (0<<6)

	)

452 
	#M_TX_AUD_18BIT
 (1<<6)

	)

453 
	#M_TX_AUD_20BIT
 (2<<6)

	)

454 
	#M_TX_AUD_24BIT
 (3<<6)

	)

456 
	#B_TX_SPDIFTC
 (1<<5)

	)

458 
	#B_TX_AUD_SPDIF
 (1<<4)

	)

459 
	#B_TX_AUD_I2S
 (0<<4)

	)

460 
	#B_TX_AUD_EN_I2S3
 (1<<3)

	)

461 
	#B_TX_AUD_EN_I2S2
 (1<<2)

	)

462 
	#B_TX_AUD_EN_I2S1
 (1<<1)

	)

463 
	#B_TX_AUD_EN_I2S0
 (1<<0)

	)

464 
	#B_TX_AUD_EN_SPDIF
 1

	)

466 
	#REG_TX_AUDIO_CTRL1
 0xE1

	)

467 
	#B_TX_AUD_FULLPKT
 (1<<6)

	)

469 
	#B_TX_AUDFMT_STD_I2S
 (0<<0)

	)

470 
	#B_TX_AUDFMT_32BIT_I2S
 (1<<0)

	)

471 
	#B_TX_AUDFMT_LEFT_JUSTIFY
 (0<<1)

	)

472 
	#B_TX_AUDFMT_RIGHT_JUSTIFY
 (1<<1)

	)

473 
	#B_TX_AUDFMT_DELAY_1T_TO_WS
 (0<<2)

	)

474 
	#B_TX_AUDFMT_NO_DELAY_TO_WS
 (1<<2)

	)

475 
	#B_TX_AUDFMT_WS0_LEFT
 (0<<3)

	)

476 
	#B_TX_AUDFMT_WS0_RIGHT
 (1<<3)

	)

477 
	#B_TX_AUDFMT_MSB_SHIFT_FIRST
 (0<<4)

	)

478 
	#B_TX_AUDFMT_LSB_SHIFT_FIRST
 (1<<4)

	)

479 
	#B_TX_AUDFMT_RISE_EDGE_SAMPLE_WS
 (0<<5)

	)

480 
	#B_TX_AUDFMT_FALL_EDGE_SAMPLE_WS
 (1<<5)

	)

482 
	#REG_TX_AUDIO_FIFOMAP
 0xE2

	)

483 
	#O_TX_FIFO3SEL
 6

	)

484 
	#O_TX_FIFO2SEL
 4

	)

485 
	#O_TX_FIFO1SEL
 2

	)

486 
	#O_TX_FIFO0SEL
 0

	)

487 
	#B_TX_SELSRC3
 3

	)

488 
	#B_TX_SELSRC2
 2

	)

489 
	#B_TX_SELSRC1
 1

	)

490 
	#B_TX_SELSRC0
 0

	)

492 
	#REG_TX_AUDIO_CTRL3
 0xE3

	)

493 
	#B_TX_AUD_MULCH
 (1<<7)

	)

494 
	#B_TX_EN_ZERO_CTS
 (1<<6)

	)

495 
	#B_TX_CHSTSEL
 (1<<4)

	)

496 
	#B_TX_S3RLCHG
 (1<<3)

	)

497 
	#B_TX_S2RLCHG
 (1<<2)

	)

498 
	#B_TX_S1RLCHG
 (1<<1)

	)

499 
	#B_TX_S0RLCHG
 (1<<0)

	)

501 
	#REG_TX_AUD_SRCVALID_FLAT
 0xE4

	)

502 
	#B_TX_AUD_SPXFLAT_SRC3
 (1<<7)

	)

503 
	#B_TX_AUD_SPXFLAT_SRC2
 (1<<6)

	)

504 
	#B_TX_AUD_SPXFLAT_SRC1
 (1<<5)

	)

505 
	#B_TX_AUD_SPXFLAT_SRC0
 (1<<4)

	)

506 
	#B_TX_AUD_ERR2FLAT
 (1<<3)

	)

507 
	#B_TX_AUD_S3VALID
 (1<<2)

	)

508 
	#B_TX_AUD_S2VALID
 (1<<1)

	)

509 
	#B_TX_AUD_S1VALID
 (1<<0)

	)

511 
	#REG_TX_AUD_HDAUDIO
 0xE5

	)

512 
	#B_TX_HBR
 (1<<3)

	)

513 
	#B_TX_DSD
 (1<<1)

	)

519 
	#REGPktAudCTS0
 0x30

	)

520 
	#REGPktAudCTS1
 0x31

	)

521 
	#REGPktAudCTS2
 0x32

	)

522 
	#REGPktAudN0
 0x33

	)

523 
	#REGPktAudN1
 0x34

	)

524 
	#REGPktAudN2
 0x35

	)

525 
	#REGPktAudCTSC¡0
 0x35

	)

526 
	#REGPktAudCTSC¡1
 0x36

	)

527 
	#REGPktAudCTSC¡2
 0x37

	)

530 
	#REG_TX_AUDCHST_MODE
 0x91

	)

534 
	#REG_TX_AUDCHST_CAT
 0x92

	)

535 
	#REG_TX_AUDCHST_SRCNUM
 0x93

	)

536 
	#REG_TX_AUD0CHST_CHTNUM
 0x94

	)

538 
	#REG_TX_AUD1CHST_CHTNUM
 0x95

	)

540 
	#REG_TX_AUD2CHST_CHTNUM
 0x96

	)

542 
	#REG_TX_AUD3CHST_CHTNUM
 0x97

	)

544 
	#REG_TX_AUDCHST_CA_FS
 0x98

	)

546 
	#REG_TX_AUDCHST_OFS_WL
 0x99

	)

549 
	#REG_TX_PKT_SINGLE_CTRL
 0xC5

	)

550 
	#B_TX_SINGLE_PKT
 1

	)

551 
	#B_TX_BURST_PKT


	)

552 
	#B_TX_SW_CTS
 (1<<1)

	)

554 
	#REG_TX_NULL_CTRL
 0xC9

	)

555 
	#REG_TX_ACP_CTRL
 0xCA

	)

556 
	#REG_TX_ISRC1_CTRL
 0xCB

	)

557 
	#REG_TX_ISRC2_CTRL
 0xCC

	)

558 
	#REG_TX_AVI_INFOFRM_CTRL
 0xCD

	)

559 
	#REG_TX_AUD_INFOFRM_CTRL
 0xCE

	)

560 
	#REG_TX_SPD_INFOFRM_CTRL
 0xCF

	)

561 
	#REG_TX_MPG_INFOFRM_CTRL
 0xD0

	)

562 
	#B_TX_ENABLE_PKT
 1

	)

563 
	#B_TX_REPEAT_PKT
 (1<<1)

	)

565 
	#REG_TX_3D_INFO_CTRL
 0xD2

	)

571 
	#REG_TX_PKT_HB00
 0x38

	)

572 
	#REG_TX_PKT_HB01
 0x39

	)

573 
	#REG_TX_PKT_HB02
 0x3A

	)

575 
	#REG_TX_PKT_PB00
 0x3B

	)

576 
	#REG_TX_PKT_PB01
 0x3C

	)

577 
	#REG_TX_PKT_PB02
 0x3D

	)

578 
	#REG_TX_PKT_PB03
 0x3E

	)

579 
	#REG_TX_PKT_PB04
 0x3F

	)

580 
	#REG_TX_PKT_PB05
 0x40

	)

581 
	#REG_TX_PKT_PB06
 0x41

	)

582 
	#REG_TX_PKT_PB07
 0x42

	)

583 
	#REG_TX_PKT_PB08
 0x43

	)

584 
	#REG_TX_PKT_PB09
 0x44

	)

585 
	#REG_TX_PKT_PB10
 0x45

	)

586 
	#REG_TX_PKT_PB11
 0x46

	)

587 
	#REG_TX_PKT_PB12
 0x47

	)

588 
	#REG_TX_PKT_PB13
 0x48

	)

589 
	#REG_TX_PKT_PB14
 0x49

	)

590 
	#REG_TX_PKT_PB15
 0x4A

	)

591 
	#REG_TX_PKT_PB16
 0x4B

	)

592 
	#REG_TX_PKT_PB17
 0x4C

	)

593 
	#REG_TX_PKT_PB18
 0x4D

	)

594 
	#REG_TX_PKT_PB19
 0x4E

	)

595 
	#REG_TX_PKT_PB20
 0x4F

	)

596 
	#REG_TX_PKT_PB21
 0x50

	)

597 
	#REG_TX_PKT_PB22
 0x51

	)

598 
	#REG_TX_PKT_PB23
 0x52

	)

599 
	#REG_TX_PKT_PB24
 0x53

	)

600 
	#REG_TX_PKT_PB25
 0x54

	)

601 
	#REG_TX_PKT_PB26
 0x55

	)

602 
	#REG_TX_PKT_PB27
 0x56

	)

604 
	#REG_TX_AVIINFO_DB1
 0x58

	)

605 
	#REG_TX_AVIINFO_DB2
 0x59

	)

606 
	#REG_TX_AVIINFO_DB3
 0x5A

	)

607 
	#REG_TX_AVIINFO_DB4
 0x5B

	)

608 
	#REG_TX_AVIINFO_DB5
 0x5C

	)

609 
	#REG_TX_AVIINFO_DB6
 0x5E

	)

610 
	#REG_TX_AVIINFO_DB7
 0x5F

	)

611 
	#REG_TX_AVIINFO_DB8
 0x60

	)

612 
	#REG_TX_AVIINFO_DB9
 0x61

	)

613 
	#REG_TX_AVIINFO_DB10
 0x62

	)

614 
	#REG_TX_AVIINFO_DB11
 0x63

	)

615 
	#REG_TX_AVIINFO_DB12
 0x64

	)

616 
	#REG_TX_AVIINFO_DB13
 0x65

	)

617 
	#REG_TX_AVIINFO_SUM
 0x5D

	)

619 
	#REG_TX_PKT_AUDINFO_CC
 0x68

	)

620 
	#REG_TX_PKT_AUDINFO_SF
 0x69

	)

621 
	#REG_TX_PKT_AUDINFO_CA
 0x6B

	)

623 
	#REG_TX_PKT_AUDINFO_DM_LSV
 0x6C

	)

624 
	#REG_TX_PKT_AUDINFO_SUM
 0x6D

	)

627 
	#REG_TX_PKT_SPDINFO_SUM
 0x70

	)

628 
	#REG_TX_PKT_SPDINFO_PB1
 0x71

	)

629 
	#REG_TX_PKT_SPDINFO_PB2
 0x72

	)

630 
	#REG_TX_PKT_SPDINFO_PB3
 0x73

	)

631 
	#REG_TX_PKT_SPDINFO_PB4
 0x74

	)

632 
	#REG_TX_PKT_SPDINFO_PB5
 0x75

	)

633 
	#REG_TX_PKT_SPDINFO_PB6
 0x76

	)

634 
	#REG_TX_PKT_SPDINFO_PB7
 0x77

	)

635 
	#REG_TX_PKT_SPDINFO_PB8
 0x78

	)

636 
	#REG_TX_PKT_SPDINFO_PB9
 0x79

	)

637 
	#REG_TX_PKT_SPDINFO_PB10
 0x7A

	)

638 
	#REG_TX_PKT_SPDINFO_PB11
 0x7B

	)

639 
	#REG_TX_PKT_SPDINFO_PB12
 0x7C

	)

640 
	#REG_TX_PKT_SPDINFO_PB13
 0x7D

	)

641 
	#REG_TX_PKT_SPDINFO_PB14
 0x7E

	)

642 
	#REG_TX_PKT_SPDINFO_PB15
 0x7F

	)

643 
	#REG_TX_PKT_SPDINFO_PB16
 0x80

	)

644 
	#REG_TX_PKT_SPDINFO_PB17
 0x81

	)

645 
	#REG_TX_PKT_SPDINFO_PB18
 0x82

	)

646 
	#REG_TX_PKT_SPDINFO_PB19
 0x83

	)

647 
	#REG_TX_PKT_SPDINFO_PB20
 0x84

	)

648 
	#REG_TX_PKT_SPDINFO_PB21
 0x85

	)

649 
	#REG_TX_PKT_SPDINFO_PB22
 0x86

	)

650 
	#REG_TX_PKT_SPDINFO_PB23
 0x87

	)

651 
	#REG_TX_PKT_SPDINFO_PB24
 0x88

	)

652 
	#REG_TX_PKT_SPDINFO_PB25
 0x89

	)

654 
	#REG_TX_PKT_MPGINFO_FMT
 0x8A

	)

655 
	#B_TX_MPG_FR
 1

	)

656 
	#B_TX_MPG_MF_I
 (1<<1)

	)

657 
	#B_TX_MPG_MF_B
 (2<<1)

	)

658 
	#B_TX_MPG_MF_P
 (3<<1)

	)

659 
	#B_TX_MPG_MF_MASK
 (3<<1)

	)

660 
	#REG_TX_PKG_MPGINFO_DB0
 0x8B

	)

661 
	#REG_TX_PKG_MPGINFO_DB1
 0x8C

	)

662 
	#REG_TX_PKG_MPGINFO_DB2
 0x8D

	)

663 
	#REG_TX_PKG_MPGINFO_DB3
 0x8E

	)

664 
	#REG_TX_PKG_MPGINFO_SUM
 0x8F

	)

666 
	#Føme_Pˇkög
 0

	)

667 
	#T›_™d_BŸt⁄
 6

	)

668 
	#Side_by_Side
 8

	)

673 
	#hdmôx_ENABLE_NULL_PKT
(
pHWDE
Ë{ 
	`HDMITX_WrôeI2C_Byã
’HWDE, 
REG_TX_NULL_CTRL
,
B_TX_ENABLE_PKT
|
B_TX_REPEAT_PKT
); }

	)

674 
	#hdmôx_ENABLE_ACP_PKT
(
pHWDE
Ë{ 
	`HDMITX_WrôeI2C_Byã
’HWDE, 
REG_TX_ACP_CTRL
,
B_TX_ENABLE_PKT
|
B_TX_REPEAT_PKT
); }

	)

675 
	#hdmôx_ENABLE_ISRC1_PKT
(
pHWDE
Ë{ 
	`HDMITX_WrôeI2C_Byã
’HWDE, 
REG_TX_ISRC1_CTRL
,
B_TX_ENABLE_PKT
|
B_TX_REPEAT_PKT
); }

	)

676 
	#hdmôx_ENABLE_ISRC2_PKT
(
pHWDE
Ë{ 
	`HDMITX_WrôeI2C_Byã
’HWDE, 
REG_TX_ISRC2_CTRL
,
B_TX_ENABLE_PKT
|
B_TX_REPEAT_PKT
); }

	)

677 
	#hdmôx_ENABLE_AVI_INFOFRM_PKT
(
pHWDE
Ë{ 
	`HDMITX_WrôeI2C_Byã
’HWDE, 
REG_TX_AVI_INFOFRM_CTRL
,
B_TX_ENABLE_PKT
|
B_TX_REPEAT_PKT
); }

	)

678 
	#hdmôx_ENABLE_AUD_INFOFRM_PKT
(
pHWDE
Ë{ 
	`HDMITX_WrôeI2C_Byã
’HWDE, 
REG_TX_AUD_INFOFRM_CTRL
,
B_TX_ENABLE_PKT
|
B_TX_REPEAT_PKT
); }

	)

679 
	#hdmôx_ENABLE_SPD_INFOFRM_PKT
(
pHWDE
Ë{ 
	`HDMITX_WrôeI2C_Byã
’HWDE, 
REG_TX_SPD_INFOFRM_CTRL
,
B_TX_ENABLE_PKT
|
B_TX_REPEAT_PKT
); }

	)

680 
	#hdmôx_ENABLE_MPG_INFOFRM_PKT
(
pHWDE
Ë{ 
	`HDMITX_WrôeI2C_Byã
’HWDE, 
REG_TX_MPG_INFOFRM_CTRL
,
B_TX_ENABLE_PKT
|
B_TX_REPEAT_PKT
); }

	)

681 
	#hdmôx_ENABLE_GíîÆPuΩo£_PKT
(
pHWDE
Ë{ 
	`HDMITX_WrôeI2C_Byã
’HWDE, 
REG_TX_NULL_CTRL
,
B_TX_ENABLE_PKT
|
B_TX_REPEAT_PKT
); }

	)

682 
	#hdmôx_DISABLE_VSDB_PKT
(
pHWDE
Ë{ 
	`HDMITX_WrôeI2C_Byã
’HWDE, 
REG_TX_3D_INFO_CTRL
,0); }

	)

683 
	#hdmôx_DISABLE_NULL_PKT
(
pHWDE
Ë{ 
	`HDMITX_WrôeI2C_Byã
’HWDE, 
REG_TX_NULL_CTRL
,0); }

	)

684 
	#hdmôx_DISABLE_ACP_PKT
(
pHWDE
Ë{ 
	`HDMITX_WrôeI2C_Byã
’HWDE, 
REG_TX_ACP_CTRL
,0); }

	)

685 
	#hdmôx_DISABLE_ISRC1_PKT
(
pHWDE
Ë{ 
	`HDMITX_WrôeI2C_Byã
’HWDE, 
REG_TX_ISRC1_CTRL
,0); }

	)

686 
	#hdmôx_DISABLE_ISRC2_PKT
(
pHWDE
Ë{ 
	`HDMITX_WrôeI2C_Byã
’HWDE, 
REG_TX_ISRC2_CTRL
,0); }

	)

687 
	#hdmôx_DISABLE_AVI_INFOFRM_PKT
(
pHWDE
Ë{ 
	`HDMITX_WrôeI2C_Byã
’HWDE, 
REG_TX_AVI_INFOFRM_CTRL
,0); }

	)

688 
	#hdmôx_DISABLE_AUD_INFOFRM_PKT
(
pHWDE
Ë{ 
	`HDMITX_WrôeI2C_Byã
’HWDE, 
REG_TX_AUD_INFOFRM_CTRL
,0); }

	)

689 
	#hdmôx_DISABLE_SPD_INFOFRM_PKT
(
pHWDE
Ë{ 
	`HDMITX_WrôeI2C_Byã
’HWDE, 
REG_TX_SPD_INFOFRM_CTRL
,0); }

	)

690 
	#hdmôx_DISABLE_MPG_INFOFRM_PKT
(
pHWDE
Ë{ 
	`HDMITX_WrôeI2C_Byã
’HWDE, 
REG_TX_MPG_INFOFRM_CTRL
,0); }

	)

691 
	#hdmôx_DISABLE_GíîÆPuΩo£_PKT
(
pHWDE
Ë{ 
	`HDMITX_WrôeI2C_Byã
’HWDE, 
REG_TX_NULL_CTRL
,0); }

	)

698 
	mPCLK_LOW
 = 0 ,

699 
	mPCLK_MEDIUM
,

700 
	mPCLK_HIGH


701 } 
	tVIDEOPCLKLEVEL
 ;

706 
boﬁ
 
a°_hdmi_check
(
drm_devi˚
 *
dev
);

707 
a°_hdmi_öô
(
drm_devi˚
 *
dev
);

708 
a°_hdmi_dißbÀ
(
drm_devi˚
 *
dev
);

709 
boﬁ
 
a°_hdmi_ªad_edid
(
drm_devi˚
 *
dev
, 
u8
 *
pEDIDD©a
);

710 
a°_hdmi_£t_ouçut
(
drm_devi˚
 *
dev
);

	@/mnt/d/Src/DRM/sources/src504/ast_main.c

29 
	~<löux/pci.h
>

31 
	~<drm/drm_¸tc_hñ≥r.h
>

32 
	~<drm/drm_fb_hñ≥r.h
>

33 
	~<drm/drm_gem.h
>

34 
	~<drm/drm_gem_‰amebuf„r_hñ≥r.h
>

35 
	~<drm/drm_gem_vøm_hñ≥r.h
>

36 
	~<drm/drm_vøm_mm_hñ≥r.h
>

38 
	~"a°_drv.h
"

40 
	$a°_£t_ödex_ªg_mask
(
a°_¥iv©e
 *
a°
,

41 
uöt32_t
 
ba£
, 
uöt8_t
 
ödex
,

42 
uöt8_t
 
mask
, uöt8_à
vÆ
)

44 
uöt16_t
 vﬁ©ûê
usD©a
;

45 
uöt8_t
 vﬁ©ûê
jD©a
;

48 
	`a°_io_wrôe8
(
a°
, 
ba£
, 
ödex
);

49 
usD©a
 = 
	`a°_io_ªad16
(
a°
, 
ba£
);

50 } (
uöt8_t
)(
usD©a
Ë!
ödex
);

52 
jD©a
 = (
uöt8_t
)(
usD©a
 >> 8);

53 
jD©a
 &
mask
;

54 
jD©a
 |
vÆ
;

55 
usD©a
 = ((
uöt16_t
Ë
jD©a
 << 8Ë| (uöt16_tË
ödex
;

56 
	`a°_io_wrôe16
(
a°
, 
ba£
, 
usD©a
);

57 
	}
}

59 
uöt8_t
 
	$a°_gë_ödex_ªg
(
a°_¥iv©e
 *
a°
,

60 
uöt32_t
 
ba£
, 
uöt8_t
 
ödex
)

62 
uöt16_t
 vﬁ©ûê
usD©a
;

63 
uöt8_t
 vﬁ©ûê
jD©a
;

66 
	`a°_io_wrôe8
(
a°
, 
ba£
, 
ödex
);

67 
usD©a
 = 
	`a°_io_ªad16
(
a°
, 
ba£
);

68 } (
uöt8_t
)(
usD©a
Ë!
ödex
);

70 
jD©a
 = (
uöt8_t
)(
usD©a
 >> 8);

72  
jD©a
;

73 
	}
}

75 
uöt8_t
 
	$a°_gë_ödex_ªg_mask
(
a°_¥iv©e
 *
a°
,

76 
uöt32_t
 
ba£
, 
uöt8_t
 
ödex
, uöt8_à
mask
)

78 
uöt16_t
 vﬁ©ûê
usD©a
;

79 
uöt8_t
 vﬁ©ûê
jD©a
;

82 
	`a°_io_wrôe8
(
a°
, 
ba£
, 
ödex
);

83 
usD©a
 = 
	`a°_io_ªad16
(
a°
, 
ba£
);

84 } (
uöt8_t
)(
usD©a
Ë!
ödex
);

86 
jD©a
 = (
uöt8_t
)(
usD©a
 >> 8);

87 
jD©a
 &
mask
;

89  
jD©a
;

90 
	}
}

92 
	$a°_dëe˘_c⁄fig_mode
(
drm_devi˚
 *
dev
, 
u32
 *
scu_ªv
)

94 
devi˚_node
 *
≈
 = 
dev
->
pdev
->dev.
of_node
;

95 
a°_¥iv©e
 *
a°
 = 
dev
->
dev_¥iv©e
;

96 
uöt32_t
 
d©a
, 
jªgd0
, 
jªgd1
;

99 
a°
->
c⁄fig_mode
 = 
a°_u£_deÁu…s
;

100 *
scu_ªv
 = 0xffffffff;

103 i‡(
≈
 && !
	`of_¥›îty_ªad_u32
(np, "aspeed,scu-revision-id",

104 
scu_ªv
)) {

106 
a°
->
c⁄fig_mode
 = 
a°_u£_dt
;

107 
	`DRM_INFO
("Using device-tree for configuration\n");

112 i‡(
dev
->
pdev
->
devi˚
 !
PCI_CHIP_AST2000
)

120 
jªgd0
 = 
	`a°_gë_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xd0, 0xff);

121 
jªgd1
 = 
	`a°_gë_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xd1, 0xff);

122 i‡(!(
jªgd0
 & 0x80Ë|| !(
jªgd1
 & 0x10)) {

124 i‡(((
dev
->
pdev
->
ªvisi⁄
 & 0xF0Ë=0x40Ë&& ((
jªgd0
 & 0xC0) == 0))

125 
	`∑tch_ahb_a°2500
(
a°
);

128 i‡((
dev
->
pdev
->
ªvisi⁄
 & 0xF0) >= 0x30)

129 
d©a
 = 
	`a°_ªad32
(
a°
, 0xf004);

132 
	`a°_wrôe32
(
a°
, 0xf004, 0x1e6e0000);

133 
	`a°_wrôe32
(
a°
, 0xf000, 0x1);

134 
d©a
 = 
	`a°_ªad32
(
a°
, 0x1207c);

137 i‡((
d©a
 != 0xFFFFFFFF) && (data != 0x00)) {

139 
a°
->
c⁄fig_mode
 = 
a°_u£_p2a
;

141 
	`DRM_INFO
("Using P2A bridge for configuration\n");

144 
	`a°_wrôe32
(
a°
, 0xf004, 0x1e6e0000);

145 
	`a°_wrôe32
(
a°
, 0xf000, 0x1);

146 *
scu_ªv
 = 
	`a°_ªad32
(
a°
, 0x1207c);

152 
	`DRM_INFO
("P2A bridge disabled, using default configuration\n");

153 
	}
}

155 
	$a°_dëe˘_chù
(
drm_devi˚
 *
dev
, 
boﬁ
 *
√ed_po°
)

157 
a°_¥iv©e
 *
a°
 = 
dev
->
dev_¥iv©e
;

158 
uöt32_t
 
jªg
, 
scu_ªv
;

166 i‡(!
	`a°_is_vga_íabÀd
(
dev
)) {

167 
	`a°_íabÀ_vga
(
dev
);

168 
	`DRM_INFO
("VGAÇotÉnabled onÉntry,Ñequesting chip POST\n");

169 *
√ed_po°
 = 
åue
;

171 *
√ed_po°
 = 
Ál£
;

175 
	`a°_›í_key
(
a°
);

176 
	`a°_íabÀ_mmio
(
dev
);

179 
	`a°_£t_ödex_ªg
(
a°
, 
AST_IO_CRTC_PORT
, 0xa1, 0x06);

182 
	`a°_dëe˘_c⁄fig_mode
(
dev
, &
scu_ªv
);

185 i‡(
dev
->
pdev
->
devi˚
 =
PCI_CHIP_AST1180
) {

186 
a°
->
chù
 = 
AST1100
;

187 
	`DRM_INFO
("AST 1180 detected\n");

188 } i‡(
dev
->
pdev
->
devi˚
 =
PCI_CHIP_AIP200
) {

189 
a°
->
chù
 = 
AIP200
;

190 
	`DRM_INFO
("AIP 200 detected\n");

192 i‡(
dev
->
pdev
->
ªvisi⁄
 >= 0x50) {

193 
a°
->
chù
 = 
AST2600
;

194 
	`DRM_INFO
("AST 2600 detected\n");

195 } i‡(
dev
->
pdev
->
ªvisi⁄
 >= 0x40) {

196 
a°
->
chù
 = 
AST2500
;

197 
	`DRM_INFO
("AST 2500 detected\n");

198 } i‡(
dev
->
pdev
->
ªvisi⁄
 >= 0x30) {

199 
a°
->
chù
 = 
AST2400
;

200 
	`DRM_INFO
("AST 2400 detected\n");

201 } i‡(
dev
->
pdev
->
ªvisi⁄
 >= 0x20) {

202 
a°
->
chù
 = 
AST2300
;

203 
	`DRM_INFO
("AST 2300 detected\n");

204 } i‡(
dev
->
pdev
->
ªvisi⁄
 >= 0x10) {

205 
scu_ªv
 & 0x0300) {

207 
a°
->
chù
 = 
AST1100
;

208 
	`DRM_INFO
("AST 1100 detected\n");

211 
a°
->
chù
 = 
AST2200
;

212 
	`DRM_INFO
("AST 2200 detected\n");

215 
a°
->
chù
 = 
AST2150
;

216 
	`DRM_INFO
("AST 2150 detected\n");

219 
a°
->
chù
 = 
AST2100
;

220 
	`DRM_INFO
("AST 2100 detected\n");

223 
a°
->
vga2_˛⁄e
 = 
Ál£
;

225 
a°
->
chù
 = 
AST2000
;

226 
	`DRM_INFO
("AST 2000 detected\n");

231 
a°
->
RefCLK25MHz
 = 
Ál£
;

232 i‡((
a°
->
chù
 =
AST2400
Ë|| (a°->chù =
AST2500
Ë|| (a°->chù =
AST2600
))

234 i‡(
a°
->
c⁄fig_mode
 =
a°_u£_p2a
)

236 
jªg
 = 
	`a°_ªad32
(
a°
, 0x12070);

237 i‡(
jªg
 & 0x00800000Ë
a°
->
RefCLK25MHz
 = 
åue
;

241 
jªg
 = 
	`a°_gë_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xd0, 0xff);

242 i‡(
jªg
 & 0x04Ë
a°
->
RefCLK25MHz
 = 
åue
;

247 
a°
->
suµ‹t_wide_s¸ìn
 = 
åue
;

248 
a°
->
chù
) {

249 
AIP200
:

250 
AST1180
:

251 
a°
->
suµ‹t_√wvga_mode
 = 
åue
;

253 
AST2000
:

254 
a°
->
suµ‹t_√wvga_mode
 = 
Ál£
;

257 
jªg
 = 
	`a°_gë_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xd0, 0xff);

258 i‡(!(
jªg
 & 0x80))

259 
a°
->
suµ‹t_√wvga_mode
 = 
åue
;

260 i‡(
jªg
 & 0x01)

261 
a°
->
suµ‹t_√wvga_mode
 = 
åue
;

263 
a°
->
suµ‹t_√wvga_mode
 = 
Ál£
;

264 i‡(
a°
->
chù
 =
AST2300
 &&

265 (
scu_ªv
 & 0x300) == 0x0)

266 
a°
->
suµ‹t_√wvga_mode
 = 
åue
;

267 i‡(
a°
->
chù
 =
AST2400
 &&

268 (
scu_ªv
 & 0x300) == 0x100)

269 
a°
->
suµ‹t_√wvga_mode
 = 
åue
;

270 i‡(
a°
->
chù
 =
AST2500
 &&

271 
scu_ªv
 == 0x100)

272 
a°
->
suµ‹t_√wvga_mode
 = 
åue
;

273 i‡(
a°
->
chù
 =
AST2600
)

274 
a°
->
suµ‹t_√wvga_mode
 = 
åue
;

280 
a°
->
tx_chù_ty≥
 = 
AST_TX_NONE
;

290 i‡(!*
√ed_po°
) {

291 
jªg
 = 
	`a°_gë_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xa3, 0xff);

292 i‡(
jªg
 & 0x80)

293 
a°
->
tx_chù_ty≥
 = 
AST_TX_SIL164
;

296 i‡((
a°
->
chù
 =
AST2300
Ë|| (a°->chù =
AST2400
Ë|| (a°->chù =
AST2500
)) {

302 
jªg
 = 
	`a°_gë_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xd1, 0xff);

303 
jªg
) {

305 
a°
->
tx_chù_ty≥
 = 
AST_TX_ITE66121
;

308 
a°
->
tx_chù_ty≥
 = 
AST_TX_SIL164
;

311 
a°
->
dp501_fw_addr
 = 
	`kzÆloc
(32*1024, 
GFP_KERNEL
);

312 i‡(
a°
->
dp501_fw_addr
) {

314 i‡(
	`a°_backup_fw
(
dev
, 
a°
->
dp501_fw_addr
, 32*1024Ë=
Ál£
) {

315 
	`k‰ì
(
a°
->
dp501_fw_addr
);

316 
a°
->
dp501_fw_addr
 = 
NULL
;

321 
a°
->
tx_chù_ty≥
 = 
AST_TX_DP501
;

324 i‡(
a°
->
chù
 =
AST2600
){

325 
	`a°_dp_œunch
(
a°
->
dev
, 0);

329 
a°
->
tx_chù_ty≥
) {

330 
AST_TX_SIL164
:

331 
	`DRM_INFO
("Using Sil164 TMDSÅransmitter\n");

333 
AST_TX_DP501
:

334 
	`DRM_INFO
("Using DP501 DisplayPortÅransmitter\n");

336 
AST_TX_ASTDP
:

337 
	`DRM_INFO
("Using ASPEED DisplayPortÅransmitter\n");

340 
	`DRM_INFO
("Analog VGA only\n");

343 
	}
}

345 
	$a°_gë_døm_öfo
(
drm_devi˚
 *
dev
)

347 
devi˚_node
 *
≈
 = 
dev
->
pdev
->dev.
of_node
;

348 
a°_¥iv©e
 *
a°
 = 
dev
->
dev_¥iv©e
;

349 
uöt32_t
 
m¸_cfg
, 
m¸_scu_m∂l
, 
m¸_scu_°øp
;

350 
uöt32_t
 
díum
, 
num
, 
div
, 
ªf_∂l
, 
d£l
;

352 
a°
->
c⁄fig_mode
) {

353 
a°_u£_dt
:

358 i‡(
	`of_¥›îty_ªad_u32
(
≈
, "aspeed,mcr-configuration",

359 &
m¸_cfg
))

360 
m¸_cfg
 = 0x00000577;

361 i‡(
	`of_¥›îty_ªad_u32
(
≈
, "aspeed,mcr-scu-mpll",

362 &
m¸_scu_m∂l
))

363 
m¸_scu_m∂l
 = 0x000050C0;

364 i‡(
	`of_¥›îty_ªad_u32
(
≈
, "aspeed,mcr-scu-strap",

365 &
m¸_scu_°øp
))

366 
m¸_scu_°øp
 = 0;

368 
a°_u£_p2a
:

369 
	`a°_wrôe32
(
a°
, 0xf004, 0x1e6e0000);

370 
	`a°_wrôe32
(
a°
, 0xf000, 0x1);

371 
m¸_cfg
 = 
	`a°_ªad32
(
a°
, 0x10004);

372 
m¸_scu_m∂l
 = 
	`a°_ªad32
(
a°
, 0x10120);

373 
m¸_scu_°øp
 = 
	`a°_ªad32
(
a°
, 0x10170);

375 
a°_u£_deÁu…s
:

377 
a°
->
døm_bus_width
 = 16;

378 
a°
->
døm_ty≥
 = 
AST_DRAM_1Gx16
;

379 i‡(
a°
->
chù
 =
AST2500
 ||á°->chù =
AST2600
)

380 
a°
->
m˛k
 = 800;

382 
a°
->
m˛k
 = 396;

386 i‡(
m¸_cfg
 & 0x40)

387 
a°
->
døm_bus_width
 = 16;

389 
a°
->
døm_bus_width
 = 32;

391 i‡(
a°
->
chù
 =
AST2500
) {

392 
m¸_cfg
 & 0x03) {

394 
a°
->
døm_ty≥
 = 
AST_DRAM_1Gx16
;

398 
a°
->
døm_ty≥
 = 
AST_DRAM_2Gx16
;

401 
a°
->
døm_ty≥
 = 
AST_DRAM_4Gx16
;

404 
a°
->
døm_ty≥
 = 
AST_DRAM_8Gx16
;

407 } i‡(
a°
->
chù
 =
AST2300
 ||á°->chù =
AST2400
) {

408 
m¸_cfg
 & 0x03) {

410 
a°
->
døm_ty≥
 = 
AST_DRAM_512Mx16
;

414 
a°
->
døm_ty≥
 = 
AST_DRAM_1Gx16
;

417 
a°
->
døm_ty≥
 = 
AST_DRAM_2Gx16
;

420 
a°
->
døm_ty≥
 = 
AST_DRAM_4Gx16
;

424 
m¸_cfg
 & 0x0c) {

427 
a°
->
døm_ty≥
 = 
AST_DRAM_512Mx16
;

430 i‡(
m¸_cfg
 & 0x40)

431 
a°
->
døm_ty≥
 = 
AST_DRAM_1Gx16
;

433 
a°
->
døm_ty≥
 = 
AST_DRAM_512Mx32
;

436 
a°
->
døm_ty≥
 = 
AST_DRAM_1Gx32
;

441 i‡(
m¸_scu_°øp
 & 0x2000)

442 
ªf_∂l
 = 14318;

444 
ªf_∂l
 = 12000;

446 
díum
 = 
m¸_scu_m∂l
 & 0x1f;

447 
num
 = (
m¸_scu_m∂l
 & 0x3fe0) >> 5;

448 
d£l
 = (
m¸_scu_m∂l
 & 0xc000) >> 14;

449 
d£l
) {

451 
div
 = 0x4;

455 
div
 = 0x2;

458 
div
 = 0x1;

461 
a°
->
m˛k
 = 
ªf_∂l
 * (
num
 + 2Ë/ ((
díum
 + 2Ë* (
div
 * 1000));

463 
	}
}

465 c⁄° 
drm_mode_c⁄fig_funcs
 
	ga°_mode_funcs
 = {

466 .
fb_¸óã
 = 
drm_gem_fb_¸óã


469 
u32
 
	$a°_gë_vøm_öfo
(
drm_devi˚
 *
dev
)

471 
a°_¥iv©e
 *
a°
 = 
dev
->
dev_¥iv©e
;

472 
u8
 
jªg
;

473 
u32
 
vøm_size
;

474 
	`a°_›í_key
(
a°
);

476 
vøm_size
 = 
AST_VIDMEM_DEFAULT_SIZE
;

477 
jªg
 = 
	`a°_gë_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xaa, 0xff);

478 
jªg
 & 3) {

479 0: 
vøm_size
 = 
AST_VIDMEM_SIZE_8M
; ;

480 1: 
vøm_size
 = 
AST_VIDMEM_SIZE_16M
; ;

481 2: 
vøm_size
 = 
AST_VIDMEM_SIZE_32M
; ;

482 3: 
vøm_size
 = 
AST_VIDMEM_SIZE_64M
; ;

485 
jªg
 = 
	`a°_gë_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0x99, 0xff);

486 
jªg
 & 0x03) {

488 
vøm_size
 -= 0x100000;

491 
vøm_size
 -= 0x200000;

494 
vøm_size
 -= 0x400000;

498  
vøm_size
;

499 
	}
}

501 
	$a°_drivî_lﬂd
(
drm_devi˚
 *
dev
, 
Êags
)

503 
a°_¥iv©e
 *
a°
;

504 
boﬁ
 
√ed_po°
;

505 
ªt
 = 0;

507 
a°
 = 
	`kzÆloc
((
a°_¥iv©e
), 
GFP_KERNEL
);

508 i‡(!
a°
)

509  -
ENOMEM
;

511 
dev
->
dev_¥iv©e
 = 
a°
;

512 
a°
->
dev
 = dev;

514 
a°
->
ªgs
 = 
	`pci_iom≠
(
dev
->
pdev
, 1, 0);

515 i‡(!
a°
->
ªgs
) {

516 
ªt
 = -
EIO
;

517 
out_‰ì
;

525 i‡(!(
	`pci_ªsour˚_Êags
(
dev
->
pdev
, 2Ë& 
IORESOURCE_IO
)) {

526 
	`DRM_INFO
("platform hasÇo IO space,Årying MMIO\n");

527 
a°
->
i‹egs
 =á°->
ªgs
 + 
AST_IO_MM_OFFSET
;

531 i‡(!
a°
->
i‹egs
) {

532 
a°
->
i‹egs
 = 
	`pci_iom≠
(
dev
->
pdev
, 2, 0);

533 i‡(!
a°
->
i‹egs
) {

534 
ªt
 = -
EIO
;

535 
out_‰ì
;

539 
	`a°_dëe˘_chù
(
dev
, &
√ed_po°
);

541 i‡(
√ed_po°
)

542 
	`a°_po°_gpu
(
dev
);

544 i‡(
a°
->
chù
 !
AST1180
) {

545 
ªt
 = 
	`a°_gë_døm_öfo
(
dev
);

546 i‡(
ªt
)

547 
out_‰ì
;

548 
a°
->
vøm_size
 = 
	`a°_gë_vøm_öfo
(
dev
);

549 
	`DRM_INFO
("dram MCLK=%u MhzÅype=%d bus_width=%d size=%08x\n",

550 
a°
->
m˛k
,á°->
døm_ty≥
,

551 
a°
->
døm_bus_width
,á°->
vøm_size
);

554 
ªt
 = 
	`a°_mm_öô
(
a°
);

555 i‡(
ªt
)

556 
out_‰ì
;

559 
a°
->
ª£rvedbuf„r
 = 
NULL
;

560 i‡(
a°
->
vøm_size
 < 
	`pci_ªsour˚_Àn
(
dev
->
pdev
, 0)) {

561 
a°
->
ª£rvedbuf„r
 = 
	`i‹em≠_noˇche
(
	`pci_ªsour˚_°¨t
◊°->
dev
->
pdev
, 0Ë+ (Ô°->
vøm_size
, \

562 
	`pci_ªsour˚_Àn
(
dev
->
pdev
, 0Ë- 
a°
->
vøm_size
);

563 i‡(!
a°
->
ª£rvedbuf„r
) {

564 
	`DRM_INFO
("failedÅo mapÑeserved buffer! \n");

568 
	`drm_mode_c⁄fig_öô
(
dev
);

570 
dev
->
mode_c⁄fig
.
funcs
 = (*)&
a°_mode_funcs
;

571 
dev
->
mode_c⁄fig
.
mö_width
 = 0;

572 
dev
->
mode_c⁄fig
.
mö_height
 = 0;

573 
dev
->
mode_c⁄fig
.
¥e„ºed_dïth
 = 24;

574 
dev
->
mode_c⁄fig
.
¥e„r_shadow
 = 1;

575 
dev
->
mode_c⁄fig
.
fb_ba£
 = 
	`pci_ªsour˚_°¨t
(
a°
->dev->
pdev
, 0);

577 i‡(
a°
->
chù
 =
AST2100
 ||

578 
a°
->
chù
 =
AST2200
 ||

579 
a°
->
chù
 =
AST2300
 ||

580 
a°
->
chù
 =
AST2400
 ||

581 
a°
->
chù
 =
AST2500
 ||

582 
a°
->
chù
 =
AST2600
 ||

583 
a°
->
chù
 =
AIP200
 ||

584 
a°
->
chù
 =
AST1180
) {

585 
dev
->
mode_c⁄fig
.
max_width
 = 1920;

586 
dev
->
mode_c⁄fig
.
max_height
 = 2048;

588 
dev
->
mode_c⁄fig
.
max_width
 = 1600;

589 
dev
->
mode_c⁄fig
.
max_height
 = 1200;

592 
ªt
 = 
	`a°_mode_öô
(
dev
);

593 i‡(
ªt
)

594 
out_‰ì
;

596 
ªt
 = 
	`drm_fbdev_gíîic_£tup
(
dev
, 32);

597 i‡(
ªt
)

598 
out_‰ì
;

601 
out_‰ì
:

602 
	`k‰ì
(
a°
);

603 
dev
->
dev_¥iv©e
 = 
NULL
;

604  
ªt
;

605 
	}
}

607 
	$a°_drivî_u∆ﬂd
(
drm_devi˚
 *
dev
)

609 
a°_¥iv©e
 *
a°
 = 
dev
->
dev_¥iv©e
;

612 
	`a°_£t_ödex_ªg
(
a°
, 
AST_IO_CRTC_PORT
, 0xa1, 0x04);

614 
	`a°_ªÀa£_fúmw¨e
(
dev
);

615 
	`k‰ì
(
a°
->
dp501_fw_addr
);

616 
	`a°_mode_föi
(
dev
);

617 
	`drm_mode_c⁄fig_˛ónup
(
dev
);

619 
	`a°_mm_föi
(
a°
);

620 i‡(
a°
->
i‹egs
 !a°->
ªgs
 + 
AST_IO_MM_OFFSET
)

621 
	`pci_iounm≠
(
dev
->
pdev
, 
a°
->
i‹egs
);

622 
	`pci_iounm≠
(
dev
->
pdev
, 
a°
->
ªgs
);

623 
	`k‰ì
(
a°
);

624 
	}
}

626 
	$a°_gem_¸óã
(
drm_devi˚
 *
dev
,

627 
u32
 
size
, 
boﬁ
 
iskî√l
,

628 
drm_gem_obje˘
 **
obj
)

630 
drm_gem_vøm_obje˘
 *
gbo
;

631 
ªt
;

633 *
obj
 = 
NULL
;

635 
size
 = 
	`roundup
(size, 
PAGE_SIZE
);

636 i‡(
size
 == 0)

637  -
EINVAL
;

639 
gbo
 = 
	`drm_gem_vøm_¸óã
(
dev
, &dev->
vøm_mm
->
bdev
, 
size
, 0, 
Ál£
);

640 i‡(
	`IS_ERR
(
gbo
)) {

641 
ªt
 = 
	`PTR_ERR
(
gbo
);

642 i‡(
ªt
 !-
ERESTARTSYS
)

643 
	`DRM_ERROR
("failedÅoállocate GEM object\n");

644  
ªt
;

646 *
obj
 = &
gbo
->
bo
.
ba£
;

648 
	}
}

650 
ölöe
 
	$a°_waô_⁄e_vsync
(
a°_¥iv©e
 *
a°
)

652 !(
	`a°_io_ªad8
(
a°
, 
AST_IO_INPUT_STATUS1_READ
) & 0x8));

653 (
	`a°_io_ªad8
(
a°
, 
AST_IO_INPUT_STATUS1_READ
) & 0x8));

654 !(
	`a°_io_ªad8
(
a°
, 
AST_IO_INPUT_STATUS1_READ
) & 0x8));

655 
	}
}

	@/mnt/d/Src/DRM/sources/src504/ast_mode.c

31 
	~<löux/exp‹t.h
>

32 
	~<löux/pci.h
>

34 
	~<drm/drm_¸tc.h
>

35 
	~<drm/drm_¸tc_hñ≥r.h
>

36 
	~<drm/drm_fourcc.h
>

37 
	~<drm/drm_gem_vøm_hñ≥r.h
>

38 
	~<drm/drm_∂™e_hñ≥r.h
>

39 
	~<drm/drm_¥obe_hñ≥r.h
>

41 
	~"a°_drv.h
"

42 
	~"a°_èbÀs.h
"

43 
	~"a°_hdmôx.h
"

45 
a°_i2c_ch™
 *
a°_i2c_¸óã
(
drm_devi˚
 *
dev
);

46 
a°_i2c_de°roy
(
a°_i2c_ch™
 *
i2c
);

47 
a°_curs‹_£t
(
drm_¸tc
 *
¸tc
,

48 
drm_fûe
 *
fûe_¥iv
,

49 
uöt32_t
 
h™dÀ
,

50 
uöt32_t
 
width
,

51 
uöt32_t
 
height
);

52 
a°_curs‹_move
(
drm_¸tc
 *
¸tc
,

53 
x
, 
y
);

55 
ölöe
 
	$a°_lﬂd_∑Àâe_ödex
(
a°_¥iv©e
 *
a°
,

56 
u8
 
ödex
, u8 
ªd
, u8 
gªí
,

57 
u8
 
blue
)

59 
	`a°_io_wrôe8
(
a°
, 
AST_IO_DAC_INDEX_WRITE
, 
ödex
);

60 
	`a°_io_ªad8
(
a°
, 
AST_IO_SEQ_PORT
);

61 
	`a°_io_wrôe8
(
a°
, 
AST_IO_DAC_DATA
, 
ªd
);

62 
	`a°_io_ªad8
(
a°
, 
AST_IO_SEQ_PORT
);

63 
	`a°_io_wrôe8
(
a°
, 
AST_IO_DAC_DATA
, 
gªí
);

64 
	`a°_io_ªad8
(
a°
, 
AST_IO_SEQ_PORT
);

65 
	`a°_io_wrôe8
(
a°
, 
AST_IO_DAC_DATA
, 
blue
);

66 
	`a°_io_ªad8
(
a°
, 
AST_IO_SEQ_PORT
);

67 
	}
}

69 
	$a°_¸tc_lﬂd_lut
(
drm_¸tc
 *
¸tc
)

71 
a°_¥iv©e
 *
a°
 = 
¸tc
->
dev
->
dev_¥iv©e
;

72 
u16
 *
r
, *
g
, *
b
;

73 
i
;

75 i‡(!
¸tc
->
íabÀd
)

78 
r
 = 
¸tc
->
gamma_°‹e
;

79 
g
 = 
r
 + 
¸tc
->
gamma_size
;

80 
b
 = 
g
 + 
¸tc
->
gamma_size
;

82 
i
 = 0; i < 256; i++)

83 
	`a°_lﬂd_∑Àâe_ödex
(
a°
, 
i
, *
r
++ >> 8, *
g
++ >> 8, *
b
++ >> 8);

84 
	}
}

86 
boﬁ
 
	$a°_gë_vbios_mode_öfo
(
drm_¸tc
 *
¸tc
, 
drm_di•œy_mode
 *
mode
,

87 
drm_di•œy_mode
 *
adju°ed_mode
,

88 
a°_vbios_mode_öfo
 *
vbios_mode
)

90 
a°_¥iv©e
 *
a°
 = 
¸tc
->
dev
->
dev_¥iv©e
;

91 c⁄° 
drm_‰amebuf„r
 *
fb
 = 
¸tc
->
¥im¨y
->fb;

92 
u32
 
ª‰esh_øã_ödex
 = 0, 
mode_id
, 
cﬁ‹_ödex
, 
ª‰esh_øã
;

93 c⁄° 
a°_vbios_íhèbÀ
 *
be°
 = 
NULL
;

94 
u32
 
hb‹dî
, 
vb‹dî
;

95 
boﬁ
 
check_sync
;

97 
fb
->
f‹m©
->
˝p
[0] * 8) {

99 
vbios_mode
->
°d_èbÀ
 = &
vbios_°dèbÀ
[
VGAModeIndex
];

100 
cﬁ‹_ödex
 = 
VGAModeIndex
 - 1;

103 
vbios_mode
->
°d_èbÀ
 = &
vbios_°dèbÀ
[
HiCModeIndex
];

104 
cﬁ‹_ödex
 = 
HiCModeIndex
;

108 
vbios_mode
->
°d_èbÀ
 = &
vbios_°dèbÀ
[
TrueCModeIndex
];

109 
cﬁ‹_ödex
 = 
TrueCModeIndex
;

112  
Ál£
;

115 
¸tc
->
mode
.
¸tc_hdi•œy
) {

117 
vbios_mode
->
íh_èbÀ
 = &
ªs_640x480
[
ª‰esh_øã_ödex
];

120 
vbios_mode
->
íh_èbÀ
 = &
ªs_800x600
[
ª‰esh_øã_ödex
];

123 
vbios_mode
->
íh_èbÀ
 = &
ªs_1024x768
[
ª‰esh_øã_ödex
];

126 
vbios_mode
->
íh_èbÀ
 = &
ªs_1152x864
[
ª‰esh_øã_ödex
];

129 i‡(
¸tc
->
mode
.
¸tc_vdi•œy
 == 800)

130 
vbios_mode
->
íh_èbÀ
 = &
ªs_1280x800
[
ª‰esh_øã_ödex
];

132 
vbios_mode
->
íh_èbÀ
 = &
ªs_1280x1024
[
ª‰esh_øã_ödex
];

135 
vbios_mode
->
íh_èbÀ
 = &
ªs_1360x768
[
ª‰esh_øã_ödex
];

138 
vbios_mode
->
íh_èbÀ
 = &
ªs_1440x900
[
ª‰esh_øã_ödex
];

141 i‡(
¸tc
->
mode
.
¸tc_vdi•œy
 == 900)

142 
vbios_mode
->
íh_èbÀ
 = &
ªs_1600x900
[
ª‰esh_øã_ödex
];

144 
vbios_mode
->
íh_èbÀ
 = &
ªs_1600x1200
[
ª‰esh_øã_ödex
];

147 
vbios_mode
->
íh_èbÀ
 = &
ªs_1680x1050
[
ª‰esh_øã_ödex
];

150 i‡(
¸tc
->
mode
.
¸tc_vdi•œy
 == 1080)

151 
vbios_mode
->
íh_èbÀ
 = &
ªs_1920x1080
[
ª‰esh_øã_ödex
];

153 
vbios_mode
->
íh_èbÀ
 = &
ªs_1920x1200
[
ª‰esh_øã_ödex
];

156  
Ál£
;

159 
ª‰esh_øã
 = 
	`drm_mode_vª‰esh
(
mode
);

160 
check_sync
 = 
vbios_mode
->
íh_èbÀ
->
Êags
 & 
WideS¸ìnMode
;

162 c⁄° 
a°_vbios_íhèbÀ
 *
lo›
 = 
vbios_mode
->
íh_èbÀ
;

164 
lo›
->
ª‰esh_øã
 != 0xff) {

165 i‡((
check_sync
) &&

166 (((
mode
->
Êags
 & 
DRM_MODE_FLAG_NVSYNC
) &&

167 (
lo›
->
Êags
 & 
PVSync
)) ||

168 ((
mode
->
Êags
 & 
DRM_MODE_FLAG_PVSYNC
) &&

169 (
lo›
->
Êags
 & 
NVSync
)) ||

170 ((
mode
->
Êags
 & 
DRM_MODE_FLAG_NHSYNC
) &&

171 (
lo›
->
Êags
 & 
PHSync
)) ||

172 ((
mode
->
Êags
 & 
DRM_MODE_FLAG_PHSYNC
) &&

173 (
lo›
->
Êags
 & 
NHSync
)))) {

174 
lo›
++;

177 i‡(
lo›
->
ª‰esh_øã
 <=Ñefresh_rate

178 && (!
be°
 || 
lo›
->
ª‰esh_øã
 > best->refresh_rate))

179 
be°
 = 
lo›
;

180 
lo›
++;

182 i‡(
be°
 || !
check_sync
)

184 
check_sync
 = 0;

186 i‡(
be°
)

187 
vbios_mode
->
íh_èbÀ
 = 
be°
;

189 
hb‹dî
 = (
vbios_mode
->
íh_èbÀ
->
Êags
 & 
HB‹dî
) ? 8 : 0;

190 
vb‹dî
 = (
vbios_mode
->
íh_èbÀ
->
Êags
 & 
VB‹dî
) ? 8 : 0;

192 
adju°ed_mode
->
¸tc_htŸÆ
 = 
vbios_mode
->
íh_èbÀ
->
ht
;

193 
adju°ed_mode
->
¸tc_hbœnk_°¨t
 = 
vbios_mode
->
íh_èbÀ
->
hde
 + 
hb‹dî
;

194 
adju°ed_mode
->
¸tc_hbœnk_íd
 = 
vbios_mode
->
íh_èbÀ
->
ht
 - 
hb‹dî
;

195 
adju°ed_mode
->
¸tc_hsync_°¨t
 = 
vbios_mode
->
íh_èbÀ
->
hde
 + 
hb‹dî
 +

196 
vbios_mode
->
íh_èbÀ
->
hÂ
;

197 
adju°ed_mode
->
¸tc_hsync_íd
 = (
vbios_mode
->
íh_èbÀ
->
hde
 + 
hb‹dî
 +

198 
vbios_mode
->
íh_èbÀ
->
hÂ
 +

199 
vbios_mode
->
íh_èbÀ
->
hsync
);

201 
adju°ed_mode
->
¸tc_vtŸÆ
 = 
vbios_mode
->
íh_èbÀ
->
vt
;

202 
adju°ed_mode
->
¸tc_vbœnk_°¨t
 = 
vbios_mode
->
íh_èbÀ
->
vde
 + 
vb‹dî
;

203 
adju°ed_mode
->
¸tc_vbœnk_íd
 = 
vbios_mode
->
íh_èbÀ
->
vt
 - 
vb‹dî
;

204 
adju°ed_mode
->
¸tc_vsync_°¨t
 = 
vbios_mode
->
íh_èbÀ
->
vde
 + 
vb‹dî
 +

205 
vbios_mode
->
íh_èbÀ
->
vÂ
;

206 
adju°ed_mode
->
¸tc_vsync_íd
 = (
vbios_mode
->
íh_èbÀ
->
vde
 + 
vb‹dî
 +

207 
vbios_mode
->
íh_èbÀ
->
vÂ
 +

208 
vbios_mode
->
íh_èbÀ
->
vsync
);

210 
ª‰esh_øã_ödex
 = 
vbios_mode
->
íh_èbÀ
->refresh_rate_index;

211 
mode_id
 = 
vbios_mode
->
íh_èbÀ
->mode_id;

213 i‡(
a°
->
chù
 =
AST1180
) {

216 
	`a°_£t_ödex_ªg
(
a°
, 
AST_IO_CRTC_PORT
, 0x8c, (
u8
)((
cﬁ‹_ödex
 & 0xf) << 4));

217 
	`a°_£t_ödex_ªg
(
a°
, 
AST_IO_CRTC_PORT
, 0x8d, 
ª‰esh_øã_ödex
 & 0xff);

218 
	`a°_£t_ödex_ªg
(
a°
, 
AST_IO_CRTC_PORT
, 0x8e, 
mode_id
 & 0xff);

220 
	`a°_£t_ödex_ªg
(
a°
, 
AST_IO_CRTC_PORT
, 0x91, 0x00);

221 i‡(
vbios_mode
->
íh_èbÀ
->
Êags
 & 
NewModeInfo
) {

222 
	`a°_£t_ödex_ªg
(
a°
, 
AST_IO_CRTC_PORT
, 0x91, 0xa8);

223 
	`a°_£t_ödex_ªg
(
a°
, 
AST_IO_CRTC_PORT
, 0x92,

224 
fb
->
f‹m©
->
˝p
[0] * 8);

225 
	`a°_£t_ödex_ªg
(
a°
, 
AST_IO_CRTC_PORT
, 0x93, 
adju°ed_mode
->
˛ock
 / 1000);

226 
	`a°_£t_ödex_ªg
(
a°
, 
AST_IO_CRTC_PORT
, 0x94, 
adju°ed_mode
->
¸tc_hdi•œy
);

227 
	`a°_£t_ödex_ªg
(
a°
, 
AST_IO_CRTC_PORT
, 0x95, 
adju°ed_mode
->
¸tc_hdi•œy
 >> 8);

229 
	`a°_£t_ödex_ªg
(
a°
, 
AST_IO_CRTC_PORT
, 0x96, 
adju°ed_mode
->
¸tc_vdi•œy
);

230 
	`a°_£t_ödex_ªg
(
a°
, 
AST_IO_CRTC_PORT
, 0x97, 
adju°ed_mode
->
¸tc_vdi•œy
 >> 8);

234  
åue
;

237 
	}
}

238 
	$a°_£t_°d_ªg
(
drm_¸tc
 *
¸tc
, 
drm_di•œy_mode
 *
mode
,

239 
a°_vbios_mode_öfo
 *
vbios_mode
)

241 
a°_¥iv©e
 *
a°
 = 
¸tc
->
dev
->
dev_¥iv©e
;

242 c⁄° 
a°_vbios_°dèbÀ
 *
°dèbÀ
;

243 
u32
 
i
;

244 
u8
 
jªg
;

246 
°dèbÀ
 = 
vbios_mode
->
°d_èbÀ
;

248 
jªg
 = 
°dèbÀ
->
misc
;

249 
	`a°_io_wrôe8
(
a°
, 
AST_IO_MISC_PORT_WRITE
, 
jªg
);

252 
	`a°_£t_ödex_ªg
(
a°
, 
AST_IO_SEQ_PORT
, 0x00, 0x03);

253 
i
 = 0; i < 4; i++) {

254 
jªg
 = 
°dèbÀ
->
£q
[
i
];

255 i‡(!
i
)

256 
jªg
 |= 0x20;

257 
	`a°_£t_ödex_ªg
(
a°
, 
AST_IO_SEQ_PORT
, (
i
 + 1Ë, 
jªg
);

261 
	`a°_£t_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0x11, 0x7f, 0x00);

262 
i
 = 0; i < 25; i++)

263 
	`a°_£t_ödex_ªg
(
a°
, 
AST_IO_CRTC_PORT
, 
i
, 
°dèbÀ
->
¸tc
[i]);

266 
jªg
 = 
	`a°_io_ªad8
(
a°
, 
AST_IO_INPUT_STATUS1_READ
);

267 
i
 = 0; i < 20; i++) {

268 
jªg
 = 
°dèbÀ
->
¨
[
i
];

269 
	`a°_io_wrôe8
(
a°
, 
AST_IO_AR_PORT_WRITE
, (
u8
)
i
);

270 
	`a°_io_wrôe8
(
a°
, 
AST_IO_AR_PORT_WRITE
, 
jªg
);

272 
	`a°_io_wrôe8
(
a°
, 
AST_IO_AR_PORT_WRITE
, 0x14);

273 
	`a°_io_wrôe8
(
a°
, 
AST_IO_AR_PORT_WRITE
, 0x00);

275 
jªg
 = 
	`a°_io_ªad8
(
a°
, 
AST_IO_INPUT_STATUS1_READ
);

276 
	`a°_io_wrôe8
(
a°
, 
AST_IO_AR_PORT_WRITE
, 0x20);

279 
i
 = 0; i < 9; i++)

280 
	`a°_£t_ödex_ªg
(
a°
, 
AST_IO_GR_PORT
, 
i
, 
°dèbÀ
->
gr
[i]);

281 
	}
}

283 
	$a°_£t_¸tc_ªg
(
drm_¸tc
 *
¸tc
, 
drm_di•œy_mode
 *
mode
,

284 
a°_vbios_mode_öfo
 *
vbios_mode
)

286 
a°_¥iv©e
 *
a°
 = 
¸tc
->
dev
->
dev_¥iv©e
;

287 
u8
 
jªg05
 = 0, 
jªg07
 = 0, 
jªg09
 = 0, 
jªgAC
 = 0, 
jªgAD
 = 0, 
jªgAE
 = 0;

288 
u16
 
ãmp
, 
¥eˇche
 = 0;

290 i‡(((
a°
->
chù
 =
AST2500
Ë|| (a°->chù =
AST2600
))&&

291 (
vbios_mode
->
íh_èbÀ
->
Êags
 & 
AST2500PªC©chCRT
))

292 
¥eˇche
 = 40;

294 
	`a°_£t_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0x11, 0x7f, 0x00);

296 
ãmp
 = (
mode
->
¸tc_htŸÆ
 >> 3) - 5;

297 i‡(
ãmp
 & 0x100)

298 
jªgAC
 |= 0x01;

299 
	`a°_£t_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0x00, 0x00, 
ãmp
);

301 
ãmp
 = (
mode
->
¸tc_hdi•œy
 >> 3) - 1;

302 i‡(
ãmp
 & 0x100)

303 
jªgAC
 |= 0x04;

304 
	`a°_£t_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0x01, 0x00, 
ãmp
);

306 
ãmp
 = (
mode
->
¸tc_hbœnk_°¨t
 >> 3) - 1;

307 i‡(
ãmp
 & 0x100)

308 
jªgAC
 |= 0x10;

309 
	`a°_£t_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0x02, 0x00, 
ãmp
);

311 
ãmp
 = ((
mode
->
¸tc_hbœnk_íd
 >> 3) - 1) & 0x7f;

312 i‡(
ãmp
 & 0x20)

313 
jªg05
 |= 0x80;

314 i‡(
ãmp
 & 0x40)

315 
jªgAD
 |= 0x01;

316 
	`a°_£t_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0x03, 0xE0, (
ãmp
 & 0x1f));

318 
ãmp
 = ((
mode
->
¸tc_hsync_°¨t
-
¥eˇche
) >> 3) - 1;

319 i‡(
ãmp
 & 0x100)

320 
jªgAC
 |= 0x40;

321 
	`a°_£t_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0x04, 0x00, 
ãmp
);

323 
ãmp
 = (((
mode
->
¸tc_hsync_íd
-
¥eˇche
) >> 3) - 1) & 0x3f;

324 i‡(
ãmp
 & 0x20)

325 
jªgAD
 |= 0x04;

326 
	`a°_£t_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0x05, 0x60, (
u8
)((
ãmp
 & 0x1fË| 
jªg05
));

328 
	`a°_£t_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xAC, 0x00, 
jªgAC
);

329 
	`a°_£t_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xAD, 0x00, 
jªgAD
);

332 i‡((
a°
->
chù
 =
AST2600
Ë&& (
¸tc
->
mode
.
¸tc_vdi•œy
 == 1080))

333 
	`a°_£t_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xFC, 0xFD, 0x02);

335 
	`a°_£t_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xFC, 0xFD, 0x00);

338 
ãmp
 = (
mode
->
¸tc_vtŸÆ
) - 2;

339 i‡(
ãmp
 & 0x100)

340 
jªg07
 |= 0x01;

341 i‡(
ãmp
 & 0x200)

342 
jªg07
 |= 0x20;

343 i‡(
ãmp
 & 0x400)

344 
jªgAE
 |= 0x01;

345 
	`a°_£t_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0x06, 0x00, 
ãmp
);

347 
ãmp
 = (
mode
->
¸tc_vsync_°¨t
) - 1;

348 i‡(
ãmp
 & 0x100)

349 
jªg07
 |= 0x04;

350 i‡(
ãmp
 & 0x200)

351 
jªg07
 |= 0x80;

352 i‡(
ãmp
 & 0x400)

353 
jªgAE
 |= 0x08;

354 
	`a°_£t_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0x10, 0x00, 
ãmp
);

356 
ãmp
 = (
mode
->
¸tc_vsync_íd
 - 1) & 0x3f;

357 i‡(
ãmp
 & 0x10)

358 
jªgAE
 |= 0x20;

359 i‡(
ãmp
 & 0x20)

360 
jªgAE
 |= 0x40;

361 
	`a°_£t_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0x11, 0x70, 
ãmp
 & 0xf);

363 
ãmp
 = 
mode
->
¸tc_vdi•œy
 - 1;

364 i‡(
ãmp
 & 0x100)

365 
jªg07
 |= 0x02;

366 i‡(
ãmp
 & 0x200)

367 
jªg07
 |= 0x40;

368 i‡(
ãmp
 & 0x400)

369 
jªgAE
 |= 0x02;

370 
	`a°_£t_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0x12, 0x00, 
ãmp
);

372 
ãmp
 = 
mode
->
¸tc_vbœnk_°¨t
 - 1;

373 i‡(
ãmp
 & 0x100)

374 
jªg07
 |= 0x08;

375 i‡(
ãmp
 & 0x200)

376 
jªg09
 |= 0x20;

377 i‡(
ãmp
 & 0x400)

378 
jªgAE
 |= 0x04;

379 
	`a°_£t_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0x15, 0x00, 
ãmp
);

381 
ãmp
 = 
mode
->
¸tc_vbœnk_íd
 - 1;

382 i‡(
ãmp
 & 0x100)

383 
jªgAE
 |= 0x10;

384 
	`a°_£t_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0x16, 0x00, 
ãmp
);

386 
	`a°_£t_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0x07, 0x00, 
jªg07
);

387 
	`a°_£t_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0x09, 0xdf, 
jªg09
);

388 
	`a°_£t_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xAE, 0x00, (
jªgAE
 | 0x80));

390 i‡(
¥eˇche
)

391 
	`a°_£t_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xb6, 0x3f, 0x80);

393 
	`a°_£t_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xb6, 0x3f, 0x00);

395 
	`a°_£t_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0x11, 0x7f, 0x80);

396 
	}
}

398 
	$a°_£t_off£t_ªg
(
drm_¸tc
 *
¸tc
)

400 
a°_¥iv©e
 *
a°
 = 
¸tc
->
dev
->
dev_¥iv©e
;

401 c⁄° 
drm_‰amebuf„r
 *
fb
 = 
¸tc
->
¥im¨y
->fb;

403 
u16
 
off£t
;

405 
off£t
 = 
fb
->
pôches
[0] >> 3;

406 
	`a°_£t_ödex_ªg
(
a°
, 
AST_IO_CRTC_PORT
, 0x13, (
off£t
 & 0xff));

407 
	`a°_£t_ödex_ªg
(
a°
, 
AST_IO_CRTC_PORT
, 0xb0, (
off£t
 >> 8) & 0x3f);

408 
	}
}

410 
	$a°_£t_d˛k_ªg
(
drm_devi˚
 *
dev
, 
drm_di•œy_mode
 *
mode
,

411 
a°_vbios_mode_öfo
 *
vbios_mode
)

413 
a°_¥iv©e
 *
a°
 = 
dev
->
dev_¥iv©e
;

414 c⁄° 
a°_vbios_d˛k_öfo
 *
˛k_öfo
;

416 i‡((
a°
->
chù
 =
AST2500
Ë|| (a°->chù =
AST2600
))

418 i‡(
a°
->
RefCLK25MHz
)

419 
˛k_öfo
 = &
d˛k_èbÀ_a°2500_25MHz
[
vbios_mode
->
íh_èbÀ
->
d˛k_ödex
];

421 
˛k_öfo
 = &
d˛k_èbÀ_a°2500
[
vbios_mode
->
íh_èbÀ
->
d˛k_ödex
];

425 i‡(
a°
->
RefCLK25MHz
)

426 
˛k_öfo
 = &
d˛k_èbÀ_25MHz
[
vbios_mode
->
íh_èbÀ
->
d˛k_ödex
];

428 
˛k_öfo
 = &
d˛k_èbÀ
[
vbios_mode
->
íh_èbÀ
->
d˛k_ödex
];

431 
	`a°_£t_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xc0, 0x00, 
˛k_öfo
->
∑øm1
);

432 
	`a°_£t_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xc1, 0x00, 
˛k_öfo
->
∑øm2
);

433 
	`a°_£t_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xbb, 0x0f,

434 (
˛k_öfo
->
∑øm3
 & 0xc0) |

435 ((
˛k_öfo
->
∑øm3
 & 0x3) << 4));

436 
	}
}

438 
	$a°_£t_ext_ªg
(
drm_¸tc
 *
¸tc
, 
drm_di•œy_mode
 *
mode
,

439 
a°_vbios_mode_öfo
 *
vbios_mode
)

441 
a°_¥iv©e
 *
a°
 = 
¸tc
->
dev
->
dev_¥iv©e
;

442 c⁄° 
drm_‰amebuf„r
 *
fb
 = 
¸tc
->
¥im¨y
->fb;

443 
u8
 
jªgA0
 = 0, 
jªgA3
 = 0, 
jªgA8
 = 0;

445 
fb
->
f‹m©
->
˝p
[0] * 8) {

447 
jªgA0
 = 0x70;

448 
jªgA3
 = 0x01;

449 
jªgA8
 = 0x00;

453 
jªgA0
 = 0x70;

454 
jªgA3
 = 0x04;

455 
jªgA8
 = 0x02;

458 
jªgA0
 = 0x70;

459 
jªgA3
 = 0x08;

460 
jªgA8
 = 0x02;

464 
	`a°_£t_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xa0, 0x8f, 
jªgA0
);

465 
	`a°_£t_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xa3, 0xf0, 
jªgA3
);

466 
	`a°_£t_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xa8, 0xfd, 
jªgA8
);

469 if(
a°
->
chù
 =
AST2600
) {

470 
	`a°_£t_ödex_ªg
(
a°
, 
AST_IO_CRTC_PORT
, 0xa7, 0xe0);

471 
	`a°_£t_ödex_ªg
(
a°
, 
AST_IO_CRTC_PORT
, 0xa6, 0xa0);

472 } i‡(
a°
->
chù
 =
AST2300
 ||á°->chù =
AST2400
 ||á°->chù =
AST2500
 ||á°->chù =
AIP200
) {

473 
	`a°_£t_ödex_ªg
(
a°
, 
AST_IO_CRTC_PORT
, 0xa7, 0x78);

474 
	`a°_£t_ödex_ªg
(
a°
, 
AST_IO_CRTC_PORT
, 0xa6, 0x60);

475 } i‡(
a°
->
chù
 =
AST2100
 ||

476 
a°
->
chù
 =
AST1100
 ||

477 
a°
->
chù
 =
AST2200
 ||

478 
a°
->
chù
 =
AST2150
) {

479 
	`a°_£t_ödex_ªg
(
a°
, 
AST_IO_CRTC_PORT
, 0xa7, 0x3f);

480 
	`a°_£t_ödex_ªg
(
a°
, 
AST_IO_CRTC_PORT
, 0xa6, 0x2f);

482 
	`a°_£t_ödex_ªg
(
a°
, 
AST_IO_CRTC_PORT
, 0xa7, 0x2f);

483 
	`a°_£t_ödex_ªg
(
a°
, 
AST_IO_CRTC_PORT
, 0xa6, 0x1f);

485 
	}
}

487 
	$a°_£t_sync_ªg
(
drm_devi˚
 *
dev
, 
drm_di•œy_mode
 *
mode
,

488 
a°_vbios_mode_öfo
 *
vbios_mode
)

490 
a°_¥iv©e
 *
a°
 = 
dev
->
dev_¥iv©e
;

491 
u8
 
jªg
;

493 
jªg
 = 
	`a°_io_ªad8
(
a°
, 
AST_IO_MISC_PORT_READ
);

494 
jªg
 &= ~0xC0;

495 i‡(
vbios_mode
->
íh_èbÀ
->
Êags
 & 
NVSync
Ë
jªg
 |= 0x80;

496 i‡(
vbios_mode
->
íh_èbÀ
->
Êags
 & 
NHSync
Ë
jªg
 |= 0x40;

497 
	`a°_io_wrôe8
(
a°
, 
AST_IO_MISC_PORT_WRITE
, 
jªg
);

498 
	}
}

500 
boﬁ
 
	$a°_£t_dac_ªg
(
drm_¸tc
 *
¸tc
, 
drm_di•œy_mode
 *
mode
,

501 
a°_vbios_mode_öfo
 *
vbios_mode
)

503 c⁄° 
drm_‰amebuf„r
 *
fb
 = 
¸tc
->
¥im¨y
->fb;

505 
fb
->
f‹m©
->
˝p
[0] * 8) {

509 
	`a°_¸tc_lﬂd_lut
(
¸tc
);

510  
Ál£
;

512  
åue
;

513 
	}
}

515 
	$a°_£t_°¨t_addªss_¸t1
(
drm_¸tc
 *
¸tc
, 
off£t
)

517 
a°_¥iv©e
 *
a°
 = 
¸tc
->
dev
->
dev_¥iv©e
;

518 
u32
 
addr
;

520 
addr
 = 
off£t
 >> 2;

521 
	`a°_£t_ödex_ªg
(
a°
, 
AST_IO_CRTC_PORT
, 0x0d, (
u8
)(
addr
 & 0xff));

522 
	`a°_£t_ödex_ªg
(
a°
, 
AST_IO_CRTC_PORT
, 0x0c, (
u8
)((
addr
 >> 8) & 0xff));

523 
	`a°_£t_ödex_ªg
(
a°
, 
AST_IO_CRTC_PORT
, 0xaf, (
u8
)((
addr
 >> 16) & 0xff));

525 
	}
}

527 
	$a°_¸tc_dpms
(
drm_¸tc
 *
¸tc
, 
mode
)

529 
a°_¥iv©e
 *
a°
 = 
¸tc
->
dev
->
dev_¥iv©e
;

530 
u8
 
ch
 = 0x03;

532 i‡(
a°
->
chù
 =
AST1180
)

535 
mode
) {

536 
DRM_MODE_DPMS_ON
:

537 
	`a°_£t_ödex_ªg_mask
(
a°
, 
AST_IO_SEQ_PORT
, 0x01, 0xdf, 0);

538 
	`a°_£t_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xb6, 0xfc, 0);

539 i‡(
a°
->
tx_chù_ty≥
 =
AST_TX_DP501
)

540 
	`a°_£t_dp501_video_ouçut
(
¸tc
->
dev
, 1);

542 i‡(
a°
->
tx_chù_ty≥
 =
AST_TX_ASTDP
)

544 #ifde‡
DPC⁄åﬁPowî


545 
	`a°_dp_PowîOnOff
(
¸tc
->
dev
, 1);

547 
	`a°_waô_⁄e_vsync
(
a°
);

548 
	`a°_dp_SëOnOff
(
¸tc
->
dev
, 1);

551 
	`a°_¸tc_lﬂd_lut
(
¸tc
);

553 
DRM_MODE_DPMS_STANDBY
:

554 
ch
 = 0x01;

555 
DRM_MODE_DPMS_SUSPEND
:

556 
ch
 = 0x02;

557 
DRM_MODE_DPMS_OFF
:

558 i‡(
a°
->
tx_chù_ty≥
 =
AST_TX_DP501
)

559 
	`a°_£t_dp501_video_ouçut
(
¸tc
->
dev
, 0);

561 i‡(
a°
->
tx_chù_ty≥
 =
AST_TX_ASTDP
)

563 
	`a°_dp_SëOnOff
(
¸tc
->
dev
, 0);

564 #ifde‡
DPC⁄åﬁPowî


565 
	`a°_dp_PowîOnOff
(
¸tc
->
dev
, 0);

569 
	`a°_£t_ödex_ªg_mask
(
a°
, 
AST_IO_SEQ_PORT
, 0x01, 0xdf, 0x20);

570 
	`a°_£t_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xb6, 0xfc, 
ch
);

574 
	}
}

576 
	$a°_¸tc_do_£t_ba£
(
drm_¸tc
 *
¸tc
,

577 
drm_‰amebuf„r
 *
fb
,

578 
x
, 
y
, 
©omic
)

580 
drm_gem_vøm_obje˘
 *
gbo
;

581 
ªt
;

582 
s64
 
gpu_addr
;

584 i‡(!
©omic
 && 
fb
) {

585 
gbo
 = 
	`drm_gem_vøm_of_gem
(
fb
->
obj
[0]);

586 
	`drm_gem_vøm_u≈ö
(
gbo
);

589 
gbo
 = 
	`drm_gem_vøm_of_gem
(
¸tc
->
¥im¨y
->
fb
->
obj
[0]);

591 
ªt
 = 
	`drm_gem_vøm_pö
(
gbo
, 
DRM_GEM_VRAM_PL_FLAG_VRAM
);

592 i‡(
ªt
)

593  
ªt
;

594 
gpu_addr
 = 
	`drm_gem_vøm_off£t
(
gbo
);

595 i‡(
gpu_addr
 < 0) {

596 
ªt
 = ()
gpu_addr
;

597 
îr_drm_gem_vøm_u≈ö
;

600 
	`a°_£t_off£t_ªg
(
¸tc
);

601 
	`a°_£t_°¨t_addªss_¸t1
(
¸tc
, (
u32
)
gpu_addr
);

605 
îr_drm_gem_vøm_u≈ö
:

606 
	`drm_gem_vøm_u≈ö
(
gbo
);

607  
ªt
;

608 
	}
}

610 
	$a°_¸tc_mode_£t_ba£
(
drm_¸tc
 *
¸tc
, 
x
, 
y
,

611 
drm_‰amebuf„r
 *
ﬁd_fb
)

613  
	`a°_¸tc_do_£t_ba£
(
¸tc
, 
ﬁd_fb
, 
x
, 
y
, 0);

614 
	}
}

616 
	$a°_¸tc_mode_£t
(
drm_¸tc
 *
¸tc
,

617 
drm_di•œy_mode
 *
mode
,

618 
drm_di•œy_mode
 *
adju°ed_mode
,

619 
x
, 
y
,

620 
drm_‰amebuf„r
 *
ﬁd_fb
)

622 
drm_devi˚
 *
dev
 = 
¸tc
->dev;

623 
a°_¥iv©e
 *
a°
 = 
¸tc
->
dev
->
dev_¥iv©e
;

624 
a°_vbios_mode_öfo
 
vbios_mode
;

625 
boﬁ
 
ªt
;

626 i‡(
a°
->
chù
 =
AST1180
) {

627 
	`DRM_ERROR
("AST 1180 modesettingÇot supported\n");

628  -
EINVAL
;

631 
ªt
 = 
	`a°_gë_vbios_mode_öfo
(
¸tc
, 
mode
, 
adju°ed_mode
, &
vbios_mode
);

632 i‡(
ªt
 =
Ál£
)

633  -
EINVAL
;

634 
	`a°_›í_key
(
a°
);

636 
	`a°_£t_ödex_ªg
(
a°
, 
AST_IO_CRTC_PORT
, 0xa1, 0x06);

638 
	`a°_£t_°d_ªg
(
¸tc
, 
adju°ed_mode
, &
vbios_mode
);

639 
	`a°_£t_¸tc_ªg
(
¸tc
, 
adju°ed_mode
, &
vbios_mode
);

640 
	`a°_£t_off£t_ªg
(
¸tc
);

641 
	`a°_£t_d˛k_ªg
(
dev
, 
adju°ed_mode
, &
vbios_mode
);

642 
	`a°_£t_ext_ªg
(
¸tc
, 
adju°ed_mode
, &
vbios_mode
);

643 
	`a°_£t_sync_ªg
(
dev
, 
adju°ed_mode
, &
vbios_mode
);

644 
	`a°_£t_dac_ªg
(
¸tc
, 
adju°ed_mode
, &
vbios_mode
);

646 
	`a°_¸tc_mode_£t_ba£
(
¸tc
, 
x
, 
y
, 
ﬁd_fb
);

649 i‡(
a°
->
tx_chù_ty≥
 =
AST_TX_ASTDP
){

650 
	`a°_dp_SëOuçut
(
¸tc
, &
vbios_mode
);

651 }i‡(
a°
->
tx_chù_ty≥
 =
AST_TX_ITE66121
){

652 
	`a°_hdmi_£t_ouçut
(
dev
);

656 
	}
}

658 
	$a°_¸tc_dißbÀ
(
drm_¸tc
 *
¸tc
)

660 
	`DRM_DEBUG_KMS
("\n");

661 
	`a°_¸tc_dpms
(
¸tc
, 
DRM_MODE_DPMS_OFF
);

662 i‡(
¸tc
->
¥im¨y
->
fb
) {

663 
drm_‰amebuf„r
 *
fb
 = 
¸tc
->
¥im¨y
->fb;

664 
drm_gem_vøm_obje˘
 *
gbo
 =

665 
	`drm_gem_vøm_of_gem
(
fb
->
obj
[0]);

667 
	`drm_gem_vøm_u≈ö
(
gbo
);

669 
¸tc
->
¥im¨y
->
fb
 = 
NULL
;

670 
	}
}

672 
	$a°_¸tc_¥ï¨e
(
drm_¸tc
 *
¸tc
)

675 
	}
}

677 
	$a°_¸tc_commô
(
drm_¸tc
 *
¸tc
)

679 
	`a°_¸tc_dpms
(
¸tc
, 
DRM_MODE_DPMS_ON
);

680 
	}
}

683 c⁄° 
drm_¸tc_hñ≥r_funcs
 
	ga°_¸tc_hñ≥r_funcs
 = {

684 .
dpms
 = 
a°_¸tc_dpms
,

685 .
	gmode_£t
 = 
a°_¸tc_mode_£t
,

686 .
	gmode_£t_ba£
 = 
a°_¸tc_mode_£t_ba£
,

687 .
	gdißbÀ
 = 
a°_¸tc_dißbÀ
,

688 .
	g¥ï¨e
 = 
a°_¸tc_¥ï¨e
,

689 .
	gcommô
 = 
a°_¸tc_commô
,

693 
	$a°_¸tc_ª£t
(
drm_¸tc
 *
¸tc
)

696 
	}
}

698 
	$a°_¸tc_gamma_£t
(
drm_¸tc
 *
¸tc
, 
u16
 *
ªd
, u16 *
gªí
,

699 
u16
 *
blue
, 
uöt32_t
 
size
,

700 
drm_mode£t_acquúe_˘x
 *
˘x
)

702 
	`a°_¸tc_lﬂd_lut
(
¸tc
);

705 
	}
}

708 
	$a°_¸tc_de°roy
(
drm_¸tc
 *
¸tc
)

710 
	`drm_¸tc_˛ónup
(
¸tc
);

711 
	`k‰ì
(
¸tc
);

712 
	}
}

714 c⁄° 
drm_¸tc_funcs
 
	ga°_¸tc_funcs
 = {

715 .
curs‹_£t
 = 
a°_curs‹_£t
,

716 .
	gcurs‹_move
 = 
a°_curs‹_move
,

717 .
	gª£t
 = 
a°_¸tc_ª£t
,

718 .
	g£t_c⁄fig
 = 
drm_¸tc_hñ≥r_£t_c⁄fig
,

719 .
	ggamma_£t
 = 
a°_¸tc_gamma_£t
,

720 .
	gde°roy
 = 
a°_¸tc_de°roy
,

723 
	$a°_¸tc_öô
(
drm_devi˚
 *
dev
)

725 
a°_¸tc
 *
¸tc
;

727 
¸tc
 = 
	`kzÆloc
((
a°_¸tc
), 
GFP_KERNEL
);

728 i‡(!
¸tc
)

729  -
ENOMEM
;

731 
	`drm_¸tc_öô
(
dev
, &
¸tc
->
ba£
, &
a°_¸tc_funcs
);

732 
	`drm_mode_¸tc_£t_gamma_size
(&
¸tc
->
ba£
, 256);

733 
	`drm_¸tc_hñ≥r_add
(&
¸tc
->
ba£
, &
a°_¸tc_hñ≥r_funcs
);

735 
	}
}

737 
	$a°_ícodî_de°roy
(
drm_ícodî
 *
ícodî
)

739 
	`drm_ícodî_˛ónup
(
ícodî
);

740 
	`k‰ì
(
ícodî
);

741 
	}
}

744 
drm_ícodî
 *
	$a°_be°_sögÀ_ícodî
(
drm_c⁄√˘‹
 *
c⁄√˘‹
)

746 
íc_id
 = 
c⁄√˘‹
->
ícodî_ids
[0];

748 i‡(
íc_id
)

749  
	`drm_ícodî_föd
(
c⁄√˘‹
->
dev
, 
NULL
, 
íc_id
);

750  
NULL
;

751 
	}
}

754 c⁄° 
drm_ícodî_funcs
 
	ga°_íc_funcs
 = {

755 .
de°roy
 = 
a°_ícodî_de°roy
,

758 
	$a°_ícodî_dpms
(
drm_ícodî
 *
ícodî
, 
mode
)

761 
	}
}

763 
	$a°_ícodî_mode_£t
(
drm_ícodî
 *
ícodî
,

764 
drm_di•œy_mode
 *
mode
,

765 
drm_di•œy_mode
 *
adju°ed_mode
)

767 
	}
}

769 
	$a°_ícodî_¥ï¨e
(
drm_ícodî
 *
ícodî
)

772 
	}
}

774 
	$a°_ícodî_commô
(
drm_ícodî
 *
ícodî
)

777 
	}
}

780 c⁄° 
drm_ícodî_hñ≥r_funcs
 
	ga°_íc_hñ≥r_funcs
 = {

781 .
dpms
 = 
a°_ícodî_dpms
,

782 .
	g¥ï¨e
 = 
a°_ícodî_¥ï¨e
,

783 .
	gcommô
 = 
a°_ícodî_commô
,

784 .
	gmode_£t
 = 
a°_ícodî_mode_£t
,

787 
	$a°_ícodî_öô
(
drm_devi˚
 *
dev
)

789 
a°_ícodî
 *ast_encoder;

791 
a°_ícodî
 = 
	`kzÆloc
((a°_ícodî), 
GFP_KERNEL
);

792 i‡(!
a°_ícodî
)

793  -
ENOMEM
;

795 
	`drm_ícodî_öô
(
dev
, &
a°_ícodî
->
ba£
, &
a°_íc_funcs
,

796 
DRM_MODE_ENCODER_DAC
, 
NULL
);

797 
	`drm_ícodî_hñ≥r_add
(&
a°_ícodî
->
ba£
, &
a°_íc_hñ≥r_funcs
);

799 
a°_ícodî
->
ba£
.
possibÀ_¸tcs
 = 1;

801 
	}
}

803 
	$a°_gë_modes
(
drm_c⁄√˘‹
 *
c⁄√˘‹
)

805 
a°_c⁄√˘‹
 *a°_c⁄√˘‹ = 
	`to_a°_c⁄√˘‹
(
c⁄√˘‹
);

806 
a°_¥iv©e
 *
a°
 = 
c⁄√˘‹
->
dev
->
dev_¥iv©e
;

807 
edid
 *edid;

808 
ªt
;

809 
boﬁ
 
Êags
 = 
Ál£
;

810 i‡(
a°
->
tx_chù_ty≥
 =
AST_TX_DP501
) {

811 
a°
->
dp501_max˛k
 = 0xff;

812 
edid
 = 
	`kmÆloc
(128, 
GFP_KERNEL
);

813 i‡(!
edid
)

814  -
ENOMEM
;

816 
Êags
 = 
	`a°_dp501_ªad_edid
(
c⁄√˘‹
->
dev
, (
u8
 *)
edid
);

817 i‡(
Êags
)

818 
a°
->
dp501_max˛k
 = 
	`a°_gë_dp501_max_˛k
(
c⁄√˘‹
->
dev
);

820 
	`k‰ì
(
edid
);

822 i‡(
a°
->
tx_chù_ty≥
 =
AST_TX_ITE66121
) {

823 
edid
 = 
	`kmÆloc
(256, 
GFP_KERNEL
);

824 
	`a°_hdmi_ªad_edid
(
c⁄√˘‹
->
dev
, (
u8
 *)
edid
);

826 i‡(
a°
->
tx_chù_ty≥
 =
AST_TX_ASTDP
) {

827 
edid
 = 
	`kmÆloc
(256, 
GFP_KERNEL
);

828 i‡(!
edid
)

829  -
ENOMEM
;

831 
Êags
 = 
	`a°_dp_ªad_edid
(
c⁄√˘‹
->
dev
, (
u8
 *)
edid
);

832 i‡(!
Êags
)

834 
	`DRM_INFO
("ReadEDID_AspeedDP(!flags)\n");

835 
	`k‰ì
(
edid
);

839 i‡(!
Êags
)

840 
edid
 = 
	`drm_gë_edid
(
c⁄√˘‹
, &
a°_c⁄√˘‹
->
i2c
->
ad≠ãr
);

841 i‡(
edid
) {

842 
	`drm_c⁄√˘‹_upd©e_edid_¥›îty
(&
a°_c⁄√˘‹
->
ba£
, 
edid
);

843 
ªt
 = 
	`drm_add_edid_modes
(
c⁄√˘‹
, 
edid
);

844 
	`k‰ì
(
edid
);

845  
ªt
;

847 
	`drm_c⁄√˘‹_upd©e_edid_¥›îty
(&
a°_c⁄√˘‹
->
ba£
, 
NULL
);

849 
	}
}

851 
drm_mode_°©us
 
	$a°_mode_vÆid
(
drm_c⁄√˘‹
 *
c⁄√˘‹
,

852 
drm_di•œy_mode
 *
mode
)

854 
a°_¥iv©e
 *
a°
 = 
c⁄√˘‹
->
dev
->
dev_¥iv©e
;

855 
Êags
 = 
MODE_NOMODE
;

856 
uöt32_t
 
jãmp
;

858 i‡(
a°
->
suµ‹t_√wvga_mode
) {

859 i‡((
mode
->
hdi•œy
 =1152Ë&& (mode->
vdi•œy
 == 864))

860  
MODE_OK
;

862 i‡((
a°
->
suµ‹t_wide_s¸ìn
Ë&& (a°->
suµ‹t_√wvga_mode
)) {

863 i‡((
mode
->
hdi•œy
 =1680Ë&& (mode->
vdi•œy
 == 1050))

864  
MODE_OK
;

865 i‡((
mode
->
hdi•œy
 =1280Ë&& (mode->
vdi•œy
 == 800))

866  
MODE_OK
;

867 i‡((
mode
->
hdi•œy
 =1440Ë&& (mode->
vdi•œy
 == 900))

868  
MODE_OK
;

869 i‡((
mode
->
hdi•œy
 =1360Ë&& (mode->
vdi•œy
 == 768))

870  
MODE_OK
;

871 i‡((
mode
->
hdi•œy
 =1600Ë&& (mode->
vdi•œy
 == 900))

872  
MODE_OK
;

874 i‡((
a°
->
chù
 =
AST2100
Ë|| (a°->chù =
AST2200
Ë|| (a°->chù =
AST2300
Ë|| (a°->chù =
AST2400
Ë|| (a°->chù =
AST2500
Ë|| (a°->chù =
AST2600
Ë|| (a°->chù =
AST1180
Ë||á°->chù =
AIP200
) {

875 i‡((
mode
->
hdi•œy
 =1920Ë&& (mode->
vdi•œy
 == 1080))

876  
MODE_OK
;

878 i‡((
mode
->
hdi•œy
 =1920Ë&& (mode->
vdi•œy
 == 1200)) {

879 
jãmp
 = 
	`a°_gë_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xd1, 0xff);

880 i‡(
jãmp
 & 0x01)

881  
MODE_NOMODE
;

883  
MODE_OK
;

887 
mode
->
hdi•œy
) {

889 i‡(
mode
->
vdi•œy
 =480Ë
Êags
 = 
MODE_OK
;

892 i‡(
mode
->
vdi•œy
 =600Ë
Êags
 = 
MODE_OK
;

895 i‡(
mode
->
vdi•œy
 =768Ë
Êags
 = 
MODE_OK
;

898 i‡(
mode
->
vdi•œy
 =1024Ë
Êags
 = 
MODE_OK
;

901 i‡(
mode
->
vdi•œy
 =1200Ë
Êags
 = 
MODE_OK
;

904  
Êags
;

907  
Êags
;

908 
	}
}

910 
	$a°_c⁄√˘‹_de°roy
(
drm_c⁄√˘‹
 *
c⁄√˘‹
)

912 
a°_c⁄√˘‹
 *a°_c⁄√˘‹ = 
	`to_a°_c⁄√˘‹
(
c⁄√˘‹
);

913 
	`a°_i2c_de°roy
(
a°_c⁄√˘‹
->
i2c
);

914 
	`drm_c⁄√˘‹_uƒegi°î
(
c⁄√˘‹
);

915 
	`drm_c⁄√˘‹_˛ónup
(
c⁄√˘‹
);

916 
	`k‰ì
(
c⁄√˘‹
);

917 
	}
}

919 c⁄° 
drm_c⁄√˘‹_hñ≥r_funcs
 
	ga°_c⁄√˘‹_hñ≥r_funcs
 = {

920 .
mode_vÆid
 = 
a°_mode_vÆid
,

921 .
	ggë_modes
 = 
a°_gë_modes
,

922 .
	gbe°_ícodî
 = 
a°_be°_sögÀ_ícodî
,

925 c⁄° 
drm_c⁄√˘‹_funcs
 
	ga°_c⁄√˘‹_funcs
 = {

926 .
dpms
 = 
drm_hñ≥r_c⁄√˘‹_dpms
,

927 .
	gfûl_modes
 = 
drm_hñ≥r_¥obe_sögÀ_c⁄√˘‹_modes
,

928 .
	gde°roy
 = 
a°_c⁄√˘‹_de°roy
,

931 
	$a°_c⁄√˘‹_öô
(
drm_devi˚
 *
dev
)

933 
a°_c⁄√˘‹
 *ast_connector;

934 
drm_c⁄√˘‹
 *
c⁄√˘‹
;

935 
drm_ícodî
 *
ícodî
;

937 
a°_c⁄√˘‹
 = 
	`kzÆloc
((a°_c⁄√˘‹), 
GFP_KERNEL
);

938 i‡(!
a°_c⁄√˘‹
)

939  -
ENOMEM
;

941 
c⁄√˘‹
 = &
a°_c⁄√˘‹
->
ba£
;

942 
a°_c⁄√˘‹
->
i2c
 = 
	`a°_i2c_¸óã
(
dev
);

943 i‡(!
a°_c⁄√˘‹
->
i2c
)

944 
	`DRM_ERROR
("failedÅoádd ddc bus for connector\n");

946 
	`drm_c⁄√˘‹_öô_wôh_ddc
(
dev
, 
c⁄√˘‹
,

947 &
a°_c⁄√˘‹_funcs
,

948 
DRM_MODE_CONNECTOR_VGA
,

949 &
a°_c⁄√˘‹
->
i2c
->
ad≠ãr
);

951 
	`drm_c⁄√˘‹_hñ≥r_add
(
c⁄√˘‹
, &
a°_c⁄√˘‹_hñ≥r_funcs
);

953 
c⁄√˘‹
->
öãæa˚_Ælowed
 = 0;

954 
c⁄√˘‹
->
doubÀsˇn_Ælowed
 = 0;

956 
	`drm_c⁄√˘‹_ªgi°î
(
c⁄√˘‹
);

958 
c⁄√˘‹
->
pﬁÀd
 = 
DRM_CONNECTOR_POLL_CONNECT
;

960 
ícodî
 = 
	`li°_fú°_íåy
(&
dev
->
mode_c⁄fig
.
ícodî_li°
, 
drm_ícodî
, 
hód
);

961 
	`drm_c⁄√˘‹_©èch_ícodî
(
c⁄√˘‹
, 
ícodî
);

964 
	}
}

967 
	$a°_curs‹_öô
(
drm_devi˚
 *
dev
)

969 
a°_¥iv©e
 *
a°
 = 
dev
->
dev_¥iv©e
;

970 
size
;

971 
ªt
;

972 
drm_gem_obje˘
 *
obj
;

973 
drm_gem_vøm_obje˘
 *
gbo
;

974 
s64
 
gpu_addr
;

975 *
ba£
;

977 
size
 = (
AST_HWC_SIZE
 + 
AST_HWC_SIGNATURE_SIZE
Ë* 
AST_DEFAULT_HWC_NUM
;

979 
ªt
 = 
	`a°_gem_¸óã
(
dev
, 
size
, 
åue
, &
obj
);

980 i‡(
ªt
)

981  
ªt
;

982 
gbo
 = 
	`drm_gem_vøm_of_gem
(
obj
);

983 
ªt
 = 
	`drm_gem_vøm_pö
(
gbo
, 
DRM_GEM_VRAM_PL_FLAG_VRAM
);

984 i‡(
ªt
)

985 
Áû
;

986 
gpu_addr
 = 
	`drm_gem_vøm_off£t
(
gbo
);

987 i‡(
gpu_addr
 < 0) {

988 
	`drm_gem_vøm_u≈ö
(
gbo
);

989 
ªt
 = ()
gpu_addr
;

990 
Áû
;

994 
ba£
 = 
	`drm_gem_vøm_km≠
(
gbo
, 
åue
, 
NULL
);

995 i‡(
	`IS_ERR
(
ba£
)) {

996 
ªt
 = 
	`PTR_ERR
(
ba£
);

997 
Áû
;

1000 
a°
->
curs‹_ˇche
 = 
obj
;

1002 
Áû
:

1003  
ªt
;

1004 
	}
}

1006 
	$a°_curs‹_föi
(
drm_devi˚
 *
dev
)

1008 
a°_¥iv©e
 *
a°
 = 
dev
->
dev_¥iv©e
;

1009 
drm_gem_vøm_obje˘
 *
gbo
 =

1010 
	`drm_gem_vøm_of_gem
(
a°
->
curs‹_ˇche
);

1011 
	`drm_gem_vøm_kunm≠
(
gbo
);

1012 
	`drm_gem_vøm_u≈ö
(
gbo
);

1013 
	`drm_gem_obje˘_put_u∆ocked
(
a°
->
curs‹_ˇche
);

1014 
	}
}

1016 
	$a°_mode_öô
(
drm_devi˚
 *
dev
)

1018 
	`a°_curs‹_öô
(
dev
);

1019 
	`a°_¸tc_öô
(
dev
);

1020 
	`a°_ícodî_öô
(
dev
);

1021 
	`a°_c⁄√˘‹_öô
(
dev
);

1023 
	}
}

1025 
	$a°_mode_föi
(
drm_devi˚
 *
dev
)

1027 
	`a°_curs‹_föi
(
dev
);

1028 
	}
}

1030 
	$gë_˛ock
(*
i2c_¥iv
)

1032 
a°_i2c_ch™
 *
i2c
 = 
i2c_¥iv
;

1033 
a°_¥iv©e
 *
a°
 = 
i2c
->
dev
->
dev_¥iv©e
;

1034 vﬁ©ûê
uöt32_t
 
vÆ
, 
vÆ2
, 
cou¡
, 
∑ss
;

1036 
cou¡
 = 0;

1037 
∑ss
 = 0;

1038 
vÆ
 = (
	`a°_gë_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xb7, 0x10) >> 4) & 0x01;

1040 
vÆ2
 = (
	`a°_gë_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xb7, 0x10) >> 4) & 0x01;

1041 i‡(
vÆ
 =
vÆ2
Ë
∑ss
++;

1043 
∑ss
 = 0;

1044 
vÆ
 = (
	`a°_gë_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xb7, 0x10) >> 4) & 0x01;

1046 } (
∑ss
 < 5Ë&& (
cou¡
++ < 0x10000));

1048  
vÆ
 & 1 ? 1 : 0;

1049 
	}
}

1051 
	$gë_d©a
(*
i2c_¥iv
)

1053 
a°_i2c_ch™
 *
i2c
 = 
i2c_¥iv
;

1054 
a°_¥iv©e
 *
a°
 = 
i2c
->
dev
->
dev_¥iv©e
;

1055 vﬁ©ûê
uöt32_t
 
vÆ
, 
vÆ2
, 
cou¡
, 
∑ss
;

1057 
cou¡
 = 0;

1058 
∑ss
 = 0;

1059 
vÆ
 = (
	`a°_gë_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xb7, 0x20) >> 5) & 0x01;

1061 
vÆ2
 = (
	`a°_gë_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xb7, 0x20) >> 5) & 0x01;

1062 i‡(
vÆ
 =
vÆ2
Ë
∑ss
++;

1064 
∑ss
 = 0;

1065 
vÆ
 = (
	`a°_gë_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xb7, 0x20) >> 5) & 0x01;

1067 } (
∑ss
 < 5Ë&& (
cou¡
++ < 0x10000));

1069  
vÆ
 & 1 ? 1 : 0;

1070 
	}
}

1072 
	$£t_˛ock
(*
i2c_¥iv
, 
˛ock
)

1074 
a°_i2c_ch™
 *
i2c
 = 
i2c_¥iv
;

1075 
a°_¥iv©e
 *
a°
 = 
i2c
->
dev
->
dev_¥iv©e
;

1076 
i
;

1077 
u8
 
uj¸b7
, 
jãmp
;

1079 
i
 = 0; i < 0x10000; i++) {

1080 
uj¸b7
 = ((
˛ock
 & 0x01) ? 0 : 1);

1081 
	`a°_£t_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xb7, 0xf4, 
uj¸b7
);

1082 
jãmp
 = 
	`a°_gë_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xb7, 0x01);

1083 i‡(
uj¸b7
 =
jãmp
)

1086 
	}
}

1088 
	$£t_d©a
(*
i2c_¥iv
, 
d©a
)

1090 
a°_i2c_ch™
 *
i2c
 = 
i2c_¥iv
;

1091 
a°_¥iv©e
 *
a°
 = 
i2c
->
dev
->
dev_¥iv©e
;

1092 
i
;

1093 
u8
 
uj¸b7
, 
jãmp
;

1095 
i
 = 0; i < 0x10000; i++) {

1096 
uj¸b7
 = ((
d©a
 & 0x01) ? 0 : 1) << 2;

1097 
	`a°_£t_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xb7, 0xf1, 
uj¸b7
);

1098 
jãmp
 = 
	`a°_gë_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xb7, 0x04);

1099 i‡(
uj¸b7
 =
jãmp
)

1102 
	}
}

1104 
a°_i2c_ch™
 *
	$a°_i2c_¸óã
(
drm_devi˚
 *
dev
)

1106 
a°_i2c_ch™
 *
i2c
;

1107 
ªt
;

1109 
i2c
 = 
	`kzÆloc
((
a°_i2c_ch™
), 
GFP_KERNEL
);

1110 i‡(!
i2c
)

1111  
NULL
;

1113 
i2c
->
ad≠ãr
.
ow√r
 = 
THIS_MODULE
;

1114 
i2c
->
ad≠ãr
.
˛ass
 = 
I2C_CLASS_DDC
;

1115 
i2c
->
ad≠ãr
.
dev
.
∑ª¡
 = &dev->
pdev
->dev;

1116 
i2c
->
dev
 = dev;

1117 
	`i2c_£t_ad≠d©a
(&
i2c
->
ad≠ãr
, i2c);

1118 
	`¢¥ötf
(
i2c
->
ad≠ãr
.
«me
, (i2c->adapter.name),

1120 
i2c
->
ad≠ãr
.
Ægo_d©a
 = &i2c->
bô
;

1122 
i2c
->
bô
.
udñay
 = 20;

1123 
i2c
->
bô
.
timeout
 = 2;

1124 
i2c
->
bô
.
d©a
 = i2c;

1125 
i2c
->
bô
.
£tsda
 = 
£t_d©a
;

1126 
i2c
->
bô
.
£ts˛
 = 
£t_˛ock
;

1127 
i2c
->
bô
.
gësda
 = 
gë_d©a
;

1128 
i2c
->
bô
.
gës˛
 = 
gë_˛ock
;

1129 
ªt
 = 
	`i2c_bô_add_bus
(&
i2c
->
ad≠ãr
);

1130 i‡(
ªt
) {

1131 
	`DRM_ERROR
("FailedÅoÑegister bit i2c\n");

1132 
out_‰ì
;

1135  
i2c
;

1136 
out_‰ì
:

1137 
	`k‰ì
(
i2c
);

1138  
NULL
;

1139 
	}
}

1141 
	$a°_i2c_de°roy
(
a°_i2c_ch™
 *
i2c
)

1143 i‡(!
i2c
)

1145 
	`i2c_dñ_ad≠ãr
(&
i2c
->
ad≠ãr
);

1146 
	`k‰ì
(
i2c
);

1147 
	}
}

1149 
	$a°_show_curs‹
(
drm_¸tc
 *
¸tc
)

1151 
a°_¥iv©e
 *
a°
 = 
¸tc
->
dev
->
dev_¥iv©e
;

1152 
u8
 
jªg
;

1154 
jªg
 = 0x2;

1156 
jªg
 |= 1;

1157 
	`a°_£t_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xcb, 0xfc, 
jªg
);

1158 
	}
}

1160 
	$a°_hide_curs‹
(
drm_¸tc
 *
¸tc
)

1162 
a°_¥iv©e
 *
a°
 = 
¸tc
->
dev
->
dev_¥iv©e
;

1163 
	`a°_£t_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xcb, 0xfc, 0x00);

1164 
	}
}

1166 
u32
 
	$c›y_curs‹_image
(
u8
 *
§c
, u8 *
d°
, 
width
, 
height
)

1169 
u32
 
ul
;

1170 
u8
 
b
[4];

1171 } 
§cd©a32
[2], 
d©a32
;

1173 
u16
 
us
;

1174 
u8
 
b
[2];

1175 } 
d©a16
;

1176 
u32
 
csum
 = 0;

1177 
s32
 
Æpha_d°_dñè
, 
œ°_Æpha_d°_dñè
;

1178 
u8
 *
§cx‹
, *
d°x‹
;

1179 
i
, 
j
;

1180 
u32
 
≥r_pixñ_c›y
, 
two_pixñ_c›y
;

1182 
Æpha_d°_dñè
 = 
AST_MAX_HWC_WIDTH
 << 1;

1183 
œ°_Æpha_d°_dñè
 = 
Æpha_d°_dñè
 - (
width
 << 1);

1185 
§cx‹
 = 
§c
;

1186 
d°x‹
 = (
u8
 *)
d°
 + 
œ°_Æpha_d°_dñè
 + (
AST_MAX_HWC_HEIGHT
 - 
height
Ë* 
Æpha_d°_dñè
;

1187 
≥r_pixñ_c›y
 = 
width
 & 1;

1188 
two_pixñ_c›y
 = 
width
 >> 1;

1190 
j
 = 0; j < 
height
; j++) {

1191 
i
 = 0; i < 
two_pixñ_c›y
; i++) {

1192 
§cd©a32
[0].
ul
 = *((
u32
 *)
§cx‹
) & 0xf0f0f0f0;

1193 
§cd©a32
[1].
ul
 = *((
u32
 *)(
§cx‹
 + 4)) & 0xf0f0f0f0;

1194 
d©a32
.
b
[0] = 
§cd©a32
[0].b[1] | (srcdata32[0].b[0] >> 4);

1195 
d©a32
.
b
[1] = 
§cd©a32
[0].b[3] | (srcdata32[0].b[2] >> 4);

1196 
d©a32
.
b
[2] = 
§cd©a32
[1].b[1] | (srcdata32[1].b[0] >> 4);

1197 
d©a32
.
b
[3] = 
§cd©a32
[1].b[3] | (srcdata32[1].b[2] >> 4);

1199 
	`wrôñ
(
d©a32
.
ul
, 
d°x‹
);

1200 
csum
 +
d©a32
.
ul
;

1202 
d°x‹
 += 4;

1203 
§cx‹
 += 8;

1207 
i
 = 0; i < 
≥r_pixñ_c›y
; i++) {

1208 
§cd©a32
[0].
ul
 = *((
u32
 *)
§cx‹
) & 0xf0f0f0f0;

1209 
d©a16
.
b
[0] = 
§cd©a32
[0].b[1] | (srcdata32[0].b[0] >> 4);

1210 
d©a16
.
b
[1] = 
§cd©a32
[0].b[3] | (srcdata32[0].b[2] >> 4);

1211 
	`wrôew
(
d©a16
.
us
, 
d°x‹
);

1212 
csum
 +(
u32
)
d©a16
.
us
;

1214 
d°x‹
 += 2;

1215 
§cx‹
 += 4;

1217 
d°x‹
 +
œ°_Æpha_d°_dñè
;

1219  
csum
;

1220 
	}
}

1222 
	$a°_curs‹_£t
(
drm_¸tc
 *
¸tc
,

1223 
drm_fûe
 *
fûe_¥iv
,

1224 
uöt32_t
 
h™dÀ
,

1225 
uöt32_t
 
width
,

1226 
uöt32_t
 
height
)

1228 
a°_¥iv©e
 *
a°
 = 
¸tc
->
dev
->
dev_¥iv©e
;

1229 
a°_¸tc
 *a°_¸t¯
	`to_a°_¸tc
(
¸tc
);

1230 
drm_gem_obje˘
 *
obj
;

1231 
drm_gem_vøm_obje˘
 *
gbo
;

1232 
s64
 
d°_gpu
;

1233 
u64
 
gpu_addr
;

1234 
u32
 
csum
;

1235 
ªt
;

1236 
u8
 *
§c
, *
d°
;

1238 i‡(!
h™dÀ
) {

1239 
	`a°_hide_curs‹
(
¸tc
);

1243 i‡(
width
 > 
AST_MAX_HWC_WIDTH
 || 
height
 > 
AST_MAX_HWC_HEIGHT
)

1244  -
EINVAL
;

1246 
obj
 = 
	`drm_gem_obje˘_lookup
(
fûe_¥iv
, 
h™dÀ
);

1247 i‡(!
obj
) {

1248 
	`DRM_ERROR
("C™nŸ föd curs‹ obje˘ %x f‹ cπc\n", 
h™dÀ
);

1249  -
ENOENT
;

1251 
gbo
 = 
	`drm_gem_vøm_of_gem
(
obj
);

1253 
ªt
 = 
	`drm_gem_vøm_pö
(
gbo
, 0);

1254 i‡(
ªt
)

1255 
îr_drm_gem_obje˘_put_u∆ocked
;

1256 
§c
 = 
	`drm_gem_vøm_km≠
(
gbo
, 
åue
, 
NULL
);

1257 i‡(
	`IS_ERR
(
§c
)) {

1258 
ªt
 = 
	`PTR_ERR
(
§c
);

1259 
îr_drm_gem_vøm_u≈ö
;

1262 
d°
 = 
	`drm_gem_vøm_km≠
(
	`drm_gem_vøm_of_gem
(
a°
->
curs‹_ˇche
),

1263 
Ál£
, 
NULL
);

1264 i‡(
	`IS_ERR
(
d°
)) {

1265 
ªt
 = 
	`PTR_ERR
(
d°
);

1266 
îr_drm_gem_vøm_kunm≠
;

1268 
d°_gpu
 = 
	`drm_gem_vøm_off£t
(
	`drm_gem_vøm_of_gem
(
a°
->
curs‹_ˇche
));

1269 i‡(
d°_gpu
 < 0) {

1270 
ªt
 = ()
d°_gpu
;

1271 
îr_drm_gem_vøm_kunm≠
;

1274 
d°
 +(
AST_HWC_SIZE
 + 
AST_HWC_SIGNATURE_SIZE
)*
a°
->
√xt_curs‹
;

1277 
csum
 = 
	`c›y_curs‹_image
(
§c
, 
d°
, 
width
, 
height
);

1281 
drm_gem_vøm_obje˘
 *
d°_gbo
 =

1282 
	`drm_gem_vøm_of_gem
(
a°
->
curs‹_ˇche
);

1283 
u8
 *
d°
 = 
	`drm_gem_vøm_km≠
(
d°_gbo
, 
Ál£
, 
NULL
);

1284 
d°
 +(
AST_HWC_SIZE
 + 
AST_HWC_SIGNATURE_SIZE
)*
a°
->
√xt_curs‹
 + AST_HWC_SIZE;

1285 
	`wrôñ
(
csum
, 
d°
);

1286 
	`wrôñ
(
width
, 
d°
 + 
AST_HWC_SIGNATURE_SizeX
);

1287 
	`wrôñ
(
height
, 
d°
 + 
AST_HWC_SIGNATURE_SizeY
);

1288 
	`wrôñ
(0, 
d°
 + 
AST_HWC_SIGNATURE_HOTSPOTX
);

1289 
	`wrôñ
(0, 
d°
 + 
AST_HWC_SIGNATURE_HOTSPOTY
);

1292 
gpu_addr
 = (
u64
)
d°_gpu
;

1293 
gpu_addr
 +(
AST_HWC_SIZE
 + 
AST_HWC_SIGNATURE_SIZE
)*
a°
->
√xt_curs‹
;

1294 
gpu_addr
 >>= 3;

1295 
	`a°_£t_ödex_ªg
(
a°
, 
AST_IO_CRTC_PORT
, 0xc8, 
gpu_addr
 & 0xff);

1296 
	`a°_£t_ödex_ªg
(
a°
, 
AST_IO_CRTC_PORT
, 0xc9, (
gpu_addr
 >> 8) & 0xff);

1297 
	`a°_£t_ödex_ªg
(
a°
, 
AST_IO_CRTC_PORT
, 0xˇ, (
gpu_addr
 >> 16) & 0xff);

1299 
a°_¸tc
->
off£t_x
 = 
AST_MAX_HWC_WIDTH
 - 
width
;

1300 
a°_¸tc
->
off£t_y
 = 
AST_MAX_HWC_WIDTH
 - 
height
;

1302 
a°
->
√xt_curs‹
 = (a°->√xt_curs‹ + 1Ë% 
AST_DEFAULT_HWC_NUM
;

1304 
	`a°_show_curs‹
(
¸tc
);

1306 
	`drm_gem_vøm_kunm≠
(
gbo
);

1307 
	`drm_gem_vøm_u≈ö
(
gbo
);

1308 
	`drm_gem_obje˘_put_u∆ocked
(
obj
);

1312 
îr_drm_gem_vøm_kunm≠
:

1313 
	`drm_gem_vøm_kunm≠
(
gbo
);

1314 
îr_drm_gem_vøm_u≈ö
:

1315 
	`drm_gem_vøm_u≈ö
(
gbo
);

1316 
îr_drm_gem_obje˘_put_u∆ocked
:

1317 
	`drm_gem_obje˘_put_u∆ocked
(
obj
);

1318  
ªt
;

1319 
	}
}

1321 
	$a°_curs‹_move
(
drm_¸tc
 *
¸tc
,

1322 
x
, 
y
)

1324 
a°_¸tc
 *a°_¸t¯
	`to_a°_¸tc
(
¸tc
);

1325 
a°_¥iv©e
 *
a°
 = 
¸tc
->
dev
->
dev_¥iv©e
;

1326 
x_off£t
, 
y_off£t
;

1327 
u8
 *
sig
;

1329 
sig
 = 
	`drm_gem_vøm_km≠
(
	`drm_gem_vøm_of_gem
(
a°
->
curs‹_ˇche
),

1330 
Ál£
, 
NULL
);

1331 
sig
 +(
AST_HWC_SIZE
 + 
AST_HWC_SIGNATURE_SIZE
)*
a°
->
√xt_curs‹
 + AST_HWC_SIZE;

1332 
	`wrôñ
(
x
, 
sig
 + 
AST_HWC_SIGNATURE_X
);

1333 
	`wrôñ
(
y
, 
sig
 + 
AST_HWC_SIGNATURE_Y
);

1335 
x_off£t
 = 
a°_¸tc
->
off£t_x
;

1336 
y_off£t
 = 
a°_¸tc
->
off£t_y
;

1337 i‡(
x
 < 0) {

1338 
x_off£t
 = (-
x
Ë+ 
a°_¸tc
->
off£t_x
;

1339 
x
 = 0;

1342 i‡(
y
 < 0) {

1343 
y_off£t
 = (-
y
Ë+ 
a°_¸tc
->
off£t_y
;

1344 
y
 = 0;

1346 
	`a°_£t_ödex_ªg
(
a°
, 
AST_IO_CRTC_PORT
, 0xc2, 
x_off£t
);

1347 
	`a°_£t_ödex_ªg
(
a°
, 
AST_IO_CRTC_PORT
, 0xc3, 
y_off£t
);

1348 
	`a°_£t_ödex_ªg
(
a°
, 
AST_IO_CRTC_PORT
, 0xc4, (
x
 & 0xff));

1349 
	`a°_£t_ödex_ªg
(
a°
, 
AST_IO_CRTC_PORT
, 0xc5, ((
x
 >> 8) & 0x0f));

1350 
	`a°_£t_ödex_ªg
(
a°
, 
AST_IO_CRTC_PORT
, 0xc6, (
y
 & 0xff));

1351 
	`a°_£t_ödex_ªg
(
a°
, 
AST_IO_CRTC_PORT
, 0xc7, ((
y
 >> 8) & 0x07));

1354 
	`a°_show_curs‹
(
¸tc
);

1357 
	}
}

	@/mnt/d/Src/DRM/sources/src504/ast_post.c

29 
	~<löux/dñay.h
>

30 
	~<löux/pci.h
>

32 
	~<drm/drm_¥öt.h
>

34 
	~"a°_døm_èbÀs.h
"

35 
	~"a°_drv.h
"

37 
a°_po°_chù_2300
(
drm_devi˚
 *
dev
);

38 
a°_po°_chù_2500
(
drm_devi˚
 *
dev
);

40 
	$a°_íabÀ_vga
(
drm_devi˚
 *
dev
)

42 
a°_¥iv©e
 *
a°
 = 
dev
->
dev_¥iv©e
;

43 
u8
 
ch
;

45 
	`a°_io_wrôe8
(
a°
, 
AST_IO_VGA_ENABLE_PORT
, 0x01);

46 
ch
 = 
	`a°_io_ªad8
(
a°
, 
AST_IO_MISC_PORT_READ
);

47 
	`a°_io_wrôe8
(
a°
, 
AST_IO_MISC_PORT_WRITE
, 
ch
 | 0x01);

48 
	}
}

50 
	$a°_íabÀ_mmio
(
drm_devi˚
 *
dev
)

52 
a°_¥iv©e
 *
a°
 = 
dev
->
dev_¥iv©e
;

54 
	`a°_£t_ödex_ªg
(
a°
, 
AST_IO_CRTC_PORT
, 0xa1, 0x06);

55 
	}
}

58 
boﬁ
 
	$a°_is_vga_íabÀd
(
drm_devi˚
 *
dev
)

60 
a°_¥iv©e
 *
a°
 = 
dev
->
dev_¥iv©e
;

61 
u8
 
ch
;

63 i‡(
a°
->
chù
 =
AST1180
) {

66 
ch
 = 
	`a°_io_ªad8
(
a°
, 
AST_IO_VGA_ENABLE_PORT
);

67  !!(
ch
 & 0x01);

69  
Ál£
;

70 
	}
}

72 c⁄° 
u8
 
	gexåegöfo
[] = { 0x0f, 0x04, 0x1c, 0xff };

73 c⁄° 
u8
 
	gexåegöfo_a°2300a0
[] = { 0x0f, 0x04, 0x1c, 0xff };

74 c⁄° 
u8
 
	gexåegöfo_a°2300
[] = { 0x0f, 0x04, 0x1f, 0xff };

77 
	$a°_£t_def_ext_ªg
(
drm_devi˚
 *
dev
)

79 
a°_¥iv©e
 *
a°
 = 
dev
->
dev_¥iv©e
;

80 
u8
 
i
, 
ödex
, 
ªg
;

81 c⁄° 
u8
 *
ext_ªg_öfo
;

84 
i
 = 0x81; i <= 0x9f; i++)

85 
	`a°_£t_ödex_ªg
(
a°
, 
AST_IO_CRTC_PORT
, 
i
, 0x00);

87 i‡(
a°
->
chù
 =
AST2300
 ||á°->chù =
AST2400
 ||á°->chù =
AST2500
 ||á°->chù =
AST2600
 ||á°->chù =
AIP200
) {

88 i‡(
dev
->
pdev
->
ªvisi⁄
 >= 0x20)

89 
ext_ªg_öfo
 = 
exåegöfo_a°2300
;

91 
ext_ªg_öfo
 = 
exåegöfo_a°2300a0
;

93 
ext_ªg_öfo
 = 
exåegöfo
;

95 
ödex
 = 0xa0;

96 *
ext_ªg_öfo
 != 0xff) {

97 
	`a°_£t_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 
ödex
, 0x00, *
ext_ªg_öfo
);

98 
ödex
++;

99 
ext_ªg_öfo
++;

106 
	`a°_£t_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0x8c, 0x00, 0x01);

107 
	`a°_£t_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xb7, 0x00, 0x00);

110 
ªg
 = 0x04;

111 i‡(
a°
->
chù
 =
AST2300
 ||á°->chù =
AST2400
 ||á°->chù =
AST2500
 ||á°->chù =
AST2600
 ||á°->chù =
AIP200
)

112 
ªg
 |= 0x20;

113 
	`a°_£t_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xb6, 0xff, 
ªg
);

116 
	`a°_£t_ödex_ªg_mask
(
a°
, 
AST_IO_SEQ_PORT
, 0x01, 0xff, 0x20);

117 
	`udñay
(10);

118 
	}
}

120 
u32
 
	$a°_mödwm
(
a°_¥iv©e
 *
a°
, 
u32
 
r
)

122 
uöt32_t
 
d©a
;

124 
	`a°_wrôe32
(
a°
, 0xf004, 
r
 & 0xffff0000);

125 
	`a°_wrôe32
(
a°
, 0xf000, 0x1);

128 
d©a
 = 
	`a°_ªad32
(
a°
, 0xf004) & 0xffff0000;

129 } 
d©a
 !(
r
 & 0xffff0000));

130  
	`a°_ªad32
(
a°
, 0x10000 + (
r
 & 0x0000ffff));

131 
	}
}

133 
	$a°_moutdwm
(
a°_¥iv©e
 *
a°
, 
u32
 
r
, u32 
v
)

135 
uöt32_t
 
d©a
;

136 
	`a°_wrôe32
(
a°
, 0xf004, 
r
 & 0xffff0000);

137 
	`a°_wrôe32
(
a°
, 0xf000, 0x1);

139 
d©a
 = 
	`a°_ªad32
(
a°
, 0xf004) & 0xffff0000;

140 } 
d©a
 !(
r
 & 0xffff0000));

141 
	`a°_wrôe32
(
a°
, 0x10000 + (
r
 & 0x0000ffff), 
v
);

142 
	}
}

147 
	#CBR_SIZE_AST2150
 ((16 << 10Ë- 1)

	)

148 
	#CBR_PASSNUM_AST2150
 5

	)

149 
	#CBR_THRESHOLD_AST2150
 10

	)

150 
	#CBR_THRESHOLD2_AST2150
 10

	)

151 
	#TIMEOUT_AST2150
 5000000

	)

153 
	#CBR_PATNUM_AST2150
 8

	)

155 c⁄° 
u32
 
	g∑âîn_AST2150
[14] = {

172 
u32
 
	$mm˘e°bur°2_a°2150
(
a°_¥iv©e
 *
a°
, 
u32
 
d©agí
)

174 
u32
 
d©a
, 
timeout
;

176 
	`a°_moutdwm
(
a°
, 0x1e6e0070, 0x00000000);

177 
	`a°_moutdwm
(
a°
, 0x1e6e0070, 0x00000001 | (
d©agí
 << 3));

178 
timeout
 = 0;

180 
d©a
 = 
	`a°_mödwm
(
a°
, 0x1e6e0070) & 0x40;

181 i‡(++
timeout
 > 
TIMEOUT_AST2150
) {

182 
	`a°_moutdwm
(
a°
, 0x1e6e0070, 0x00000000);

185 } !
d©a
);

186 
	`a°_moutdwm
(
a°
, 0x1e6e0070, 0x00000000);

187 
	`a°_moutdwm
(
a°
, 0x1e6e0070, 0x00000003 | (
d©agí
 << 3));

188 
timeout
 = 0;

190 
d©a
 = 
	`a°_mödwm
(
a°
, 0x1e6e0070) & 0x40;

191 i‡(++
timeout
 > 
TIMEOUT_AST2150
) {

192 
	`a°_moutdwm
(
a°
, 0x1e6e0070, 0x00000000);

195 } !
d©a
);

196 
d©a
 = (
	`a°_mödwm
(
a°
, 0x1e6e0070) & 0x80) >> 7;

197 
	`a°_moutdwm
(
a°
, 0x1e6e0070, 0x00000000);

198  
d©a
;

199 
	}
}

202 
u32
 
	$mm˘e°sögÀ2_a°2150
(
a°_¥iv©e
 *
a°
, 
u32
 
d©agí
)

204 
u32
 
d©a
, 
timeout
;

206 
	`a°_moutdwm
(
a°
, 0x1e6e0070, 0x00000000);

207 
	`a°_moutdwm
(
a°
, 0x1e6e0070, 0x00000005 | (
d©agí
 << 3));

208 
timeout
 = 0;

210 
d©a
 = 
	`a°_mödwm
(
a°
, 0x1e6e0070) & 0x40;

211 i‡(++
timeout
 > 
TIMEOUT_AST2150
) {

212 
	`a°_moutdwm
(
a°
, 0x1e6e0070, 0x00000000);

215 } !
d©a
);

216 
d©a
 = (
	`a°_mödwm
(
a°
, 0x1e6e0070) & 0x80) >> 7;

217 
	`a°_moutdwm
(
a°
, 0x1e6e0070, 0x00000000);

218  
d©a
;

219 
	}
}

222 
	$cbπe°_a°2150
(
a°_¥iv©e
 *
a°
)

224 
i
;

226 
i
 = 0; i < 8; i++)

227 i‡(
	`mm˘e°bur°2_a°2150
(
a°
, 
i
))

230 
	}
}

232 
	$cbrsˇn_a°2150
(
a°_¥iv©e
 *
a°
, 
busw
)

234 
u32
 
∑t˙t
, 
lo›
;

236 
∑t˙t
 = 0;Ö©˙à< 
CBR_PATNUM_AST2150
;Öatcnt++) {

237 
	`a°_moutdwm
(
a°
, 0x1e6e007c, 
∑âîn_AST2150
[
∑t˙t
]);

238 
lo›
 = 0;Üo› < 
CBR_PASSNUM_AST2150
;Üoop++) {

239 i‡(
	`cbπe°_a°2150
(
a°
))

242 i‡(
lo›
 =
CBR_PASSNUM_AST2150
)

246 
	}
}

249 
	$cbrdŒi_a°2150
(
a°_¥iv©e
 *
a°
, 
busw
)

251 
u32
 
dŒ_mö
[4], 
dŒ_max
[4], 
dŒi
, 
d©a
, 
∑ss˙t
;

253 
cbr_°¨t
:

254 
dŒ_mö
[0] = dll_min[1] = dll_min[2] = dll_min[3] = 0xff;

255 
dŒ_max
[0] = dll_max[1] = dll_max[2] = dll_max[3] = 0x0;

256 
∑ss˙t
 = 0;

258 
dŒi
 = 0; dlli < 100; dlli++) {

259 
	`a°_moutdwm
(
a°
, 0x1e6e0068, 
dŒi
 | (dlli << 8) | (dlli << 16) | (dlli << 24));

260 
d©a
 = 
	`cbrsˇn_a°2150
(
a°
, 
busw
);

261 i‡(
d©a
 != 0) {

262 i‡(
d©a
 & 0x1) {

263 i‡(
dŒ_mö
[0] > 
dŒi
)

264 
dŒ_mö
[0] = 
dŒi
;

265 i‡(
dŒ_max
[0] < 
dŒi
)

266 
dŒ_max
[0] = 
dŒi
;

268 
∑ss˙t
++;

269 } i‡(
∑ss˙t
 >
CBR_THRESHOLD_AST2150
)

270 
cbr_°¨t
;

272 i‡(
dŒ_max
[0] =0 || (dŒ_max[0]-
dŒ_mö
[0]Ë< 
CBR_THRESHOLD_AST2150
)

273 
cbr_°¨t
;

275 
dŒi
 = 
dŒ_mö
[0] + (((
dŒ_max
[0] - dll_min[0]) * 7) >> 4);

276 
	`a°_moutdwm
(
a°
, 0x1e6e0068, 
dŒi
 | (dlli << 8) | (dlli << 16) | (dlli << 24));

277 
	}
}

281 
	$a°_öô_døm_ªg
(
drm_devi˚
 *
dev
)

283 
a°_¥iv©e
 *
a°
 = 
dev
->
dev_¥iv©e
;

284 
u8
 
j
;

285 
u32
 
d©a
, 
ãmp
, 
i
;

286 c⁄° 
a°_døm°ru˘
 *
døm_ªg_öfo
;

288 
j
 = 
	`a°_gë_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xd0, 0xff);

290 i‡((
j
 & 0x80) == 0) {

291 i‡(
a°
->
chù
 =
AST2000
) {

292 
døm_ªg_öfo
 = 
a°2000_døm_èbÀ_d©a
;

293 
	`a°_wrôe32
(
a°
, 0xf004, 0x1e6e0000);

294 
	`a°_wrôe32
(
a°
, 0xf000, 0x1);

295 
	`a°_wrôe32
(
a°
, 0x10100, 0xa8);

299 } 
	`a°_ªad32
(
a°
, 0x10100) != 0xa8);

301 i‡(
a°
->
chù
 =
AST2100
 ||ást->chip == 2200)

302 
døm_ªg_öfo
 = 
a°2100_døm_èbÀ_d©a
;

304 
døm_ªg_öfo
 = 
a°1100_døm_èbÀ_d©a
;

306 
	`a°_wrôe32
(
a°
, 0xf004, 0x1e6e0000);

307 
	`a°_wrôe32
(
a°
, 0xf000, 0x1);

308 
	`a°_wrôe32
(
a°
, 0x12000, 0x1688A8A8);

311 } 
	`a°_ªad32
(
a°
, 0x12000) != 0x01);

313 
	`a°_wrôe32
(
a°
, 0x10000, 0xfc600309);

316 } 
	`a°_ªad32
(
a°
, 0x10000) != 0x01);

319 
døm_ªg_öfo
->
ödex
 != 0xffff) {

320 i‡(
døm_ªg_öfo
->
ödex
 == 0xff00) {

321 
i
 = 0; i < 15; i++)

322 
	`udñay
(
døm_ªg_öfo
->
d©a
);

323 } i‡(
døm_ªg_öfo
->
ödex
 =0x4 && 
a°
->
chù
 !
AST2000
) {

324 
d©a
 = 
døm_ªg_öfo
->data;

325 i‡(
a°
->
døm_ty≥
 =
AST_DRAM_1Gx16
)

326 
d©a
 = 0x00000d89;

327 i‡(
a°
->
døm_ty≥
 =
AST_DRAM_1Gx32
)

328 
d©a
 = 0x00000c8d;

330 
ãmp
 = 
	`a°_ªad32
(
a°
, 0x12070);

331 
ãmp
 &= 0xc;

332 
ãmp
 <<= 2;

333 
	`a°_wrôe32
(
a°
, 0x10000 + 
døm_ªg_öfo
->
ödex
, 
d©a
 | 
ãmp
);

335 
	`a°_wrôe32
(
a°
, 0x10000 + 
døm_ªg_öfo
->
ödex
, døm_ªg_öfo->
d©a
);

336 
døm_ªg_öfo
++;

340 
d©a
 = 
	`a°_ªad32
(
a°
, 0x10120);

341 i‡(
d©a
 == 0x5061) {

342 
d©a
 = 
	`a°_ªad32
(
a°
, 0x10004);

343 i‡(
d©a
 & 0x40)

344 
	`cbrdŒi_a°2150
(
a°
, 16);

346 
	`cbrdŒi_a°2150
(
a°
, 32);

349 
a°
->
chù
) {

350 
AST2000
:

351 
ãmp
 = 
	`a°_ªad32
(
a°
, 0x10140);

352 
	`a°_wrôe32
(
a°
, 0x10140, 
ãmp
 | 0x40);

354 
AST1100
:

355 
AST2100
:

356 
AST2200
:

357 
AST2150
:

358 
ãmp
 = 
	`a°_ªad32
(
a°
, 0x1200c);

359 
	`a°_wrôe32
(
a°
, 0x1200c, 
ãmp
 & 0xfffffffd);

360 
ãmp
 = 
	`a°_ªad32
(
a°
, 0x12040);

361 
	`a°_wrôe32
(
a°
, 0x12040, 
ãmp
 | 0x40);

370 
j
 = 
	`a°_gë_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xd0, 0xff);

371 } (
j
 & 0x40) == 0);

372 
	}
}

374 
	$a°_po°_gpu
(
drm_devi˚
 *
dev
)

376 
u32
 
ªg
;

377 
a°_¥iv©e
 *
a°
 = 
dev
->
dev_¥iv©e
;

379 
	`pci_ªad_c⁄fig_dw‹d
(
a°
->
dev
->
pdev
, 0x04, &
ªg
);

380 
ªg
 |= 0x3;

381 
	`pci_wrôe_c⁄fig_dw‹d
(
a°
->
dev
->
pdev
, 0x04, 
ªg
);

383 
	`a°_íabÀ_vga
(
dev
);

384 
	`a°_›í_key
(
a°
);

385 
	`a°_íabÀ_mmio
(
dev
);

386 
	`a°_£t_def_ext_ªg
(
dev
);

388 i‡(
a°
->
chù
 =
AST2600
){

389 
	`a°_dp_œunch
(
dev
, 1);

391 i‡(
a°
->
c⁄fig_mode
 =
a°_u£_p2a
) {

392 i‡(
a°
->
chù
 =
AST2500
)

393 
	`a°_po°_chù_2500
(
dev
);

394 i‡(
a°
->
chù
 =
AST2300
 ||á°->chù =
AST2400
)

395 
	`a°_po°_chù_2300
(
dev
);

397 
	`a°_öô_døm_ªg
(
dev
);

399 
	`a°_öô_3rdtx
(
dev
);

401 i‡(
a°
->
tx_chù_ty≥
 !
AST_TX_NONE
)

402 
	`a°_£t_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xa3, 0xcf, 0x80);

404 
	}
}

407 
	#AST_DDR3
 0

	)

408 
	#AST_DDR2
 1

	)

410 
	sa°2300_døm_∑øm
 {

411 
u32
 
	mdøm_ty≥
;

412 
u32
 
	mdøm_chùid
;

413 
u32
 
	mdøm_‰eq
;

414 
u32
 
	mvøm_size
;

415 
u32
 
	modt
;

416 
u32
 
	mwodt
;

417 
u32
 
	mrodt
;

418 
u32
 
	mdøm_c⁄fig
;

419 
u32
 
	mªg_PERIOD
;

420 
u32
 
	mªg_MADJ
;

421 
u32
 
	mªg_SADJ
;

422 
u32
 
	mªg_MRS
;

423 
u32
 
	mªg_EMRS
;

424 
u32
 
	mªg_AC1
;

425 
u32
 
	mªg_AC2
;

426 
u32
 
	mªg_DQSIC
;

427 
u32
 
	mªg_DRV
;

428 
u32
 
	mªg_IOZ
;

429 
u32
 
	mªg_DQIDLY
;

430 
u32
 
	mªg_FREQ
;

431 
u32
 
	mmadj_max
;

432 
u32
 
	mdŒ2_föëu√_°ï
;

438 
	#CBR_SIZE0
 ((1 << 10Ë- 1)

	)

439 
	#CBR_SIZE1
 ((4 << 10Ë- 1)

	)

440 
	#CBR_SIZE2
 ((64 << 10Ë- 1)

	)

441 
	#CBR_PASSNUM
 5

	)

442 
	#CBR_PASSNUM2
 5

	)

443 
	#CBR_THRESHOLD
 10

	)

444 
	#CBR_THRESHOLD2
 10

	)

445 
	#TIMEOUT
 5000000

	)

446 
	#CBR_PATNUM
 8

	)

448 c⁄° 
u32
 
	g∑âîn
[8] = {

459 
boﬁ
 
	$mmc_ã°
(
a°_¥iv©e
 *
a°
, 
u32
 
d©agí
, 
u8
 
ã°_˘l
)

461 
u32
 
d©a
, 
timeout
;

463 
	`a°_moutdwm
(
a°
, 0x1e6e0070, 0x00000000);

464 
	`a°_moutdwm
(
a°
, 0x1e6e0070, (
d©agí
 << 3Ë| 
ã°_˘l
);

465 
timeout
 = 0;

467 
d©a
 = 
	`a°_mödwm
(
a°
, 0x1e6e0070) & 0x3000;

468 i‡(
d©a
 & 0x2000)

469  
Ál£
;

470 i‡(++
timeout
 > 
TIMEOUT
) {

471 
	`a°_moutdwm
(
a°
, 0x1e6e0070, 0x00000000);

472  
Ál£
;

474 } !
d©a
);

475 
	`a°_moutdwm
(
a°
, 0x1e6e0070, 0x0);

476  
åue
;

477 
	}
}

479 
u32
 
	$mmc_ã°2
(
a°_¥iv©e
 *
a°
, 
u32
 
d©agí
, 
u8
 
ã°_˘l
)

481 
u32
 
d©a
, 
timeout
;

483 
	`a°_moutdwm
(
a°
, 0x1e6e0070, 0x00000000);

484 
	`a°_moutdwm
(
a°
, 0x1e6e0070, (
d©agí
 << 3Ë| 
ã°_˘l
);

485 
timeout
 = 0;

487 
d©a
 = 
	`a°_mödwm
(
a°
, 0x1e6e0070) & 0x1000;

488 i‡(++
timeout
 > 
TIMEOUT
) {

489 
	`a°_moutdwm
(
a°
, 0x1e6e0070, 0x0);

492 } !
d©a
);

493 
d©a
 = 
	`a°_mödwm
(
a°
, 0x1e6e0078);

494 
d©a
 = (data | (data >> 16)) & 0xffff;

495 
	`a°_moutdwm
(
a°
, 0x1e6e0070, 0x00000000);

496  
d©a
;

497 
	}
}

500 
boﬁ
 
	$mmc_ã°_bur°
(
a°_¥iv©e
 *
a°
, 
u32
 
d©agí
)

502  
	`mmc_ã°
(
a°
, 
d©agí
, 0xc1);

503 
	}
}

505 
u32
 
	$mmc_ã°_bur°2
(
a°_¥iv©e
 *
a°
, 
u32
 
d©agí
)

507  
	`mmc_ã°2
(
a°
, 
d©agí
, 0x41);

508 
	}
}

510 
boﬁ
 
	$mmc_ã°_sögÀ
(
a°_¥iv©e
 *
a°
, 
u32
 
d©agí
)

512  
	`mmc_ã°
(
a°
, 
d©agí
, 0xc5);

513 
	}
}

515 
u32
 
	$mmc_ã°_sögÀ2
(
a°_¥iv©e
 *
a°
, 
u32
 
d©agí
)

517  
	`mmc_ã°2
(
a°
, 
d©agí
, 0x05);

518 
	}
}

520 
boﬁ
 
	$mmc_ã°_sögÀ_2500
(
a°_¥iv©e
 *
a°
, 
u32
 
d©agí
)

522  
	`mmc_ã°
(
a°
, 
d©agí
, 0x85);

523 
	}
}

525 
	$cbr_ã°
(
a°_¥iv©e
 *
a°
)

527 
u32
 
d©a
;

528 
i
;

529 
d©a
 = 
	`mmc_ã°_sögÀ2
(
a°
, 0);

530 i‡((
d©a
 & 0xff) && (data & 0xff00))

532 
i
 = 0; i < 8; i++) {

533 
d©a
 = 
	`mmc_ã°_bur°2
(
a°
, 
i
);

534 i‡((
d©a
 & 0xff) && (data & 0xff00))

537 i‡(!
d©a
)

539 i‡(
d©a
 & 0xff)

542 
	}
}

544 
	$cbr_sˇn
(
a°_¥iv©e
 *
a°
)

546 
u32
 
d©a
, 
d©a2
, 
∑t˙t
, 
lo›
;

548 
d©a2
 = 3;

549 
∑t˙t
 = 0;Ö©˙à< 
CBR_PATNUM
;Öatcnt++) {

550 
	`a°_moutdwm
(
a°
, 0x1e6e007c, 
∑âîn
[
∑t˙t
]);

551 
lo›
 = 0;Üo› < 
CBR_PASSNUM2
;Üoop++) {

552 i‡((
d©a
 = 
	`cbr_ã°
(
a°
)) != 0) {

553 
d©a2
 &
d©a
;

554 i‡(!
d©a2
)

559 i‡(
lo›
 =
CBR_PASSNUM2
)

562  
d©a2
;

563 
	}
}

565 
u32
 
	$cbr_ã°2
(
a°_¥iv©e
 *
a°
)

567 
u32
 
d©a
;

569 
d©a
 = 
	`mmc_ã°_bur°2
(
a°
, 0);

570 i‡(
d©a
 == 0xffff)

572 
d©a
 |
	`mmc_ã°_sögÀ2
(
a°
, 0);

573 i‡(
d©a
 == 0xffff)

576  ~
d©a
 & 0xffff;

577 
	}
}

579 
u32
 
	$cbr_sˇn2
(
a°_¥iv©e
 *
a°
)

581 
u32
 
d©a
, 
d©a2
, 
∑t˙t
, 
lo›
;

583 
d©a2
 = 0xffff;

584 
∑t˙t
 = 0;Ö©˙à< 
CBR_PATNUM
;Öatcnt++) {

585 
	`a°_moutdwm
(
a°
, 0x1e6e007c, 
∑âîn
[
∑t˙t
]);

586 
lo›
 = 0;Üo› < 
CBR_PASSNUM2
;Üoop++) {

587 i‡((
d©a
 = 
	`cbr_ã°2
(
a°
)) != 0) {

588 
d©a2
 &
d©a
;

589 i‡(!
d©a2
)

594 i‡(
lo›
 =
CBR_PASSNUM2
)

597  
d©a2
;

598 
	}
}

600 
boﬁ
 
	$cbr_ã°3
(
a°_¥iv©e
 *
a°
)

602 i‡(!
	`mmc_ã°_bur°
(
a°
, 0))

603  
Ál£
;

604 i‡(!
	`mmc_ã°_sögÀ
(
a°
, 0))

605  
Ál£
;

606  
åue
;

607 
	}
}

609 
boﬁ
 
	$cbr_sˇn3
(
a°_¥iv©e
 *
a°
)

611 
u32
 
∑t˙t
, 
lo›
;

613 
∑t˙t
 = 0;Ö©˙à< 
CBR_PATNUM
;Öatcnt++) {

614 
	`a°_moutdwm
(
a°
, 0x1e6e007c, 
∑âîn
[
∑t˙t
]);

615 
lo›
 = 0;Üoop < 2;Üoop++) {

616 i‡(
	`cbr_ã°3
(
a°
))

619 i‡(
lo›
 == 2)

620  
Ál£
;

622  
åue
;

623 
	}
}

625 
boﬁ
 
	$föëu√DQI_L
(
a°_¥iv©e
 *
a°
, 
a°2300_døm_∑øm
 *
∑øm
)

627 
u32
 
gﬁd_ßdj
[2], 
dŒmö
[16], 
dŒmax
[16], 
dŒi
, 
d©a
, 
˙t
, 
mask
, 
∑ss˙t
, 
ªåy
 = 0;

628 
boﬁ
 
°©us
 = 
Ál£
;

629 
FINETUNE_START
:

630 
˙t
 = 0; cnt < 16; cnt++) {

631 
dŒmö
[
˙t
] = 0xff;

632 
dŒmax
[
˙t
] = 0x0;

634 
∑ss˙t
 = 0;

635 
dŒi
 = 0; dlli < 76; dlli++) {

636 
	`a°_moutdwm
(
a°
, 0x1E6E0068, 0x00001400 | (
dŒi
 << 16) | (dlli << 24));

637 
	`a°_moutdwm
(
a°
, 0x1E6E0074, 
CBR_SIZE1
);

638 
d©a
 = 
	`cbr_sˇn2
(
a°
);

639 i‡(
d©a
 != 0) {

640 
mask
 = 0x00010001;

641 
˙t
 = 0; cnt < 16; cnt++) {

642 i‡(
d©a
 & 
mask
) {

643 i‡(
dŒmö
[
˙t
] > 
dŒi
) {

644 
dŒmö
[
˙t
] = 
dŒi
;

646 i‡(
dŒmax
[
˙t
] < 
dŒi
) {

647 
dŒmax
[
˙t
] = 
dŒi
;

650 
mask
 <<= 1;

652 
∑ss˙t
++;

653 } i‡(
∑ss˙t
 >
CBR_THRESHOLD2
) {

657 
gﬁd_ßdj
[0] = 0x0;

658 
∑ss˙t
 = 0;

659 
˙t
 = 0; cnt < 16; cnt++) {

660 i‡((
dŒmax
[
˙t
] > 
dŒmö
[˙t]Ë&& ((dŒmax[˙t] - dŒmö[˙t]Ë>
CBR_THRESHOLD2
)) {

661 
gﬁd_ßdj
[0] +
dŒmö
[
˙t
];

662 
∑ss˙t
++;

665 i‡(
ªåy
++ > 10)

666 
FINETUNE_DONE
;

667 i‡(
∑ss˙t
 != 16) {

668 
FINETUNE_START
;

670 
°©us
 = 
åue
;

671 
FINETUNE_DONE
:

672 
gﬁd_ßdj
[0] = gold_sadj[0] >> 4;

673 
gﬁd_ßdj
[1] = gold_sadj[0];

675 
d©a
 = 0;

676 
˙t
 = 0; cnt < 8; cnt++) {

677 
d©a
 >>= 3;

678 i‡((
dŒmax
[
˙t
] > 
dŒmö
[˙t]Ë&& ((dŒmax[˙t] - dŒmö[˙t]Ë>
CBR_THRESHOLD2
)) {

679 
dŒi
 = 
dŒmö
[
˙t
];

680 i‡(
gﬁd_ßdj
[0] >
dŒi
) {

681 
dŒi
 = ((
gﬁd_ßdj
[0] - dlli) * 19) >> 5;

682 i‡(
dŒi
 > 3) {

683 
dŒi
 = 3;

686 
dŒi
 = ((dŒò- 
gﬁd_ßdj
[0]) * 19) >> 5;

687 i‡(
dŒi
 > 4) {

688 
dŒi
 = 4;

690 
dŒi
 = (8 - dlli) & 0x7;

692 
d©a
 |
dŒi
 << 21;

695 
	`a°_moutdwm
(
a°
, 0x1E6E0080, 
d©a
);

697 
d©a
 = 0;

698 
˙t
 = 8; cnt < 16; cnt++) {

699 
d©a
 >>= 3;

700 i‡((
dŒmax
[
˙t
] > 
dŒmö
[˙t]Ë&& ((dŒmax[˙t] - dŒmö[˙t]Ë>
CBR_THRESHOLD2
)) {

701 
dŒi
 = 
dŒmö
[
˙t
];

702 i‡(
gﬁd_ßdj
[1] >
dŒi
) {

703 
dŒi
 = ((
gﬁd_ßdj
[1] - dlli) * 19) >> 5;

704 i‡(
dŒi
 > 3) {

705 
dŒi
 = 3;

707 
dŒi
 = (dlli - 1) & 0x7;

710 
dŒi
 = ((dŒò- 
gﬁd_ßdj
[1]) * 19) >> 5;

711 
dŒi
 += 1;

712 i‡(
dŒi
 > 4) {

713 
dŒi
 = 4;

715 
dŒi
 = (8 - dlli) & 0x7;

717 
d©a
 |
dŒi
 << 21;

720 
	`a°_moutdwm
(
a°
, 0x1E6E0084, 
d©a
);

721  
°©us
;

722 
	}
}

724 
	$föëu√DQSI
(
a°_¥iv©e
 *
a°
)

726 
u32
 
dŒi
, 
dqsù
, 
dqidly
;

727 
u32
 
ªg_m¸18
, 
ªg_m¸0c
, 
∑ss˙t
[2], 
diff
;

728 
u32
 
g_dqidly
, 
g_dqsù
, 
g_m¨gö
, 
g_side
;

729 
u16
 
∑ss
[32][2][2];

730 
èg
[2][76];

733 
ªg_m¸0c
 = 
	`a°_mödwm
(
a°
, 0x1E6E000C);

734 
ªg_m¸18
 = 
	`a°_mödwm
(
a°
, 0x1E6E0018);

735 
ªg_m¸18
 &= 0x0000ffff;

736 
	`a°_moutdwm
(
a°
, 0x1E6E0018, 
ªg_m¸18
);

738 
dŒi
 = 0; dlli < 76; dlli++) {

739 
èg
[0][
dŒi
] = 0x0;

740 
èg
[1][
dŒi
] = 0x0;

742 
dqidly
 = 0; dqidly < 32; dqidly++) {

743 
∑ss
[
dqidly
][0][0] = 0xff;

744 
∑ss
[
dqidly
][0][1] = 0x0;

745 
∑ss
[
dqidly
][1][0] = 0xff;

746 
∑ss
[
dqidly
][1][1] = 0x0;

748 
dqidly
 = 0; dqidly < 32; dqidly++) {

749 
∑ss˙t
[0] =Öasscnt[1] = 0;

750 
dqsù
 = 0; dqsip < 2; dqsip++) {

751 
	`a°_moutdwm
(
a°
, 0x1E6E000C, 0);

752 
	`a°_moutdwm
(
a°
, 0x1E6E0018, 
ªg_m¸18
 | (
dqidly
 << 16Ë| (
dqsù
 << 23));

753 
	`a°_moutdwm
(
a°
, 0x1E6E000C, 
ªg_m¸0c
);

754 
dŒi
 = 0; dlli < 76; dlli++) {

755 
	`a°_moutdwm
(
a°
, 0x1E6E0068, 0x00001300 | (
dŒi
 << 16) | (dlli << 24));

756 
	`a°_moutdwm
(
a°
, 0x1E6E0070, 0);

757 
	`a°_moutdwm
(
a°
, 0x1E6E0074, 
CBR_SIZE0
);

758 i‡(
	`cbr_sˇn3
(
a°
)) {

759 i‡(
dŒi
 == 0)

761 
∑ss˙t
[
dqsù
]++;

762 
èg
[
dqsù
][
dŒi
] = 'P';

763 i‡(
dŒi
 < 
∑ss
[
dqidly
][
dqsù
][0])

764 
∑ss
[
dqidly
][
dqsù
][0] = (
u16
Ë
dŒi
;

765 i‡(
dŒi
 > 
∑ss
[
dqidly
][
dqsù
][1])

766 
∑ss
[
dqidly
][
dqsù
][1] = (
u16
Ë
dŒi
;

767 } i‡(
∑ss˙t
[
dqsù
] >= 5)

770 
∑ss
[
dqidly
][
dqsù
][0] = 0xff;

771 
∑ss
[
dqidly
][
dqsù
][1] = 0x0;

775 i‡(
∑ss˙t
[0] == 0 &&Öasscnt[1] == 0)

776 
dqidly
++;

779 
g_dqidly
 = 
g_dqsù
 = 
g_m¨gö
 = 
g_side
 = 0;

781 
dqidly
 = 0; dqidly < 32; dqidly++) {

782 
dqsù
 = 0; dqsip < 2; dqsip++) {

783 i‡(
∑ss
[
dqidly
][
dqsù
][0] >Öass[dqidly][dqsip][1])

785 
diff
 = 
∑ss
[
dqidly
][
dqsù
][1] -Öass[dqidly][dqsip][0];

786 i‡((
diff
+2Ë< 
g_m¨gö
)

788 
∑ss˙t
[0] =Öasscnt[1] = 0;

789 
dŒi
 = 
∑ss
[
dqidly
][
dqsù
][0]; dŒò> 0 && 
èg
[dqsù][dŒi] !0; dŒi--, 
∑ss˙t
[0]++);

790 
dŒi
 = 
∑ss
[
dqidly
][
dqsù
][1]; dŒò< 76 && 
èg
[dqsù][dŒi] !0; dŒi++, 
∑ss˙t
[1]++);

791 i‡(
∑ss˙t
[0] >Öasscnt[1])

792 
∑ss˙t
[0] =Öasscnt[1];

793 
∑ss˙t
[1] = 0;

794 i‡(
∑ss˙t
[0] > 
g_side
)

795 
∑ss˙t
[1] =Öass˙t[0] - 
g_side
;

796 i‡(
diff
 > (
g_m¨gö
+1Ë&& (
∑ss˙t
[1] > 0 ||Öasscnt[0] > 8)) {

797 
g_m¨gö
 = 
diff
;

798 
g_dqidly
 = 
dqidly
;

799 
g_dqsù
 = 
dqsù
;

800 
g_side
 = 
∑ss˙t
[0];

801 } i‡(
∑ss˙t
[1] > 1 && 
g_side
 < 8) {

802 i‡(
diff
 > 
g_m¨gö
)

803 
g_m¨gö
 = 
diff
;

804 
g_dqidly
 = 
dqidly
;

805 
g_dqsù
 = 
dqsù
;

806 
g_side
 = 
∑ss˙t
[0];

810 
ªg_m¸18
 =Ñeg_m¸18 | (
g_dqidly
 << 16Ë| (
g_dqsù
 << 23);

811 
	`a°_moutdwm
(
a°
, 0x1E6E0018, 
ªg_m¸18
);

813 
	}
}

814 
boﬁ
 
	$cbr_dŒ2
(
a°_¥iv©e
 *
a°
, 
a°2300_døm_∑øm
 *
∑øm
)

816 
u32
 
dŒmö
[2], 
dŒmax
[2], 
dŒi
, 
d©a
, 
∑ss˙t
, 
ªåy
 = 0;

817 
boﬁ
 
°©us
 = 
Ál£
;

819 
	`föëu√DQSI
(
a°
);

820 i‡(
	`föëu√DQI_L
(
a°
, 
∑øm
Ë=
Ál£
)

821  
°©us
;

823 
CBR_START2
:

824 
dŒmö
[0] = dllmin[1] = 0xff;

825 
dŒmax
[0] = dllmax[1] = 0x0;

826 
∑ss˙t
 = 0;

827 
dŒi
 = 0; dlli < 76; dlli++) {

828 
	`a°_moutdwm
(
a°
, 0x1E6E0068, 0x00001300 | (
dŒi
 << 16) | (dlli << 24));

829 
	`a°_moutdwm
(
a°
, 0x1E6E0074, 
CBR_SIZE2
);

830 
d©a
 = 
	`cbr_sˇn
(
a°
);

831 i‡(
d©a
 != 0) {

832 i‡(
d©a
 & 0x1) {

833 i‡(
dŒmö
[0] > 
dŒi
) {

834 
dŒmö
[0] = 
dŒi
;

836 i‡(
dŒmax
[0] < 
dŒi
) {

837 
dŒmax
[0] = 
dŒi
;

840 i‡(
d©a
 & 0x2) {

841 i‡(
dŒmö
[1] > 
dŒi
) {

842 
dŒmö
[1] = 
dŒi
;

844 i‡(
dŒmax
[1] < 
dŒi
) {

845 
dŒmax
[1] = 
dŒi
;

848 
∑ss˙t
++;

849 } i‡(
∑ss˙t
 >
CBR_THRESHOLD
) {

853 i‡(
ªåy
++ > 10)

854 
CBR_DONE2
;

855 i‡(
dŒmax
[0] =0 || (dŒmax[0]-
dŒmö
[0]Ë< 
CBR_THRESHOLD
) {

856 
CBR_START2
;

858 i‡(
dŒmax
[1] =0 || (dŒmax[1]-
dŒmö
[1]Ë< 
CBR_THRESHOLD
) {

859 
CBR_START2
;

861 
°©us
 = 
åue
;

862 
CBR_DONE2
:

863 
dŒi
 = (
dŒmö
[1] + 
dŒmax
[1]) >> 1;

864 
dŒi
 <<= 8;

865 
dŒi
 +(
dŒmö
[0] + 
dŒmax
[0]) >> 1;

866 
	`a°_moutdwm
(
a°
, 0x1E6E0068, 
	`a°_mödwm
◊°, 0x1E720058Ë| (
dŒi
 << 16));

867  
°©us
;

868 
	}
}

870 
	$gë_ddr3_öfo
(
a°_¥iv©e
 *
a°
, 
a°2300_døm_∑øm
 *
∑øm
)

872 
u32
 
å≠
, 
å≠_AC2
, 
å≠_MRS
;

874 
	`a°_moutdwm
(
a°
, 0x1E6E2000, 0x1688A8A8);

877 
å≠
 = (
	`a°_mödwm
(
a°
, 0x1E6E2070) >> 25) & 0x3;

878 
å≠_AC2
 = 0x00020000 + (
å≠
 << 16);

879 
å≠_AC2
 |0x00300000 + ((
å≠
 & 0x2) << 19);

880 
å≠_MRS
 = 0x00000010 + (
å≠
 << 4);

881 
å≠_MRS
 |((
å≠
 & 0x2) << 18);

883 
∑øm
->
ªg_MADJ
 = 0x00034C4C;

884 
∑øm
->
ªg_SADJ
 = 0x00001800;

885 
∑øm
->
ªg_DRV
 = 0x000000F0;

886 
∑øm
->
ªg_PERIOD
 =Ö¨am->
døm_‰eq
;

887 
∑øm
->
rodt
 = 0;

889 
∑øm
->
døm_‰eq
) {

891 
	`a°_moutdwm
(
a°
, 0x1E6E2020, 0x0190);

892 
∑øm
->
wodt
 = 0;

893 
∑øm
->
ªg_AC1
 = 0x22202725;

894 
∑øm
->
ªg_AC2
 = 0xAA007613 | 
å≠_AC2
;

895 
∑øm
->
ªg_DQSIC
 = 0x000000BA;

896 
∑øm
->
ªg_MRS
 = 0x04001400 | 
å≠_MRS
;

897 
∑øm
->
ªg_EMRS
 = 0x00000000;

898 
∑øm
->
ªg_IOZ
 = 0x00000023;

899 
∑øm
->
ªg_DQIDLY
 = 0x00000074;

900 
∑øm
->
ªg_FREQ
 = 0x00004DC0;

901 
∑øm
->
madj_max
 = 96;

902 
∑øm
->
dŒ2_föëu√_°ï
 = 3;

903 
∑øm
->
døm_chùid
) {

905 
AST_DRAM_512Mx16
:

906 
AST_DRAM_1Gx16
:

907 
∑øm
->
ªg_AC2
 = 0xAA007613 | 
å≠_AC2
;

909 
AST_DRAM_2Gx16
:

910 
∑øm
->
ªg_AC2
 = 0xAA00761C | 
å≠_AC2
;

912 
AST_DRAM_4Gx16
:

913 
∑øm
->
ªg_AC2
 = 0xAA007636 | 
å≠_AC2
;

919 
	`a°_moutdwm
(
a°
, 0x1E6E2020, 0x03F1);

920 
∑øm
->
wodt
 = 1;

921 
∑øm
->
ªg_AC1
 = 0x33302825;

922 
∑øm
->
ªg_AC2
 = 0xCC009617 | 
å≠_AC2
;

923 
∑øm
->
ªg_DQSIC
 = 0x000000E2;

924 
∑øm
->
ªg_MRS
 = 0x04001600 | 
å≠_MRS
;

925 
∑øm
->
ªg_EMRS
 = 0x00000000;

926 
∑øm
->
ªg_IOZ
 = 0x00000034;

927 
∑øm
->
ªg_DRV
 = 0x000000FA;

928 
∑øm
->
ªg_DQIDLY
 = 0x00000089;

929 
∑øm
->
ªg_FREQ
 = 0x00005040;

930 
∑øm
->
madj_max
 = 96;

931 
∑øm
->
dŒ2_föëu√_°ï
 = 4;

933 
∑øm
->
døm_chùid
) {

935 
AST_DRAM_512Mx16
:

936 
AST_DRAM_1Gx16
:

937 
∑øm
->
ªg_AC2
 = 0xCC009617 | 
å≠_AC2
;

939 
AST_DRAM_2Gx16
:

940 
∑øm
->
ªg_AC2
 = 0xCC009622 | 
å≠_AC2
;

942 
AST_DRAM_4Gx16
:

943 
∑øm
->
ªg_AC2
 = 0xCC00963F | 
å≠_AC2
;

949 
	`a°_moutdwm
(
a°
, 0x1E6E2020, 0x01F0);

950 
∑øm
->
wodt
 = 1;

951 
∑øm
->
ªg_AC1
 = 0x33302825;

952 
∑øm
->
ªg_AC2
 = 0xCC009617 | 
å≠_AC2
;

953 
∑øm
->
ªg_DQSIC
 = 0x000000E2;

954 
∑øm
->
ªg_MRS
 = 0x04001600 | 
å≠_MRS
;

955 
∑øm
->
ªg_EMRS
 = 0x00000000;

956 
∑øm
->
ªg_IOZ
 = 0x00000023;

957 
∑øm
->
ªg_DRV
 = 0x000000FA;

958 
∑øm
->
ªg_DQIDLY
 = 0x00000089;

959 
∑øm
->
ªg_FREQ
 = 0x000050C0;

960 
∑øm
->
madj_max
 = 96;

961 
∑øm
->
dŒ2_föëu√_°ï
 = 4;

963 
∑øm
->
døm_chùid
) {

965 
AST_DRAM_512Mx16
:

966 
AST_DRAM_1Gx16
:

967 
∑øm
->
ªg_AC2
 = 0xCC009617 | 
å≠_AC2
;

969 
AST_DRAM_2Gx16
:

970 
∑øm
->
ªg_AC2
 = 0xCC009622 | 
å≠_AC2
;

972 
AST_DRAM_4Gx16
:

973 
∑øm
->
ªg_AC2
 = 0xCC00963F | 
å≠_AC2
;

979 
	`a°_moutdwm
(
a°
, 0x1E6E2020, 0x0230);

980 
∑øm
->
wodt
 = 0;

981 
∑øm
->
ªg_AC1
 = 0x33302926;

982 
∑øm
->
ªg_AC2
 = 0xCD44961A;

983 
∑øm
->
ªg_DQSIC
 = 0x000000FC;

984 
∑øm
->
ªg_MRS
 = 0x00081830;

985 
∑øm
->
ªg_EMRS
 = 0x00000000;

986 
∑øm
->
ªg_IOZ
 = 0x00000045;

987 
∑øm
->
ªg_DQIDLY
 = 0x00000097;

988 
∑øm
->
ªg_FREQ
 = 0x000052C0;

989 
∑øm
->
madj_max
 = 88;

990 
∑øm
->
dŒ2_föëu√_°ï
 = 4;

993 
	`a°_moutdwm
(
a°
, 0x1E6E2020, 0x0270);

994 
∑øm
->
wodt
 = 1;

995 
∑øm
->
ªg_AC1
 = 0x33302926;

996 
∑øm
->
ªg_AC2
 = 0xDE44A61D;

997 
∑øm
->
ªg_DQSIC
 = 0x00000117;

998 
∑øm
->
ªg_MRS
 = 0x00081A30;

999 
∑øm
->
ªg_EMRS
 = 0x00000000;

1000 
∑øm
->
ªg_IOZ
 = 0x070000BB;

1001 
∑øm
->
ªg_DQIDLY
 = 0x000000A0;

1002 
∑øm
->
ªg_FREQ
 = 0x000054C0;

1003 
∑øm
->
madj_max
 = 79;

1004 
∑øm
->
dŒ2_föëu√_°ï
 = 4;

1007 
	`a°_moutdwm
(
a°
, 0x1E6E2020, 0x0290);

1008 
∑øm
->
wodt
 = 1;

1009 
∑øm
->
rodt
 = 1;

1010 
∑øm
->
ªg_AC1
 = 0x33302926;

1011 
∑øm
->
ªg_AC2
 = 0xEF44B61E;

1012 
∑øm
->
ªg_DQSIC
 = 0x00000125;

1013 
∑øm
->
ªg_MRS
 = 0x00081A30;

1014 
∑øm
->
ªg_EMRS
 = 0x00000040;

1015 
∑øm
->
ªg_DRV
 = 0x000000F5;

1016 
∑øm
->
ªg_IOZ
 = 0x00000023;

1017 
∑øm
->
ªg_DQIDLY
 = 0x00000088;

1018 
∑øm
->
ªg_FREQ
 = 0x000055C0;

1019 
∑øm
->
madj_max
 = 76;

1020 
∑øm
->
dŒ2_föëu√_°ï
 = 3;

1023 
	`a°_moutdwm
(
a°
, 0x1E6E2020, 0x0140);

1024 
∑øm
->
ªg_MADJ
 = 0x00136868;

1025 
∑øm
->
ªg_SADJ
 = 0x00004534;

1026 
∑øm
->
wodt
 = 1;

1027 
∑øm
->
rodt
 = 1;

1028 
∑øm
->
ªg_AC1
 = 0x33302A37;

1029 
∑øm
->
ªg_AC2
 = 0xEF56B61E;

1030 
∑øm
->
ªg_DQSIC
 = 0x0000013F;

1031 
∑øm
->
ªg_MRS
 = 0x00101A50;

1032 
∑øm
->
ªg_EMRS
 = 0x00000040;

1033 
∑øm
->
ªg_DRV
 = 0x000000FA;

1034 
∑øm
->
ªg_IOZ
 = 0x00000023;

1035 
∑øm
->
ªg_DQIDLY
 = 0x00000078;

1036 
∑øm
->
ªg_FREQ
 = 0x000057C0;

1037 
∑øm
->
madj_max
 = 136;

1038 
∑øm
->
dŒ2_föëu√_°ï
 = 3;

1041 
	`a°_moutdwm
(
a°
, 0x1E6E2020, 0x02E1);

1042 
∑øm
->
ªg_MADJ
 = 0x00136868;

1043 
∑øm
->
ªg_SADJ
 = 0x00004534;

1044 
∑øm
->
wodt
 = 1;

1045 
∑øm
->
rodt
 = 1;

1046 
∑øm
->
ªg_AC1
 = 0x32302A37;

1047 
∑øm
->
ªg_AC2
 = 0xDF56B61F;

1048 
∑øm
->
ªg_DQSIC
 = 0x0000014D;

1049 
∑øm
->
ªg_MRS
 = 0x00101A50;

1050 
∑øm
->
ªg_EMRS
 = 0x00000004;

1051 
∑øm
->
ªg_DRV
 = 0x000000F5;

1052 
∑øm
->
ªg_IOZ
 = 0x00000023;

1053 
∑øm
->
ªg_DQIDLY
 = 0x00000078;

1054 
∑øm
->
ªg_FREQ
 = 0x000058C0;

1055 
∑øm
->
madj_max
 = 132;

1056 
∑øm
->
dŒ2_föëu√_°ï
 = 3;

1059 
	`a°_moutdwm
(
a°
, 0x1E6E2020, 0x0160);

1060 
∑øm
->
ªg_MADJ
 = 0x00136868;

1061 
∑øm
->
ªg_SADJ
 = 0x00004534;

1062 
∑øm
->
wodt
 = 1;

1063 
∑øm
->
rodt
 = 1;

1064 
∑øm
->
ªg_AC1
 = 0x32302A37;

1065 
∑øm
->
ªg_AC2
 = 0xEF56B621;

1066 
∑øm
->
ªg_DQSIC
 = 0x0000015A;

1067 
∑øm
->
ªg_MRS
 = 0x02101A50;

1068 
∑øm
->
ªg_EMRS
 = 0x00000004;

1069 
∑øm
->
ªg_DRV
 = 0x000000F5;

1070 
∑øm
->
ªg_IOZ
 = 0x00000034;

1071 
∑øm
->
ªg_DQIDLY
 = 0x00000078;

1072 
∑øm
->
ªg_FREQ
 = 0x000059C0;

1073 
∑øm
->
madj_max
 = 128;

1074 
∑øm
->
dŒ2_föëu√_°ï
 = 3;

1078 
∑øm
->
døm_chùid
) {

1079 
AST_DRAM_512Mx16
:

1080 
∑øm
->
døm_c⁄fig
 = 0x130;

1083 
AST_DRAM_1Gx16
:

1084 
∑øm
->
døm_c⁄fig
 = 0x131;

1086 
AST_DRAM_2Gx16
:

1087 
∑øm
->
døm_c⁄fig
 = 0x132;

1089 
AST_DRAM_4Gx16
:

1090 
∑øm
->
døm_c⁄fig
 = 0x133;

1094 
∑øm
->
vøm_size
) {

1096 
AST_VIDMEM_SIZE_8M
:

1097 
∑øm
->
døm_c⁄fig
 |= 0x00;

1099 
AST_VIDMEM_SIZE_16M
:

1100 
∑øm
->
døm_c⁄fig
 |= 0x04;

1102 
AST_VIDMEM_SIZE_32M
:

1103 
∑øm
->
døm_c⁄fig
 |= 0x08;

1105 
AST_VIDMEM_SIZE_64M
:

1106 
∑øm
->
døm_c⁄fig
 |= 0x0c;

1110 
	}
}

1112 
	$ddr3_öô
(
a°_¥iv©e
 *
a°
, 
a°2300_døm_∑øm
 *
∑øm
)

1114 
u32
 
d©a
, 
d©a2
, 
ªåy
 = 0;

1116 
ddr3_öô_°¨t
:

1117 
	`a°_moutdwm
(
a°
, 0x1E6E0000, 0xFC600309);

1118 
	`a°_moutdwm
(
a°
, 0x1E6E0018, 0x00000100);

1119 
	`a°_moutdwm
(
a°
, 0x1E6E0024, 0x00000000);

1120 
	`a°_moutdwm
(
a°
, 0x1E6E0034, 0x00000000);

1121 
	`udñay
(10);

1122 
	`a°_moutdwm
(
a°
, 0x1E6E0064, 
∑øm
->
ªg_MADJ
);

1123 
	`a°_moutdwm
(
a°
, 0x1E6E0068, 
∑øm
->
ªg_SADJ
);

1124 
	`udñay
(10);

1125 
	`a°_moutdwm
(
a°
, 0x1E6E0064, 
∑øm
->
ªg_MADJ
 | 0xC0000);

1126 
	`udñay
(10);

1128 
	`a°_moutdwm
(
a°
, 0x1E6E0004, 
∑øm
->
døm_c⁄fig
);

1129 
	`a°_moutdwm
(
a°
, 0x1E6E0008, 0x90040f);

1130 
	`a°_moutdwm
(
a°
, 0x1E6E0010, 
∑øm
->
ªg_AC1
);

1131 
	`a°_moutdwm
(
a°
, 0x1E6E0014, 
∑øm
->
ªg_AC2
);

1132 
	`a°_moutdwm
(
a°
, 0x1E6E0020, 
∑øm
->
ªg_DQSIC
);

1133 
	`a°_moutdwm
(
a°
, 0x1E6E0080, 0x00000000);

1134 
	`a°_moutdwm
(
a°
, 0x1E6E0084, 0x00000000);

1135 
	`a°_moutdwm
(
a°
, 0x1E6E0088, 
∑øm
->
ªg_DQIDLY
);

1136 
	`a°_moutdwm
(
a°
, 0x1E6E0018, 0x4000A170);

1137 
	`a°_moutdwm
(
a°
, 0x1E6E0018, 0x00002370);

1138 
	`a°_moutdwm
(
a°
, 0x1E6E0038, 0x00000000);

1139 
	`a°_moutdwm
(
a°
, 0x1E6E0040, 0xFF444444);

1140 
	`a°_moutdwm
(
a°
, 0x1E6E0044, 0x22222222);

1141 
	`a°_moutdwm
(
a°
, 0x1E6E0048, 0x22222222);

1142 
	`a°_moutdwm
(
a°
, 0x1E6E004C, 0x00000002);

1143 
	`a°_moutdwm
(
a°
, 0x1E6E0050, 0x80000000);

1144 
	`a°_moutdwm
(
a°
, 0x1E6E0050, 0x00000000);

1145 
	`a°_moutdwm
(
a°
, 0x1E6E0054, 0);

1146 
	`a°_moutdwm
(
a°
, 0x1E6E0060, 
∑øm
->
ªg_DRV
);

1147 
	`a°_moutdwm
(
a°
, 0x1E6E006C, 
∑øm
->
ªg_IOZ
);

1148 
	`a°_moutdwm
(
a°
, 0x1E6E0070, 0x00000000);

1149 
	`a°_moutdwm
(
a°
, 0x1E6E0074, 0x00000000);

1150 
	`a°_moutdwm
(
a°
, 0x1E6E0078, 0x00000000);

1151 
	`a°_moutdwm
(
a°
, 0x1E6E007C, 0x00000000);

1154 
d©a
 = 
	`a°_mödwm
(
a°
, 0x1E6E001C);

1155 } !(
d©a
 & 0x08000000));

1156 
d©a
 = 
	`a°_mödwm
(
a°
, 0x1E6E001C);

1157 
d©a
 = (data >> 8) & 0xff;

1158 (
d©a
 & 0x08) || ((data & 0x7) < 2) || (data < 4)) {

1159 
d©a2
 = (
	`a°_mödwm
(
a°
, 0x1E6E0064) & 0xfff3ffff) + 4;

1160 i‡((
d©a2
 & 0xffË> 
∑øm
->
madj_max
) {

1163 
	`a°_moutdwm
(
a°
, 0x1E6E0064, 
d©a2
);

1164 i‡(
d©a2
 & 0x00100000) {

1165 
d©a2
 = ((data2 & 0xff) >> 3) + 3;

1167 
d©a2
 = ((data2 & 0xff) >> 2) + 5;

1169 
d©a
 = 
	`a°_mödwm
(
a°
, 0x1E6E0068) & 0xffff00ff;

1170 
d©a2
 +
d©a
 & 0xff;

1171 
d©a
 = d©®| (
d©a2
 << 8);

1172 
	`a°_moutdwm
(
a°
, 0x1E6E0068, 
d©a
);

1173 
	`udñay
(10);

1174 
	`a°_moutdwm
(
a°
, 0x1E6E0064, 
	`a°_mödwm
(ast, 0x1E6E0064) | 0xC0000);

1175 
	`udñay
(10);

1176 
d©a
 = 
	`a°_mödwm
(
a°
, 0x1E6E0018) & 0xfffff1ff;

1177 
	`a°_moutdwm
(
a°
, 0x1E6E0018, 
d©a
);

1178 
d©a
 = data | 0x200;

1179 
	`a°_moutdwm
(
a°
, 0x1E6E0018, 
d©a
);

1181 
d©a
 = 
	`a°_mödwm
(
a°
, 0x1E6E001C);

1182 } !(
d©a
 & 0x08000000));

1184 
d©a
 = 
	`a°_mödwm
(
a°
, 0x1E6E001C);

1185 
d©a
 = (data >> 8) & 0xff;

1187 
	`a°_moutdwm
(
a°
, 0x1E720058, 
	`a°_mödwm
(ast, 0x1E6E0068) & 0xffff);

1188 
d©a
 = 
	`a°_mödwm
(
a°
, 0x1E6E0018) | 0xC00;

1189 
	`a°_moutdwm
(
a°
, 0x1E6E0018, 
d©a
);

1191 
	`a°_moutdwm
(
a°
, 0x1E6E0034, 0x00000001);

1192 
	`a°_moutdwm
(
a°
, 0x1E6E000C, 0x00000040);

1193 
	`udñay
(50);

1195 
	`a°_moutdwm
(
a°
, 0x1E6E002C, 
∑øm
->
ªg_MRS
 | 0x100);

1196 
	`a°_moutdwm
(
a°
, 0x1E6E0030, 
∑øm
->
ªg_EMRS
);

1197 
	`a°_moutdwm
(
a°
, 0x1E6E0028, 0x00000005);

1198 
	`a°_moutdwm
(
a°
, 0x1E6E0028, 0x00000007);

1199 
	`a°_moutdwm
(
a°
, 0x1E6E0028, 0x00000003);

1200 
	`a°_moutdwm
(
a°
, 0x1E6E0028, 0x00000001);

1201 
	`a°_moutdwm
(
a°
, 0x1E6E002C, 
∑øm
->
ªg_MRS
);

1202 
	`a°_moutdwm
(
a°
, 0x1E6E000C, 0x00005C08);

1203 
	`a°_moutdwm
(
a°
, 0x1E6E0028, 0x00000001);

1205 
	`a°_moutdwm
(
a°
, 0x1E6E000C, 0x00005C01);

1206 
d©a
 = 0;

1207 i‡(
∑øm
->
wodt
) {

1208 
d©a
 = 0x300;

1210 i‡(
∑øm
->
rodt
) {

1211 
d©a
 = d©®| 0x3000 | ((
∑øm
->
ªg_AC2
 & 0x60000) >> 3);

1213 
	`a°_moutdwm
(
a°
, 0x1E6E0034, 
d©a
 | 0x3);

1216 i‡((
	`cbr_dŒ2
(
a°
, 
∑øm
Ë=
Ál£
Ë&& (
ªåy
++ < 10))

1217 
ddr3_öô_°¨t
;

1219 
	`a°_moutdwm
(
a°
, 0x1E6E0120, 
∑øm
->
ªg_FREQ
);

1221 #ifde‡
ECC


1222 
	`a°_moutdwm
(
a°
, 0x1E6E007C, 0x00000000);

1223 
	`a°_moutdwm
(
a°
, 0x1E6E0070, 0x221);

1225 
d©a
 = 
	`a°_mödwm
(
a°
, 0x1E6E0070);

1226 } !(
d©a
 & 0x00001000));

1227 
	`a°_moutdwm
(
a°
, 0x1E6E0070, 0x00000000);

1228 
	`a°_moutdwm
(
a°
, 0x1E6E0050, 0x80000000);

1229 
	`a°_moutdwm
(
a°
, 0x1E6E0050, 0x00000000);

1233 
	}
}

1235 
	$gë_ddr2_öfo
(
a°_¥iv©e
 *
a°
, 
a°2300_døm_∑øm
 *
∑øm
)

1237 
u32
 
å≠
, 
å≠_AC2
, 
å≠_MRS
;

1239 
	`a°_moutdwm
(
a°
, 0x1E6E2000, 0x1688A8A8);

1242 
å≠
 = (
	`a°_mödwm
(
a°
, 0x1E6E2070) >> 25) & 0x3;

1243 
å≠_AC2
 = (
å≠
 << 20) | (trap << 16);

1244 
å≠_AC2
 += 0x00110000;

1245 
å≠_MRS
 = 0x00000040 | (
å≠
 << 4);

1248 
∑øm
->
ªg_MADJ
 = 0x00034C4C;

1249 
∑øm
->
ªg_SADJ
 = 0x00001800;

1250 
∑øm
->
ªg_DRV
 = 0x000000F0;

1251 
∑øm
->
ªg_PERIOD
 =Ö¨am->
døm_‰eq
;

1252 
∑øm
->
rodt
 = 0;

1254 
∑øm
->
døm_‰eq
) {

1256 
	`a°_moutdwm
(
a°
, 0x1E6E2020, 0x0130);

1257 
∑øm
->
wodt
 = 0;

1258 
∑øm
->
ªg_AC1
 = 0x11101513;

1259 
∑øm
->
ªg_AC2
 = 0x78117011;

1260 
∑øm
->
ªg_DQSIC
 = 0x00000092;

1261 
∑øm
->
ªg_MRS
 = 0x00000842;

1262 
∑øm
->
ªg_EMRS
 = 0x00000000;

1263 
∑øm
->
ªg_DRV
 = 0x000000F0;

1264 
∑øm
->
ªg_IOZ
 = 0x00000034;

1265 
∑øm
->
ªg_DQIDLY
 = 0x0000005A;

1266 
∑øm
->
ªg_FREQ
 = 0x00004AC0;

1267 
∑øm
->
madj_max
 = 138;

1268 
∑øm
->
dŒ2_föëu√_°ï
 = 3;

1271 
	`a°_moutdwm
(
a°
, 0x1E6E2020, 0x0190);

1272 
∑øm
->
wodt
 = 1;

1273 
∑øm
->
ªg_AC1
 = 0x22202613;

1274 
∑øm
->
ªg_AC2
 = 0xAA009016 | 
å≠_AC2
;

1275 
∑øm
->
ªg_DQSIC
 = 0x000000BA;

1276 
∑øm
->
ªg_MRS
 = 0x00000A02 | 
å≠_MRS
;

1277 
∑øm
->
ªg_EMRS
 = 0x00000040;

1278 
∑øm
->
ªg_DRV
 = 0x000000FA;

1279 
∑øm
->
ªg_IOZ
 = 0x00000034;

1280 
∑øm
->
ªg_DQIDLY
 = 0x00000074;

1281 
∑øm
->
ªg_FREQ
 = 0x00004DC0;

1282 
∑øm
->
madj_max
 = 96;

1283 
∑øm
->
dŒ2_föëu√_°ï
 = 3;

1284 
∑øm
->
døm_chùid
) {

1286 
AST_DRAM_512Mx16
:

1287 
∑øm
->
ªg_AC2
 = 0xAA009012 | 
å≠_AC2
;

1289 
AST_DRAM_1Gx16
:

1290 
∑øm
->
ªg_AC2
 = 0xAA009016 | 
å≠_AC2
;

1292 
AST_DRAM_2Gx16
:

1293 
∑øm
->
ªg_AC2
 = 0xAA009023 | 
å≠_AC2
;

1295 
AST_DRAM_4Gx16
:

1296 
∑øm
->
ªg_AC2
 = 0xAA00903B | 
å≠_AC2
;

1302 
	`a°_moutdwm
(
a°
, 0x1E6E2020, 0x03F1);

1303 
∑øm
->
wodt
 = 1;

1304 
∑øm
->
rodt
 = 0;

1305 
∑øm
->
ªg_AC1
 = 0x33302714;

1306 
∑øm
->
ªg_AC2
 = 0xCC00B01B | 
å≠_AC2
;

1307 
∑øm
->
ªg_DQSIC
 = 0x000000E2;

1308 
∑øm
->
ªg_MRS
 = 0x00000C02 | 
å≠_MRS
;

1309 
∑øm
->
ªg_EMRS
 = 0x00000040;

1310 
∑øm
->
ªg_DRV
 = 0x000000FA;

1311 
∑øm
->
ªg_IOZ
 = 0x00000034;

1312 
∑øm
->
ªg_DQIDLY
 = 0x00000089;

1313 
∑øm
->
ªg_FREQ
 = 0x00005040;

1314 
∑øm
->
madj_max
 = 96;

1315 
∑øm
->
dŒ2_föëu√_°ï
 = 4;

1317 
∑øm
->
døm_chùid
) {

1318 
AST_DRAM_512Mx16
:

1319 
∑øm
->
ªg_AC2
 = 0xCC00B016 | 
å≠_AC2
;

1322 
AST_DRAM_1Gx16
:

1323 
∑øm
->
ªg_AC2
 = 0xCC00B01B | 
å≠_AC2
;

1325 
AST_DRAM_2Gx16
:

1326 
∑øm
->
ªg_AC2
 = 0xCC00B02B | 
å≠_AC2
;

1328 
AST_DRAM_4Gx16
:

1329 
∑øm
->
ªg_AC2
 = 0xCC00B03F | 
å≠_AC2
;

1336 
	`a°_moutdwm
(
a°
, 0x1E6E2020, 0x01F0);

1337 
∑øm
->
wodt
 = 1;

1338 
∑øm
->
rodt
 = 0;

1339 
∑øm
->
ªg_AC1
 = 0x33302714;

1340 
∑øm
->
ªg_AC2
 = 0xCC00B01B | 
å≠_AC2
;

1341 
∑øm
->
ªg_DQSIC
 = 0x000000E2;

1342 
∑øm
->
ªg_MRS
 = 0x00000C02 | 
å≠_MRS
;

1343 
∑øm
->
ªg_EMRS
 = 0x00000040;

1344 
∑øm
->
ªg_DRV
 = 0x000000FA;

1345 
∑øm
->
ªg_IOZ
 = 0x00000034;

1346 
∑øm
->
ªg_DQIDLY
 = 0x00000089;

1347 
∑øm
->
ªg_FREQ
 = 0x000050C0;

1348 
∑øm
->
madj_max
 = 96;

1349 
∑øm
->
dŒ2_föëu√_°ï
 = 4;

1351 
∑øm
->
døm_chùid
) {

1352 
AST_DRAM_512Mx16
:

1353 
∑øm
->
ªg_AC2
 = 0xCC00B016 | 
å≠_AC2
;

1356 
AST_DRAM_1Gx16
:

1357 
∑øm
->
ªg_AC2
 = 0xCC00B01B | 
å≠_AC2
;

1359 
AST_DRAM_2Gx16
:

1360 
∑øm
->
ªg_AC2
 = 0xCC00B02B | 
å≠_AC2
;

1362 
AST_DRAM_4Gx16
:

1363 
∑øm
->
ªg_AC2
 = 0xCC00B03F | 
å≠_AC2
;

1369 
	`a°_moutdwm
(
a°
, 0x1E6E2020, 0x0230);

1370 
∑øm
->
wodt
 = 0;

1371 
∑øm
->
ªg_AC1
 = 0x33302815;

1372 
∑øm
->
ªg_AC2
 = 0xCD44B01E;

1373 
∑øm
->
ªg_DQSIC
 = 0x000000FC;

1374 
∑øm
->
ªg_MRS
 = 0x00000E72;

1375 
∑øm
->
ªg_EMRS
 = 0x00000000;

1376 
∑øm
->
ªg_DRV
 = 0x00000000;

1377 
∑øm
->
ªg_IOZ
 = 0x00000034;

1378 
∑øm
->
ªg_DQIDLY
 = 0x00000097;

1379 
∑øm
->
ªg_FREQ
 = 0x000052C0;

1380 
∑øm
->
madj_max
 = 88;

1381 
∑øm
->
dŒ2_föëu√_°ï
 = 3;

1384 
	`a°_moutdwm
(
a°
, 0x1E6E2020, 0x0261);

1385 
∑øm
->
wodt
 = 1;

1386 
∑øm
->
rodt
 = 1;

1387 
∑øm
->
ªg_AC1
 = 0x33302815;

1388 
∑øm
->
ªg_AC2
 = 0xDE44C022;

1389 
∑øm
->
ªg_DQSIC
 = 0x00000117;

1390 
∑øm
->
ªg_MRS
 = 0x00000E72;

1391 
∑øm
->
ªg_EMRS
 = 0x00000040;

1392 
∑øm
->
ªg_DRV
 = 0x0000000A;

1393 
∑øm
->
ªg_IOZ
 = 0x00000045;

1394 
∑øm
->
ªg_DQIDLY
 = 0x000000A0;

1395 
∑øm
->
ªg_FREQ
 = 0x000054C0;

1396 
∑øm
->
madj_max
 = 79;

1397 
∑øm
->
dŒ2_föëu√_°ï
 = 3;

1400 
	`a°_moutdwm
(
a°
, 0x1E6E2020, 0x0120);

1401 
∑øm
->
wodt
 = 1;

1402 
∑øm
->
rodt
 = 1;

1403 
∑øm
->
ªg_AC1
 = 0x33302815;

1404 
∑øm
->
ªg_AC2
 = 0xEF44D024;

1405 
∑øm
->
ªg_DQSIC
 = 0x00000125;

1406 
∑øm
->
ªg_MRS
 = 0x00000E72;

1407 
∑øm
->
ªg_EMRS
 = 0x00000004;

1408 
∑øm
->
ªg_DRV
 = 0x000000F9;

1409 
∑øm
->
ªg_IOZ
 = 0x00000045;

1410 
∑øm
->
ªg_DQIDLY
 = 0x000000A7;

1411 
∑øm
->
ªg_FREQ
 = 0x000055C0;

1412 
∑øm
->
madj_max
 = 76;

1413 
∑øm
->
dŒ2_föëu√_°ï
 = 3;

1416 
	`a°_moutdwm
(
a°
, 0x1E6E2020, 0x02A1);

1417 
∑øm
->
wodt
 = 1;

1418 
∑øm
->
rodt
 = 1;

1419 
∑øm
->
ªg_AC1
 = 0x43402915;

1420 
∑øm
->
ªg_AC2
 = 0xFF44E025;

1421 
∑øm
->
ªg_DQSIC
 = 0x00000132;

1422 
∑øm
->
ªg_MRS
 = 0x00000E72;

1423 
∑øm
->
ªg_EMRS
 = 0x00000040;

1424 
∑øm
->
ªg_DRV
 = 0x0000000A;

1425 
∑øm
->
ªg_IOZ
 = 0x00000045;

1426 
∑øm
->
ªg_DQIDLY
 = 0x000000AD;

1427 
∑øm
->
ªg_FREQ
 = 0x000056C0;

1428 
∑øm
->
madj_max
 = 76;

1429 
∑øm
->
dŒ2_föëu√_°ï
 = 3;

1432 
	`a°_moutdwm
(
a°
, 0x1E6E2020, 0x0140);

1433 
∑øm
->
wodt
 = 1;

1434 
∑øm
->
rodt
 = 1;

1435 
∑øm
->
ªg_AC1
 = 0x43402915;

1436 
∑øm
->
ªg_AC2
 = 0xFF44E027;

1437 
∑øm
->
ªg_DQSIC
 = 0x0000013F;

1438 
∑øm
->
ªg_MRS
 = 0x00000E72;

1439 
∑øm
->
ªg_EMRS
 = 0x00000004;

1440 
∑øm
->
ªg_DRV
 = 0x000000F5;

1441 
∑øm
->
ªg_IOZ
 = 0x00000045;

1442 
∑øm
->
ªg_DQIDLY
 = 0x000000B3;

1443 
∑øm
->
ªg_FREQ
 = 0x000057C0;

1444 
∑øm
->
madj_max
 = 76;

1445 
∑øm
->
dŒ2_föëu√_°ï
 = 3;

1449 
∑øm
->
døm_chùid
) {

1450 
AST_DRAM_512Mx16
:

1451 
∑øm
->
døm_c⁄fig
 = 0x100;

1454 
AST_DRAM_1Gx16
:

1455 
∑øm
->
døm_c⁄fig
 = 0x121;

1457 
AST_DRAM_2Gx16
:

1458 
∑øm
->
døm_c⁄fig
 = 0x122;

1460 
AST_DRAM_4Gx16
:

1461 
∑øm
->
døm_c⁄fig
 = 0x123;

1465 
∑øm
->
vøm_size
) {

1467 
AST_VIDMEM_SIZE_8M
:

1468 
∑øm
->
døm_c⁄fig
 |= 0x00;

1470 
AST_VIDMEM_SIZE_16M
:

1471 
∑øm
->
døm_c⁄fig
 |= 0x04;

1473 
AST_VIDMEM_SIZE_32M
:

1474 
∑øm
->
døm_c⁄fig
 |= 0x08;

1476 
AST_VIDMEM_SIZE_64M
:

1477 
∑øm
->
døm_c⁄fig
 |= 0x0c;

1480 
	}
}

1482 
	$ddr2_öô
(
a°_¥iv©e
 *
a°
, 
a°2300_døm_∑øm
 *
∑øm
)

1484 
u32
 
d©a
, 
d©a2
, 
ªåy
 = 0;

1486 
ddr2_öô_°¨t
:

1487 
	`a°_moutdwm
(
a°
, 0x1E6E0000, 0xFC600309);

1488 
	`a°_moutdwm
(
a°
, 0x1E6E0018, 0x00000100);

1489 
	`a°_moutdwm
(
a°
, 0x1E6E0024, 0x00000000);

1490 
	`a°_moutdwm
(
a°
, 0x1E6E0064, 
∑øm
->
ªg_MADJ
);

1491 
	`a°_moutdwm
(
a°
, 0x1E6E0068, 
∑øm
->
ªg_SADJ
);

1492 
	`udñay
(10);

1493 
	`a°_moutdwm
(
a°
, 0x1E6E0064, 
∑øm
->
ªg_MADJ
 | 0xC0000);

1494 
	`udñay
(10);

1496 
	`a°_moutdwm
(
a°
, 0x1E6E0004, 
∑øm
->
døm_c⁄fig
);

1497 
	`a°_moutdwm
(
a°
, 0x1E6E0008, 0x90040f);

1498 
	`a°_moutdwm
(
a°
, 0x1E6E0010, 
∑øm
->
ªg_AC1
);

1499 
	`a°_moutdwm
(
a°
, 0x1E6E0014, 
∑øm
->
ªg_AC2
);

1500 
	`a°_moutdwm
(
a°
, 0x1E6E0020, 
∑øm
->
ªg_DQSIC
);

1501 
	`a°_moutdwm
(
a°
, 0x1E6E0080, 0x00000000);

1502 
	`a°_moutdwm
(
a°
, 0x1E6E0084, 0x00000000);

1503 
	`a°_moutdwm
(
a°
, 0x1E6E0088, 
∑øm
->
ªg_DQIDLY
);

1504 
	`a°_moutdwm
(
a°
, 0x1E6E0018, 0x4000A130);

1505 
	`a°_moutdwm
(
a°
, 0x1E6E0018, 0x00002330);

1506 
	`a°_moutdwm
(
a°
, 0x1E6E0038, 0x00000000);

1507 
	`a°_moutdwm
(
a°
, 0x1E6E0040, 0xFF808000);

1508 
	`a°_moutdwm
(
a°
, 0x1E6E0044, 0x88848466);

1509 
	`a°_moutdwm
(
a°
, 0x1E6E0048, 0x44440008);

1510 
	`a°_moutdwm
(
a°
, 0x1E6E004C, 0x00000000);

1511 
	`a°_moutdwm
(
a°
, 0x1E6E0050, 0x80000000);

1512 
	`a°_moutdwm
(
a°
, 0x1E6E0050, 0x00000000);

1513 
	`a°_moutdwm
(
a°
, 0x1E6E0054, 0);

1514 
	`a°_moutdwm
(
a°
, 0x1E6E0060, 
∑øm
->
ªg_DRV
);

1515 
	`a°_moutdwm
(
a°
, 0x1E6E006C, 
∑øm
->
ªg_IOZ
);

1516 
	`a°_moutdwm
(
a°
, 0x1E6E0070, 0x00000000);

1517 
	`a°_moutdwm
(
a°
, 0x1E6E0074, 0x00000000);

1518 
	`a°_moutdwm
(
a°
, 0x1E6E0078, 0x00000000);

1519 
	`a°_moutdwm
(
a°
, 0x1E6E007C, 0x00000000);

1523 
d©a
 = 
	`a°_mödwm
(
a°
, 0x1E6E001C);

1524 } !(
d©a
 & 0x08000000));

1525 
d©a
 = 
	`a°_mödwm
(
a°
, 0x1E6E001C);

1526 
d©a
 = (data >> 8) & 0xff;

1527 (
d©a
 & 0x08) || ((data & 0x7) < 2) || (data < 4)) {

1528 
d©a2
 = (
	`a°_mödwm
(
a°
, 0x1E6E0064) & 0xfff3ffff) + 4;

1529 i‡((
d©a2
 & 0xffË> 
∑øm
->
madj_max
) {

1532 
	`a°_moutdwm
(
a°
, 0x1E6E0064, 
d©a2
);

1533 i‡(
d©a2
 & 0x00100000) {

1534 
d©a2
 = ((data2 & 0xff) >> 3) + 3;

1536 
d©a2
 = ((data2 & 0xff) >> 2) + 5;

1538 
d©a
 = 
	`a°_mödwm
(
a°
, 0x1E6E0068) & 0xffff00ff;

1539 
d©a2
 +
d©a
 & 0xff;

1540 
d©a
 = d©®| (
d©a2
 << 8);

1541 
	`a°_moutdwm
(
a°
, 0x1E6E0068, 
d©a
);

1542 
	`udñay
(10);

1543 
	`a°_moutdwm
(
a°
, 0x1E6E0064, 
	`a°_mödwm
(ast, 0x1E6E0064) | 0xC0000);

1544 
	`udñay
(10);

1545 
d©a
 = 
	`a°_mödwm
(
a°
, 0x1E6E0018) & 0xfffff1ff;

1546 
	`a°_moutdwm
(
a°
, 0x1E6E0018, 
d©a
);

1547 
d©a
 = data | 0x200;

1548 
	`a°_moutdwm
(
a°
, 0x1E6E0018, 
d©a
);

1550 
d©a
 = 
	`a°_mödwm
(
a°
, 0x1E6E001C);

1551 } !(
d©a
 & 0x08000000));

1553 
d©a
 = 
	`a°_mödwm
(
a°
, 0x1E6E001C);

1554 
d©a
 = (data >> 8) & 0xff;

1556 
	`a°_moutdwm
(
a°
, 0x1E720058, 
	`a°_mödwm
(ast, 0x1E6E0008) & 0xffff);

1557 
d©a
 = 
	`a°_mödwm
(
a°
, 0x1E6E0018) | 0xC00;

1558 
	`a°_moutdwm
(
a°
, 0x1E6E0018, 
d©a
);

1560 
	`a°_moutdwm
(
a°
, 0x1E6E0034, 0x00000001);

1561 
	`a°_moutdwm
(
a°
, 0x1E6E000C, 0x00000000);

1562 
	`udñay
(50);

1564 
	`a°_moutdwm
(
a°
, 0x1E6E002C, 
∑øm
->
ªg_MRS
 | 0x100);

1565 
	`a°_moutdwm
(
a°
, 0x1E6E0030, 
∑øm
->
ªg_EMRS
);

1566 
	`a°_moutdwm
(
a°
, 0x1E6E0028, 0x00000005);

1567 
	`a°_moutdwm
(
a°
, 0x1E6E0028, 0x00000007);

1568 
	`a°_moutdwm
(
a°
, 0x1E6E0028, 0x00000003);

1569 
	`a°_moutdwm
(
a°
, 0x1E6E0028, 0x00000001);

1571 
	`a°_moutdwm
(
a°
, 0x1E6E000C, 0x00005C08);

1572 
	`a°_moutdwm
(
a°
, 0x1E6E002C, 
∑øm
->
ªg_MRS
);

1573 
	`a°_moutdwm
(
a°
, 0x1E6E0028, 0x00000001);

1574 
	`a°_moutdwm
(
a°
, 0x1E6E0030, 
∑øm
->
ªg_EMRS
 | 0x380);

1575 
	`a°_moutdwm
(
a°
, 0x1E6E0028, 0x00000003);

1576 
	`a°_moutdwm
(
a°
, 0x1E6E0030, 
∑øm
->
ªg_EMRS
);

1577 
	`a°_moutdwm
(
a°
, 0x1E6E0028, 0x00000003);

1579 
	`a°_moutdwm
(
a°
, 0x1E6E000C, 0x7FFF5C01);

1580 
d©a
 = 0;

1581 i‡(
∑øm
->
wodt
) {

1582 
d©a
 = 0x500;

1584 i‡(
∑øm
->
rodt
) {

1585 
d©a
 = d©®| 0x3000 | ((
∑øm
->
ªg_AC2
 & 0x60000) >> 3);

1587 
	`a°_moutdwm
(
a°
, 0x1E6E0034, 
d©a
 | 0x3);

1588 
	`a°_moutdwm
(
a°
, 0x1E6E0120, 
∑øm
->
ªg_FREQ
);

1591 i‡((
	`cbr_dŒ2
(
a°
, 
∑øm
Ë=
Ál£
Ë&& (
ªåy
++ < 10))

1592 
ddr2_öô_°¨t
;

1595 #ifde‡
ECC


1596 
	`a°_moutdwm
(
a°
, 0x1E6E007C, 0x00000000);

1597 
	`a°_moutdwm
(
a°
, 0x1E6E0070, 0x221);

1599 
d©a
 = 
	`a°_mödwm
(
a°
, 0x1E6E0070);

1600 } !(
d©a
 & 0x00001000));

1601 
	`a°_moutdwm
(
a°
, 0x1E6E0070, 0x00000000);

1602 
	`a°_moutdwm
(
a°
, 0x1E6E0050, 0x80000000);

1603 
	`a°_moutdwm
(
a°
, 0x1E6E0050, 0x00000000);

1606 
	}
}

1608 
	$a°_po°_chù_2300
(
drm_devi˚
 *
dev
)

1610 
a°_¥iv©e
 *
a°
 = 
dev
->
dev_¥iv©e
;

1611 
a°2300_døm_∑øm
 
∑øm
;

1612 
u32
 
ãmp
;

1613 
u8
 
ªg
;

1615 
ªg
 = 
	`a°_gë_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xd0, 0xff);

1616 i‡((
ªg
 & 0x80) == 0) {

1617 
	`a°_wrôe32
(
a°
, 0xf004, 0x1e6e0000);

1618 
	`a°_wrôe32
(
a°
, 0xf000, 0x1);

1619 
	`a°_wrôe32
(
a°
, 0x12000, 0x1688a8a8);

1622 } 
	`a°_ªad32
(
a°
, 0x12000) != 0x1);

1624 
	`a°_wrôe32
(
a°
, 0x10000, 0xfc600309);

1627 } 
	`a°_ªad32
(
a°
, 0x10000) != 0x1);

1630 
ãmp
 = 
	`a°_ªad32
(
a°
, 0x12008);

1631 
ãmp
 |= 0x73;

1632 
	`a°_wrôe32
(
a°
, 0x12008, 
ãmp
);

1634 
∑øm
.
døm_‰eq
 = 396;

1635 
∑øm
.
døm_ty≥
 = 
AST_DDR3
;

1636 
ãmp
 = 
	`a°_mödwm
(
a°
, 0x1e6e2070);

1637 i‡(
ãmp
 & 0x01000000)

1638 
∑øm
.
døm_ty≥
 = 
AST_DDR2
;

1639 
ãmp
 & 0x18000000) {

1641 
∑øm
.
døm_chùid
 = 
AST_DRAM_512Mx16
;

1645 
∑øm
.
døm_chùid
 = 
AST_DRAM_1Gx16
;

1648 
∑øm
.
døm_chùid
 = 
AST_DRAM_2Gx16
;

1651 
∑øm
.
døm_chùid
 = 
AST_DRAM_4Gx16
;

1654 
ãmp
 & 0x0c) {

1657 
∑øm
.
vøm_size
 = 
AST_VIDMEM_SIZE_8M
;

1661 
∑øm
.
vøm_size
 = 
AST_VIDMEM_SIZE_16M
;

1665 
∑øm
.
vøm_size
 = 
AST_VIDMEM_SIZE_32M
;

1669 
∑øm
.
vøm_size
 = 
AST_VIDMEM_SIZE_64M
;

1673 i‡(
∑øm
.
døm_ty≥
 =
AST_DDR3
) {

1674 
	`gë_ddr3_öfo
(
a°
, &
∑øm
);

1675 
	`ddr3_öô
(
a°
, &
∑øm
);

1677 
	`gë_ddr2_öfo
(
a°
, &
∑øm
);

1678 
	`ddr2_öô
(
a°
, &
∑øm
);

1681 
ãmp
 = 
	`a°_mödwm
(
a°
, 0x1e6e2040);

1682 
	`a°_moutdwm
(
a°
, 0x1e6e2040, 
ãmp
 | 0x40);

1687 
ªg
 = 
	`a°_gë_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xd0, 0xff);

1688 } (
ªg
 & 0x40) == 0);

1689 
	}
}

1691 
boﬁ
 
	$cbr_ã°_2500
(
a°_¥iv©e
 *
a°
)

1693 
	`a°_moutdwm
(
a°
, 0x1E6E0074, 0x0000FFFF);

1694 
	`a°_moutdwm
(
a°
, 0x1E6E007C, 0xFF00FF00);

1695 i‡(!
	`mmc_ã°_bur°
(
a°
, 0))

1696  
Ál£
;

1697 i‡(!
	`mmc_ã°_sögÀ_2500
(
a°
, 0))

1698  
Ál£
;

1699  
åue
;

1700 
	}
}

1702 
boﬁ
 
	$ddr_ã°_2500
(
a°_¥iv©e
 *
a°
)

1704 
	`a°_moutdwm
(
a°
, 0x1E6E0074, 0x0000FFFF);

1705 
	`a°_moutdwm
(
a°
, 0x1E6E007C, 0xFF00FF00);

1706 i‡(!
	`mmc_ã°_bur°
(
a°
, 0))

1707  
Ál£
;

1708 i‡(!
	`mmc_ã°_bur°
(
a°
, 1))

1709  
Ál£
;

1710 i‡(!
	`mmc_ã°_bur°
(
a°
, 2))

1711  
Ál£
;

1712 i‡(!
	`mmc_ã°_bur°
(
a°
, 3))

1713  
Ál£
;

1714 i‡(!
	`mmc_ã°_sögÀ_2500
(
a°
, 0))

1715  
Ál£
;

1716  
åue
;

1717 
	}
}

1719 
	$ddr_öô_comm⁄_2500
(
a°_¥iv©e
 *
a°
)

1721 
	`a°_moutdwm
(
a°
, 0x1E6E0034, 0x00020080);

1722 
	`a°_moutdwm
(
a°
, 0x1E6E0008, 0x2003000F);

1723 
	`a°_moutdwm
(
a°
, 0x1E6E0038, 0x00000FFF);

1724 
	`a°_moutdwm
(
a°
, 0x1E6E0040, 0x88448844);

1725 
	`a°_moutdwm
(
a°
, 0x1E6E0044, 0x24422288);

1726 
	`a°_moutdwm
(
a°
, 0x1E6E0048, 0x22222222);

1727 
	`a°_moutdwm
(
a°
, 0x1E6E004C, 0x22222222);

1728 
	`a°_moutdwm
(
a°
, 0x1E6E0050, 0x80000000);

1729 
	`a°_moutdwm
(
a°
, 0x1E6E0208, 0x00000000);

1730 
	`a°_moutdwm
(
a°
, 0x1E6E0218, 0x00000000);

1731 
	`a°_moutdwm
(
a°
, 0x1E6E0220, 0x00000000);

1732 
	`a°_moutdwm
(
a°
, 0x1E6E0228, 0x00000000);

1733 
	`a°_moutdwm
(
a°
, 0x1E6E0230, 0x00000000);

1734 
	`a°_moutdwm
(
a°
, 0x1E6E02A8, 0x00000000);

1735 
	`a°_moutdwm
(
a°
, 0x1E6E02B0, 0x00000000);

1736 
	`a°_moutdwm
(
a°
, 0x1E6E0240, 0x86000000);

1737 
	`a°_moutdwm
(
a°
, 0x1E6E0244, 0x00008600);

1738 
	`a°_moutdwm
(
a°
, 0x1E6E0248, 0x80000000);

1739 
	`a°_moutdwm
(
a°
, 0x1E6E024C, 0x80808080);

1740 
	}
}

1742 
	$ddr_phy_öô_2500
(
a°_¥iv©e
 *
a°
)

1744 
u32
 
d©a
, 
∑ss
, 
time˙t
;

1746 
∑ss
 = 0;

1747 
	`a°_moutdwm
(
a°
, 0x1E6E0060, 0x00000005);

1748 !
∑ss
) {

1749 
time˙t
 = 0;Åime˙à< 
TIMEOUT
;Åimecnt++) {

1750 
d©a
 = 
	`a°_mödwm
(
a°
, 0x1E6E0060) & 0x1;

1751 i‡(!
d©a
)

1754 i‡(
time˙t
 !
TIMEOUT
) {

1755 
d©a
 = 
	`a°_mödwm
(
a°
, 0x1E6E0300) & 0x000A0000;

1756 i‡(!
d©a
)

1757 
∑ss
 = 1;

1759 i‡(!
∑ss
) {

1760 
	`a°_moutdwm
(
a°
, 0x1E6E0060, 0x00000000);

1761 
	`udñay
(10);

1762 
	`a°_moutdwm
(
a°
, 0x1E6E0060, 0x00000005);

1766 
	`a°_moutdwm
(
a°
, 0x1E6E0060, 0x00000006);

1767 
	}
}

1776 
	$check_døm_size_2500
(
a°_¥iv©e
 *
a°
, 
u32
 
tRFC
)

1778 
u32
 
ªg_04
, 
ªg_14
;

1780 
ªg_04
 = 
	`a°_mödwm
(
a°
, 0x1E6E0004) & 0xfffffffc;

1781 
ªg_14
 = 
	`a°_mödwm
(
a°
, 0x1E6E0014) & 0xffffff00;

1783 
	`a°_moutdwm
(
a°
, 0xA0100000, 0x41424344);

1784 
	`a°_moutdwm
(
a°
, 0x90100000, 0x35363738);

1785 
	`a°_moutdwm
(
a°
, 0x88100000, 0x292A2B2C);

1786 
	`a°_moutdwm
(
a°
, 0x80100000, 0x1D1E1F10);

1789 i‡(
	`a°_mödwm
(
a°
, 0xA0100000) == 0x41424344) {

1790 
ªg_04
 |= 0x03;

1791 
ªg_14
 |(
tRFC
 >> 24) & 0xFF;

1793 } i‡(
	`a°_mödwm
(
a°
, 0x90100000) == 0x35363738) {

1794 
ªg_04
 |= 0x02;

1795 
ªg_14
 |(
tRFC
 >> 16) & 0xFF;

1797 } i‡(
	`a°_mödwm
(
a°
, 0x88100000) == 0x292A2B2C) {

1798 
ªg_04
 |= 0x01;

1799 
ªg_14
 |(
tRFC
 >> 8) & 0xFF;

1801 
ªg_14
 |
tRFC
 & 0xFF;

1803 
	`a°_moutdwm
(
a°
, 0x1E6E0004, 
ªg_04
);

1804 
	`a°_moutdwm
(
a°
, 0x1E6E0014, 
ªg_14
);

1805 
	}
}

1807 
	$íabÀ_ˇche_2500
(
a°_¥iv©e
 *
a°
)

1809 
u32
 
ªg_04
, 
d©a
;

1811 
ªg_04
 = 
	`a°_mödwm
(
a°
, 0x1E6E0004);

1812 
	`a°_moutdwm
(
a°
, 0x1E6E0004, 
ªg_04
 | 0x1000);

1815 
d©a
 = 
	`a°_mödwm
(
a°
, 0x1E6E0004);

1816 !(
d©a
 & 0x80000));

1817 
	`a°_moutdwm
(
a°
, 0x1E6E0004, 
ªg_04
 | 0x400);

1818 
	}
}

1820 
	$£t_m∂l_2500
(
a°_¥iv©e
 *
a°
)

1822 
u32
 
addr
, 
d©a
, 
∑øm
;

1825 
	`a°_moutdwm
(
a°
, 0x1E6E0000, 0xFC600309);

1826 
	`a°_moutdwm
(
a°
, 0x1E6E0034, 0x00020080);

1827 
addr
 = 0x1e6e0004;áddr < 0x1e6e0090;) {

1828 
	`a°_moutdwm
(
a°
, 
addr
, 0x0);

1829 
addr
 += 4;

1831 
	`a°_moutdwm
(
a°
, 0x1E6E0034, 0x00020000);

1833 
	`a°_moutdwm
(
a°
, 0x1E6E2000, 0x1688A8A8);

1834 
d©a
 = 
	`a°_mödwm
(
a°
, 0x1E6E2070) & 0x00800000;

1835 i‡(
d©a
) {

1837 
∑øm
 = 0x930023E0;

1838 
	`a°_moutdwm
(
a°
, 0x1E6E2160, 0x00011320);

1841 
∑øm
 = 0x93002400;

1843 
	`a°_moutdwm
(
a°
, 0x1E6E2020, 
∑øm
);

1844 
	`udñay
(100);

1845 
	}
}

1847 
	$ª£t_mmc_2500
(
a°_¥iv©e
 *
a°
)

1849 
u32
 
d©a
;

1851 
	`a°_moutdwm
(
a°
, 0x1E78505C, 0x00000004);

1852 
	`a°_moutdwm
(
a°
, 0x1E785044, 0x00000001);

1853 
	`a°_moutdwm
(
a°
, 0x1E785048, 0x00004755);

1854 
	`a°_moutdwm
(
a°
, 0x1E78504C, 0x00000013);

1855 
	`mdñay
(100);

1856 
	`a°_moutdwm
(
a°
, 0x1E78505c,0x023FFFF3);

1857 
	`a°_moutdwm
(
a°
, 0x1E785054,0x00000077);

1859 
	`a°_moutdwm
(
a°
, 0x1E6E0000,0xFC600309);

1860 
d©a
 = 
	`a°_mödwm
(
a°
, 0x1E6E0000);

1861 }
d©a
 == 0);

1862 
	`a°_moutdwm
(
a°
, 0x1E6E0034,0x00020000);

1863 
	}
}

1865 
	$ddr3_öô_2500
(
a°_¥iv©e
 *
a°
, c⁄° 
u32
 *
ddr_èbÀ
)

1868 
	`a°_moutdwm
(
a°
, 0x1E6E0004, 0x00000303);

1869 
	`a°_moutdwm
(
a°
, 0x1E6E0010, 
ddr_èbÀ
[
REGIDX_010
]);

1870 
	`a°_moutdwm
(
a°
, 0x1E6E0014, 
ddr_èbÀ
[
REGIDX_014
]);

1871 
	`a°_moutdwm
(
a°
, 0x1E6E0018, 
ddr_èbÀ
[
REGIDX_018
]);

1872 
	`a°_moutdwm
(
a°
, 0x1E6E0020, 
ddr_èbÀ
[
REGIDX_020
]);

1873 
	`a°_moutdwm
(
a°
, 0x1E6E0024, 
ddr_èbÀ
[
REGIDX_024
]);

1874 
	`a°_moutdwm
(
a°
, 0x1E6E002C, 
ddr_èbÀ
[
REGIDX_02C
] | 0x100);

1875 
	`a°_moutdwm
(
a°
, 0x1E6E0030, 
ddr_èbÀ
[
REGIDX_030
]);

1878 
	`a°_moutdwm
(
a°
, 0x1E6E0200, 0x02492AAE);

1879 
	`a°_moutdwm
(
a°
, 0x1E6E0204, 0x00001001);

1880 
	`a°_moutdwm
(
a°
, 0x1E6E020C, 0x55E00B0B);

1881 
	`a°_moutdwm
(
a°
, 0x1E6E0210, 0x20000000);

1882 
	`a°_moutdwm
(
a°
, 0x1E6E0214, 
ddr_èbÀ
[
REGIDX_214
]);

1883 
	`a°_moutdwm
(
a°
, 0x1E6E02E0, 
ddr_èbÀ
[
REGIDX_2E0
]);

1884 
	`a°_moutdwm
(
a°
, 0x1E6E02E4, 
ddr_èbÀ
[
REGIDX_2E4
]);

1885 
	`a°_moutdwm
(
a°
, 0x1E6E02E8, 
ddr_èbÀ
[
REGIDX_2E8
]);

1886 
	`a°_moutdwm
(
a°
, 0x1E6E02EC, 
ddr_èbÀ
[
REGIDX_2EC
]);

1887 
	`a°_moutdwm
(
a°
, 0x1E6E02F0, 
ddr_èbÀ
[
REGIDX_2F0
]);

1888 
	`a°_moutdwm
(
a°
, 0x1E6E02F4, 
ddr_èbÀ
[
REGIDX_2F4
]);

1889 
	`a°_moutdwm
(
a°
, 0x1E6E02F8, 
ddr_èbÀ
[
REGIDX_2F8
]);

1890 
	`a°_moutdwm
(
a°
, 0x1E6E0290, 0x00100008);

1891 
	`a°_moutdwm
(
a°
, 0x1E6E02C0, 0x00000006);

1894 
	`a°_moutdwm
(
a°
, 0x1E6E0034, 0x00020091);

1897 
	`ddr_phy_öô_2500
(
a°
);

1899 
	`a°_moutdwm
(
a°
, 0x1E6E0120, 
ddr_èbÀ
[
REGIDX_PLL
]);

1900 
	`a°_moutdwm
(
a°
, 0x1E6E000C, 0x42AA5C81);

1901 
	`a°_moutdwm
(
a°
, 0x1E6E0034, 0x0001AF93);

1903 
	`check_døm_size_2500
(
a°
, 
ddr_èbÀ
[
REGIDX_RFC
]);

1904 
	`íabÀ_ˇche_2500
(
a°
);

1905 
	`a°_moutdwm
(
a°
, 0x1E6E001C, 0x00000008);

1906 
	`a°_moutdwm
(
a°
, 0x1E6E0038, 0xFFFFFF00);

1907 
	}
}

1909 
	$ddr4_öô_2500
(
a°_¥iv©e
 *
a°
, c⁄° 
u32
 *
ddr_èbÀ
)

1911 
u32
 
d©a
, 
d©a2
, 
∑ss
, 
ªåy˙t
;

1912 
u32
 
ddr_vªf
, 
phy_vªf
;

1913 
u32
 
mö_ddr_vªf
 = 0, 
mö_phy_vªf
 = 0;

1914 
u32
 
max_ddr_vªf
 = 0, 
max_phy_vªf
 = 0;

1916 
	`a°_moutdwm
(
a°
, 0x1E6E0004, 0x00000313);

1917 
	`a°_moutdwm
(
a°
, 0x1E6E0010, 
ddr_èbÀ
[
REGIDX_010
]);

1918 
	`a°_moutdwm
(
a°
, 0x1E6E0014, 
ddr_èbÀ
[
REGIDX_014
]);

1919 
	`a°_moutdwm
(
a°
, 0x1E6E0018, 
ddr_èbÀ
[
REGIDX_018
]);

1920 
	`a°_moutdwm
(
a°
, 0x1E6E0020, 
ddr_èbÀ
[
REGIDX_020
]);

1921 
	`a°_moutdwm
(
a°
, 0x1E6E0024, 
ddr_èbÀ
[
REGIDX_024
]);

1922 
	`a°_moutdwm
(
a°
, 0x1E6E002C, 
ddr_èbÀ
[
REGIDX_02C
] | 0x100);

1923 
	`a°_moutdwm
(
a°
, 0x1E6E0030, 
ddr_èbÀ
[
REGIDX_030
]);

1926 
	`a°_moutdwm
(
a°
, 0x1E6E0200, 0x42492AAE);

1927 
	`a°_moutdwm
(
a°
, 0x1E6E0204, 0x09002800);

1928 
	`a°_moutdwm
(
a°
, 0x1E6E020C, 0x55E00B0B);

1929 
	`a°_moutdwm
(
a°
, 0x1E6E0210, 0x20000000);

1930 
	`a°_moutdwm
(
a°
, 0x1E6E0214, 
ddr_èbÀ
[
REGIDX_214
]);

1931 
	`a°_moutdwm
(
a°
, 0x1E6E02E0, 
ddr_èbÀ
[
REGIDX_2E0
]);

1932 
	`a°_moutdwm
(
a°
, 0x1E6E02E4, 
ddr_èbÀ
[
REGIDX_2E4
]);

1933 
	`a°_moutdwm
(
a°
, 0x1E6E02E8, 
ddr_èbÀ
[
REGIDX_2E8
]);

1934 
	`a°_moutdwm
(
a°
, 0x1E6E02EC, 
ddr_èbÀ
[
REGIDX_2EC
]);

1935 
	`a°_moutdwm
(
a°
, 0x1E6E02F0, 
ddr_èbÀ
[
REGIDX_2F0
]);

1936 
	`a°_moutdwm
(
a°
, 0x1E6E02F4, 
ddr_èbÀ
[
REGIDX_2F4
]);

1937 
	`a°_moutdwm
(
a°
, 0x1E6E02F8, 
ddr_èbÀ
[
REGIDX_2F8
]);

1938 
	`a°_moutdwm
(
a°
, 0x1E6E0290, 0x00100008);

1939 
	`a°_moutdwm
(
a°
, 0x1E6E02C4, 0x3C183C3C);

1940 
	`a°_moutdwm
(
a°
, 0x1E6E02C8, 0x00631E0E);

1943 
	`a°_moutdwm
(
a°
, 0x1E6E0034, 0x0001A991);

1946 
∑ss
 = 0;

1948 
ªåy˙t
 = 0;Ñëry˙à< 4 && 
∑ss
 == 0;Ñetrycnt++) {

1949 
max_phy_vªf
 = 0x0;

1950 
∑ss
 = 0;

1951 
	`a°_moutdwm
(
a°
, 0x1E6E02C0, 0x00001C06);

1952 
phy_vªf
 = 0x40;Öhy_vref < 0x80;Öhy_vref++) {

1953 
	`a°_moutdwm
(
a°
, 0x1E6E000C, 0x00000000);

1954 
	`a°_moutdwm
(
a°
, 0x1E6E0060, 0x00000000);

1955 
	`a°_moutdwm
(
a°
, 0x1E6E02CC, 
phy_vªf
 | (phy_vref << 8));

1957 
	`ddr_phy_öô_2500
(
a°
);

1958 
	`a°_moutdwm
(
a°
, 0x1E6E000C, 0x00005C01);

1959 i‡(
	`cbr_ã°_2500
(
a°
)) {

1960 
∑ss
++;

1961 
d©a
 = 
	`a°_mödwm
(
a°
, 0x1E6E03D0);

1962 
d©a2
 = 
d©a
 >> 8;

1963 
d©a
 = data & 0xff;

1964 i‡(
d©a
 > 
d©a2
)

1965 
d©a
 = 
d©a2
;

1966 i‡(
max_phy_vªf
 < 
d©a
) {

1967 
max_phy_vªf
 = 
d©a
;

1968 
mö_phy_vªf
 = 
phy_vªf
;

1970 } i‡(
∑ss
 > 0)

1974 
	`a°_moutdwm
(
a°
, 0x1E6E02CC, 
mö_phy_vªf
 | (min_phy_vref << 8));

1977 
∑ss
 = 0;

1979 
ªåy˙t
 = 0;Ñëry˙à< 4 && 
∑ss
 == 0;Ñetrycnt++) {

1980 
mö_ddr_vªf
 = 0xFF;

1981 
max_ddr_vªf
 = 0x0;

1982 
∑ss
 = 0;

1983 
ddr_vªf
 = 0x00; ddr_vref < 0x40; ddr_vref++) {

1984 
	`a°_moutdwm
(
a°
, 0x1E6E000C, 0x00000000);

1985 
	`a°_moutdwm
(
a°
, 0x1E6E0060, 0x00000000);

1986 
	`a°_moutdwm
(
a°
, 0x1E6E02C0, 0x00000006 | (
ddr_vªf
 << 8));

1988 
	`ddr_phy_öô_2500
(
a°
);

1989 
	`a°_moutdwm
(
a°
, 0x1E6E000C, 0x00005C01);

1990 i‡(
	`cbr_ã°_2500
(
a°
)) {

1991 
∑ss
++;

1992 i‡(
mö_ddr_vªf
 > 
ddr_vªf
)

1993 
mö_ddr_vªf
 = 
ddr_vªf
;

1994 i‡(
max_ddr_vªf
 < 
ddr_vªf
)

1995 
max_ddr_vªf
 = 
ddr_vªf
;

1996 } i‡(
∑ss
 != 0)

2001 
	`a°_moutdwm
(
a°
, 0x1E6E000C, 0x00000000);

2002 
	`a°_moutdwm
(
a°
, 0x1E6E0060, 0x00000000);

2003 
ddr_vªf
 = (
mö_ddr_vªf
 + 
max_ddr_vªf
 + 1) >> 1;

2004 
	`a°_moutdwm
(
a°
, 0x1E6E02C0, 0x00000006 | (
ddr_vªf
 << 8));

2007 
	`ddr_phy_öô_2500
(
a°
);

2009 
	`a°_moutdwm
(
a°
, 0x1E6E0120, 
ddr_èbÀ
[
REGIDX_PLL
]);

2010 
	`a°_moutdwm
(
a°
, 0x1E6E000C, 0x42AA5C81);

2011 
	`a°_moutdwm
(
a°
, 0x1E6E0034, 0x0001AF93);

2013 
	`check_døm_size_2500
(
a°
, 
ddr_èbÀ
[
REGIDX_RFC
]);

2014 
	`íabÀ_ˇche_2500
(
a°
);

2015 
	`a°_moutdwm
(
a°
, 0x1E6E001C, 0x00000008);

2016 
	`a°_moutdwm
(
a°
, 0x1E6E0038, 0xFFFFFF00);

2017 
	}
}

2019 
boﬁ
 
	$a°_døm_öô_2500
(
a°_¥iv©e
 *
a°
)

2021 
u32
 
d©a
;

2022 
u32
 
max_åõs
 = 5;

2025 i‡(
max_åõs
-- == 0)

2026  
Ál£
;

2027 
	`£t_m∂l_2500
(
a°
);

2028 
	`ª£t_mmc_2500
(
a°
);

2029 
	`ddr_öô_comm⁄_2500
(
a°
);

2031 
d©a
 = 
	`a°_mödwm
(
a°
, 0x1E6E2070);

2032 i‡(
d©a
 & 0x01000000)

2033 
	`ddr4_öô_2500
(
a°
, 
a°2500_ddr4_1600_timög_èbÀ
);

2035 
	`ddr3_öô_2500
(
a°
, 
a°2500_ddr3_1600_timög_èbÀ
);

2036 } !
	`ddr_ã°_2500
(
a°
));

2038 
	`a°_moutdwm
(
a°
, 0x1E6E2040, 
	`a°_mödwm
(ast, 0x1E6E2040) | 0x41);

2041 
d©a
 = 
	`a°_mödwm
(
a°
, 0x1E6E200C) & 0xF9FFFFFF;

2042 
	`a°_moutdwm
(
a°
, 0x1E6E200C, 
d©a
 | 0x10000000);

2044 
d©a
 = 
	`a°_mödwm
(
a°
, 0x1E6E0004);

2045 
	`a°_moutdwm
(
a°
, 0x1E6E0004, 
d©a
 | 0x08300000);

2046 
	`a°_moutdwm
(
a°
, 0x1E6E0088, 0x20161229);

2048  
åue
;

2049 
	}
}

2051 
	$∑tch_ahb_a°2500
(
a°_¥iv©e
 *
a°
)

2053 
u32
 
d©a
;

2056 
	`a°_moutdwm
(
a°
, 0x1e600000, 0xAEED1A03);

2057 
	`a°_moutdwm
(
a°
, 0x1e600084, 0x00010000);

2058 
	`a°_moutdwm
(
a°
, 0x1e600088, 0x00000000);

2059 
	`a°_moutdwm
(
a°
, 0x1e6e2000, 0x1688A8A8);

2060 
d©a
 = 
	`a°_mödwm
(
a°
, 0x1e6e2070);

2061 i‡(
d©a
 & 0x08000000)

2063 
	`a°_moutdwm
(
a°
, 0x1E785004,0x00000010);

2064 
	`a°_moutdwm
(
a°
, 0x1E785008,0x00004755);

2065 
	`a°_moutdwm
(
a°
, 0x1E78500c,0x00000033);

2066 
	`udñay
(1000);

2069 
	`a°_moutdwm
(
a°
, 0x1e6e2000,0x1688A8A8);

2070 
d©a
 = 
	`a°_mödwm
(
a°
, 0x1e6e2000);

2071 } 
d©a
 != 1);

2072 
	`a°_moutdwm
(
a°
, 0x1e6e207c,0x08000000);

2073 
	}
}

2075 
	$a°_po°_chù_2500
(
drm_devi˚
 *
dev
)

2077 
a°_¥iv©e
 *
a°
 = 
dev
->
dev_¥iv©e
;

2078 
u32
 
ãmp
;

2079 
u8
 
ªg
;

2081 
ªg
 = 
	`a°_gë_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xd0, 0xff);

2082 i‡((
ªg
 & 0xC0) == 0) {

2084 
	`∑tch_ahb_a°2500
(
a°
);

2087 
	`a°_moutdwm
(
a°
, 0x1E78502C,0x00000000);

2088 
	`a°_moutdwm
(
a°
, 0x1E78504C,0x00000000);

2090 
	`a°_moutdwm
(
a°
, 0x1E6E2090,0x20000000);

2091 
	`a°_moutdwm
(
a°
, 0x1E6E2094,0x00004000);

2092 if(
	`a°_mödwm
(
a°
, 0x1E6E2070) & 0x00800000){

2093 
	`a°_moutdwm
(
a°
, 0x1E6E207C,0x00800000);

2094 
	`mdñay
(100);

2095 
	`a°_moutdwm
(
a°
, 0x1E6E2070,0x00800000);

2098 
ãmp
 = 
	`a°_mödwm
(
a°
, 0x1E6E2070);

2099 if(
ãmp
 & 0x02000000){

2100 
	`a°_moutdwm
(
a°
, 0x1E6E207C,0x00004000);

2104 
ãmp
 = 
	`a°_ªad32
(
a°
, 0x12008);

2105 
ãmp
 |= 0x73;

2106 
	`a°_wrôe32
(
a°
, 0x12008, 
ãmp
);

2108 i‡(!
	`a°_døm_öô_2500
(
a°
))

2109 
	`DRM_ERROR
("DRAM init failed !\n");

2111 
ãmp
 = 
	`a°_mödwm
(
a°
, 0x1e6e2040);

2112 
	`a°_moutdwm
(
a°
, 0x1e6e2040, 
ãmp
 | 0x40);

2117 
ªg
 = 
	`a°_gë_ödex_ªg_mask
(
a°
, 
AST_IO_CRTC_PORT
, 0xd0, 0xff);

2118 } (
ªg
 & 0x40) == 0);

2119 
	}
}

	@/mnt/d/Src/DRM/sources/src504/ast_tables.h

24 #i‚de‡
AST_TABLES_H


25 
	#AST_TABLES_H


	)

28 
	#TextModeIndex
 0

	)

29 
	#EGAModeIndex
 1

	)

30 
	#VGAModeIndex
 2

	)

31 
	#HiCModeIndex
 3

	)

32 
	#TrueCModeIndex
 4

	)

34 
	#Ch¨x8DŸ
 0x00000001

	)

35 
	#HÆfDCLK
 0x00000002

	)

36 
	#DoubÀSˇnMode
 0x00000004

	)

37 
	#LöeCom∑ªOff
 0x00000008

	)

38 
	#HB‹dî
 0x00000020

	)

39 
	#VB‹dî
 0x00000010

	)

40 
	#WideS¸ìnMode
 0x00000100

	)

41 
	#NewModeInfo
 0x00000200

	)

42 
	#NHSync
 0x00000400

	)

43 
	#PHSync
 0x00000800

	)

44 
	#NVSync
 0x00001000

	)

45 
	#PVSync
 0x00002000

	)

46 
	#SyncPP
 (
PVSync
 | 
PHSync
)

	)

47 
	#SyncPN
 (
PVSync
 | 
NHSync
)

	)

48 
	#SyncNP
 (
NVSync
 | 
PHSync
)

	)

49 
	#SyncNN
 (
NVSync
 | 
NHSync
)

	)

50 
	#AST2500PªC©chCRT
 0x00004000

	)

53 
	#VCLK25_175
 0x00

	)

54 
	#VCLK28_322
 0x01

	)

55 
	#VCLK31_5
 0x02

	)

56 
	#VCLK36
 0x03

	)

57 
	#VCLK40
 0x04

	)

58 
	#VCLK49_5
 0x05

	)

59 
	#VCLK50
 0x06

	)

60 
	#VCLK56_25
 0x07

	)

61 
	#VCLK65
 0x08

	)

62 
	#VCLK75
 0x09

	)

63 
	#VCLK78_75
 0x0A

	)

64 
	#VCLK94_5
 0x0B

	)

65 
	#VCLK108
 0x0C

	)

66 
	#VCLK135
 0x0D

	)

67 
	#VCLK157_5
 0x0E

	)

68 
	#VCLK162
 0x0F

	)

70 
	#VCLK154
 0x10

	)

71 
	#VCLK83_5
 0x11

	)

72 
	#VCLK106_5
 0x12

	)

73 
	#VCLK146_25
 0x13

	)

74 
	#VCLK148_5
 0x14

	)

75 
	#VCLK71
 0x15

	)

76 
	#VCLK88_75
 0x16

	)

77 
	#VCLK119
 0x17

	)

78 
	#VCLK85_5
 0x18

	)

79 
	#VCLK97_75
 0x19

	)

80 
	#VCLK118_25
 0x1A

	)

82 
a°_vbios_d˛k_öfo
 
	gd˛k_èbÀ
[] = {

112 
a°_vbios_d˛k_öfo
 
	gd˛k_èbÀ_25MHz
[] = {

142 
a°_vbios_d˛k_öfo
 
	gd˛k_èbÀ_a°2500
[] = {

172 
a°_vbios_d˛k_öfo
 
	gd˛k_èbÀ_a°2500_25MHz
[] = {

202 
a°_vbios_°dèbÀ
 
	gvbios_°dèbÀ
[] = {

275 
a°_vbios_íhèbÀ
 
	gªs_640x480
[] = {

276 { 800, 640, 8, 96, 525, 480, 2, 2, 
VCLK25_175
,

277 (
SyncNN
 | 
HB‹dî
 | 
VB‹dî
 | 
Ch¨x8DŸ
), 60, 1, 0x2E },

278 { 832, 640, 16, 40, 520, 480, 1, 3, 
VCLK31_5
,

279 (
SyncNN
 | 
HB‹dî
 | 
VB‹dî
 | 
Ch¨x8DŸ
), 72, 2, 0x2E },

280 { 840, 640, 16, 64, 500, 480, 1, 3, 
VCLK31_5
,

281 (
SyncNN
 | 
Ch¨x8DŸ
) , 75, 3, 0x2E },

282 { 832, 640, 56, 56, 509, 480, 1, 3, 
VCLK36
,

283 (
SyncNN
 | 
Ch¨x8DŸ
) , 85, 4, 0x2E },

284 { 832, 640, 56, 56, 509, 480, 1, 3, 
VCLK36
,

285 (
SyncNN
 | 
Ch¨x8DŸ
) , 0xFF, 4, 0x2E },

288 
a°_vbios_íhèbÀ
 
	gªs_800x600
[] = {

289 {1024, 800, 24, 72, 625, 600, 1, 2, 
VCLK36
,

290 (
SyncPP
 | 
Ch¨x8DŸ
), 56, 1, 0x30 },

291 {1056, 800, 40, 128, 628, 600, 1, 4, 
VCLK40
,

292 (
SyncPP
 | 
Ch¨x8DŸ
), 60, 2, 0x30 },

293 {1040, 800, 56, 120, 666, 600, 37, 6, 
VCLK50
,

294 (
SyncPP
 | 
Ch¨x8DŸ
), 72, 3, 0x30 },

295 {1056, 800, 16, 80, 625, 600, 1, 3, 
VCLK49_5
,

296 (
SyncPP
 | 
Ch¨x8DŸ
), 75, 4, 0x30 },

297 {1048, 800, 32, 64, 631, 600, 1, 3, 
VCLK56_25
,

298 (
SyncPP
 | 
Ch¨x8DŸ
), 84, 5, 0x30 },

299 {1048, 800, 32, 64, 631, 600, 1, 3, 
VCLK56_25
,

300 (
SyncPP
 | 
Ch¨x8DŸ
), 0xFF, 5, 0x30 },

304 
a°_vbios_íhèbÀ
 
	gªs_1024x768
[] = {

305 {1344, 1024, 24, 136, 806, 768, 3, 6, 
VCLK65
,

306 (
SyncNN
 | 
Ch¨x8DŸ
), 60, 1, 0x31 },

307 {1328, 1024, 24, 136, 806, 768, 3, 6, 
VCLK75
,

308 (
SyncNN
 | 
Ch¨x8DŸ
), 70, 2, 0x31 },

309 {1312, 1024, 16, 96, 800, 768, 1, 3, 
VCLK78_75
,

310 (
SyncPP
 | 
Ch¨x8DŸ
), 75, 3, 0x31 },

311 {1376, 1024, 48, 96, 808, 768, 1, 3, 
VCLK94_5
,

312 (
SyncPP
 | 
Ch¨x8DŸ
), 84, 4, 0x31 },

313 {1376, 1024, 48, 96, 808, 768, 1, 3, 
VCLK94_5
,

314 (
SyncPP
 | 
Ch¨x8DŸ
), 0xFF, 4, 0x31 },

317 
a°_vbios_íhèbÀ
 
	gªs_1280x1024
[] = {

318 {1688, 1280, 48, 112, 1066, 1024, 1, 3, 
VCLK108
,

319 (
SyncPP
 | 
Ch¨x8DŸ
), 60, 1, 0x32 },

320 {1688, 1280, 16, 144, 1066, 1024, 1, 3, 
VCLK135
,

321 (
SyncPP
 | 
Ch¨x8DŸ
), 75, 2, 0x32 },

322 {1728, 1280, 64, 160, 1072, 1024, 1, 3, 
VCLK157_5
,

323 (
SyncPP
 | 
Ch¨x8DŸ
), 85, 3, 0x32 },

324 {1728, 1280, 64, 160, 1072, 1024, 1, 3, 
VCLK157_5
,

325 (
SyncPP
 | 
Ch¨x8DŸ
), 0xFF, 3, 0x32 },

328 
a°_vbios_íhèbÀ
 
	gªs_1600x1200
[] = {

329 {2160, 1600, 64, 192, 1250, 1200, 1, 3, 
VCLK162
,

330 (
SyncPP
 | 
Ch¨x8DŸ
), 60, 1, 0x33 },

331 {2160, 1600, 64, 192, 1250, 1200, 1, 3, 
VCLK162
,

332 (
SyncPP
 | 
Ch¨x8DŸ
), 0xFF, 1, 0x33 },

335 
a°_vbios_íhèbÀ
 
	gªs_1152x864
[] = {

336 {1600, 1152, 64, 128, 900, 864, 1, 3, 
VCLK108
,

337 (
SyncPP
 | 
Ch¨x8DŸ
 | 
NewModeInfo
), 75, 1, 0x3B },

338 {1600, 1152, 64, 128, 900, 864, 1, 3, 
VCLK108
,

339 (
SyncPP
 | 
Ch¨x8DŸ
 | 
NewModeInfo
), 0xFF, 1, 0x3B },

343 
a°_vbios_íhèbÀ
 
	gªs_1360x768
[] = {

344 {1792, 1360, 64,112, 795, 768, 3, 6, 
VCLK85_5
,

345 (
SyncPP
 | 
Ch¨x8DŸ
 | 
LöeCom∑ªOff
 | 
WideS¸ìnMode
 | 
NewModeInfo
 | 
AST2500PªC©chCRT
), 60, 1, 0x39 },

346 {1792, 1360, 64,112, 795, 768, 3, 6, 
VCLK85_5
,

347 (
SyncPP
 | 
Ch¨x8DŸ
 | 
LöeCom∑ªOff
 | 
WideS¸ìnMode
 | 
NewModeInfo
), 0xFF, 1, 0x39 },

350 
a°_vbios_íhèbÀ
 
	gªs_1600x900
[] = {

353 {1760, 1600, 48, 32, 926, 900, 3, 5, 
VCLK97_75
,

354 (
SyncNP
 | 
Ch¨x8DŸ
 | 
LöeCom∑ªOff
 | 
WideS¸ìnMode
 | 
NewModeInfo
 | 
AST2500PªC©chCRT
), 60, 1, 0x3A },

355 {2112, 1600, 88,168, 934, 900, 3, 5, 
VCLK118_25
,

356 (
SyncPN
 | 
Ch¨x8DŸ
 | 
LöeCom∑ªOff
 | 
WideS¸ìnMode
 | 
NewModeInfo
), 60, 2, 0x3A },

357 {2112, 1600, 88,168, 934, 900, 3, 5, 
VCLK118_25
,

358 (
SyncPN
 | 
Ch¨x8DŸ
 | 
LöeCom∑ªOff
 | 
WideS¸ìnMode
 | 
NewModeInfo
), 0xFF, 2, 0x3A },

361 
a°_vbios_íhèbÀ
 
	gªs_1920x1080
[] = {

362 {2200, 1920, 88, 44, 1125, 1080, 4, 5, 
VCLK148_5
,

363 (
SyncPP
 | 
Ch¨x8DŸ
 | 
LöeCom∑ªOff
 | 
WideS¸ìnMode
 | 
NewModeInfo
 | 
AST2500PªC©chCRT
), 60, 1, 0x38 },

364 {2200, 1920, 88, 44, 1125, 1080, 4, 5, 
VCLK148_5
,

365 (
SyncPP
 | 
Ch¨x8DŸ
 | 
LöeCom∑ªOff
 | 
WideS¸ìnMode
 | 
NewModeInfo
 | 
AST2500PªC©chCRT
), 0xFF, 1, 0x38 },

370 
a°_vbios_íhèbÀ
 
	gªs_1280x800
[] = {

371 {1440, 1280, 48, 32, 823, 800, 3, 6, 
VCLK71
,

372 (
SyncNP
 | 
Ch¨x8DŸ
 | 
LöeCom∑ªOff
 | 
WideS¸ìnMode
 | 
NewModeInfo
 | 
AST2500PªC©chCRT
), 60, 1, 0x35 },

373 {1680, 1280, 72,128, 831, 800, 3, 6, 
VCLK83_5
,

374 (
SyncPN
 | 
Ch¨x8DŸ
 | 
LöeCom∑ªOff
 | 
WideS¸ìnMode
 | 
NewModeInfo
), 60, 2, 0x35 },

375 {1680, 1280, 72,128, 831, 800, 3, 6, 
VCLK83_5
,

376 (
SyncPN
 | 
Ch¨x8DŸ
 | 
LöeCom∑ªOff
 | 
WideS¸ìnMode
 | 
NewModeInfo
), 0xFF, 2, 0x35 },

380 
a°_vbios_íhèbÀ
 
	gªs_1440x900
[] = {

381 {1600, 1440, 48, 32, 926, 900, 3, 6, 
VCLK88_75
,

382 (
SyncNP
 | 
Ch¨x8DŸ
 | 
LöeCom∑ªOff
 | 
WideS¸ìnMode
 | 
NewModeInfo
 | 
AST2500PªC©chCRT
), 60, 1, 0x36 },

383 {1904, 1440, 80,152, 934, 900, 3, 6, 
VCLK106_5
,

384 (
SyncPN
 | 
Ch¨x8DŸ
 | 
LöeCom∑ªOff
 | 
WideS¸ìnMode
 | 
NewModeInfo
), 60, 2, 0x36 },

385 {1904, 1440, 80,152, 934, 900, 3, 6, 
VCLK106_5
,

386 (
SyncPN
 | 
Ch¨x8DŸ
 | 
LöeCom∑ªOff
 | 
WideS¸ìnMode
 | 
NewModeInfo
), 0xFF, 2, 0x36 },

389 
a°_vbios_íhèbÀ
 
	gªs_1680x1050
[] = {

390 {1840, 1680, 48, 32, 1080, 1050, 3, 6, 
VCLK119
,

391 (
SyncNP
 | 
Ch¨x8DŸ
 | 
LöeCom∑ªOff
 | 
WideS¸ìnMode
 | 
NewModeInfo
 | 
AST2500PªC©chCRT
), 60, 1, 0x37 },

392 {2240, 1680,104,176, 1089, 1050, 3, 6, 
VCLK146_25
,

393 (
SyncPN
 | 
Ch¨x8DŸ
 | 
LöeCom∑ªOff
 | 
WideS¸ìnMode
 | 
NewModeInfo
), 60, 2, 0x37 },

394 {2240, 1680,104,176, 1089, 1050, 3, 6, 
VCLK146_25
,

395 (
SyncPN
 | 
Ch¨x8DŸ
 | 
LöeCom∑ªOff
 | 
WideS¸ìnMode
 | 
NewModeInfo
), 0xFF, 2, 0x37 },

398 
a°_vbios_íhèbÀ
 
	gªs_1920x1200
[] = {

399 {2080, 1920, 48, 32, 1235, 1200, 3, 6, 
VCLK154
,

400 (
SyncNP
 | 
Ch¨x8DŸ
 | 
LöeCom∑ªOff
 | 
WideS¸ìnMode
 | 
NewModeInfo
 | 
AST2500PªC©chCRT
), 60, 1, 0x34 },

401 {2080, 1920, 48, 32, 1235, 1200, 3, 6, 
VCLK154
,

402 (
SyncNP
 | 
Ch¨x8DŸ
 | 
LöeCom∑ªOff
 | 
WideS¸ìnMode
 | 
NewModeInfo
 | 
AST2500PªC©chCRT
), 0xFF, 1, 0x34 },

	@/mnt/d/Src/DRM/sources/src504/ast_ttm.c

29 
	~<löux/pci.h
>

31 
	~<drm/drm_¥öt.h
>

32 
	~<drm/drm_gem_vøm_hñ≥r.h
>

33 
	~<drm/drm_vøm_mm_hñ≥r.h
>

35 
	~"a°_drv.h
"

37 
	$a°_mm_öô
(
a°_¥iv©e
 *
a°
)

39 
drm_vøm_mm
 *
vmm
;

40 
ªt
;

41 
drm_devi˚
 *
dev
 = 
a°
->dev;

43 
vmm
 = 
	`drm_vøm_hñ≥r_Æloc_mm
(

44 
dev
, 
	`pci_ªsour˚_°¨t
(dev->
pdev
, 0),

45 
a°
->
vøm_size
, &
drm_gem_vøm_mm_funcs
);

46 i‡(
	`IS_ERR
(
vmm
)) {

47 
ªt
 = 
	`PTR_ERR
(
vmm
);

48 
	`DRM_ERROR
("Eº‹ inôülizög VRAM MM; %d\n", 
ªt
);

49  
ªt
;

52 
	`¨ch_io_ª£rve_memty≥_wc
(
	`pci_ªsour˚_°¨t
(
dev
->
pdev
, 0),

53 
	`pci_ªsour˚_Àn
(
dev
->
pdev
, 0));

54 
a°
->
fb_mår
 = 
	`¨ch_phys_wc_add
(
	`pci_ªsour˚_°¨t
(
dev
->
pdev
, 0),

55 
	`pci_ªsour˚_Àn
(
dev
->
pdev
, 0));

58 
	}
}

60 
	$a°_mm_föi
(
a°_¥iv©e
 *
a°
)

62 
drm_devi˚
 *
dev
 = 
a°
->dev;

64 
	`drm_vøm_hñ≥r_ªÀa£_mm
(
dev
);

66 
	`¨ch_phys_wc_dñ
(
a°
->
fb_mår
);

67 
	`¨ch_io_‰ì_memty≥_wc
(
	`pci_ªsour˚_°¨t
(
dev
->
pdev
, 0),

68 
	`pci_ªsour˚_Àn
(
dev
->
pdev
, 0));

69 
	}
}

	@/usr/include/drm/drm_fourcc.h

24 #i‚de‡
DRM_FOURCC_H


25 
	#DRM_FOURCC_H


	)

27 
	~"drm.h
"

29 #i‡
deföed
(
__˝lu•lus
)

33 
	#fourcc_code
(
a
, 
b
, 
c
, 
d
Ë((
__u32
)(a) | ((__u32)(b) << 8) | \

34 ((
__u32
)(
c
Ë<< 16Ë| ((__u32)(
d
Ë<< 24))

	)

36 
	#DRM_FORMAT_BIG_ENDIAN
 (1<<31Ë

	)

39 
	#DRM_FORMAT_C8
 
	`fourcc_code
('C', '8', ' ', ' 'Ë

	)

42 
	#DRM_FORMAT_R8
 
	`fourcc_code
('R', '8', ' ', ' 'Ë

	)

45 
	#DRM_FORMAT_R16
 
	`fourcc_code
('R', '1', '6', ' 'Ë

	)

48 
	#DRM_FORMAT_RG88
 
	`fourcc_code
('R', 'G', '8', '8'Ë

	)

49 
	#DRM_FORMAT_GR88
 
	`fourcc_code
('G', 'R', '8', '8'Ë

	)

52 
	#DRM_FORMAT_RG1616
 
	`fourcc_code
('R', 'G', '3', '2'Ë

	)

53 
	#DRM_FORMAT_GR1616
 
	`fourcc_code
('G', 'R', '3', '2'Ë

	)

56 
	#DRM_FORMAT_RGB332
 
	`fourcc_code
('R', 'G', 'B', '8'Ë

	)

57 
	#DRM_FORMAT_BGR233
 
	`fourcc_code
('B', 'G', 'R', '8'Ë

	)

60 
	#DRM_FORMAT_XRGB4444
 
	`fourcc_code
('X', 'R', '1', '2'Ë

	)

61 
	#DRM_FORMAT_XBGR4444
 
	`fourcc_code
('X', 'B', '1', '2'Ë

	)

62 
	#DRM_FORMAT_RGBX4444
 
	`fourcc_code
('R', 'X', '1', '2'Ë

	)

63 
	#DRM_FORMAT_BGRX4444
 
	`fourcc_code
('B', 'X', '1', '2'Ë

	)

65 
	#DRM_FORMAT_ARGB4444
 
	`fourcc_code
('A', 'R', '1', '2'Ë

	)

66 
	#DRM_FORMAT_ABGR4444
 
	`fourcc_code
('A', 'B', '1', '2'Ë

	)

67 
	#DRM_FORMAT_RGBA4444
 
	`fourcc_code
('R', 'A', '1', '2'Ë

	)

68 
	#DRM_FORMAT_BGRA4444
 
	`fourcc_code
('B', 'A', '1', '2'Ë

	)

70 
	#DRM_FORMAT_XRGB1555
 
	`fourcc_code
('X', 'R', '1', '5'Ë

	)

71 
	#DRM_FORMAT_XBGR1555
 
	`fourcc_code
('X', 'B', '1', '5'Ë

	)

72 
	#DRM_FORMAT_RGBX5551
 
	`fourcc_code
('R', 'X', '1', '5'Ë

	)

73 
	#DRM_FORMAT_BGRX5551
 
	`fourcc_code
('B', 'X', '1', '5'Ë

	)

75 
	#DRM_FORMAT_ARGB1555
 
	`fourcc_code
('A', 'R', '1', '5'Ë

	)

76 
	#DRM_FORMAT_ABGR1555
 
	`fourcc_code
('A', 'B', '1', '5'Ë

	)

77 
	#DRM_FORMAT_RGBA5551
 
	`fourcc_code
('R', 'A', '1', '5'Ë

	)

78 
	#DRM_FORMAT_BGRA5551
 
	`fourcc_code
('B', 'A', '1', '5'Ë

	)

80 
	#DRM_FORMAT_RGB565
 
	`fourcc_code
('R', 'G', '1', '6'Ë

	)

81 
	#DRM_FORMAT_BGR565
 
	`fourcc_code
('B', 'G', '1', '6'Ë

	)

84 
	#DRM_FORMAT_RGB888
 
	`fourcc_code
('R', 'G', '2', '4'Ë

	)

85 
	#DRM_FORMAT_BGR888
 
	`fourcc_code
('B', 'G', '2', '4'Ë

	)

88 
	#DRM_FORMAT_XRGB8888
 
	`fourcc_code
('X', 'R', '2', '4'Ë

	)

89 
	#DRM_FORMAT_XBGR8888
 
	`fourcc_code
('X', 'B', '2', '4'Ë

	)

90 
	#DRM_FORMAT_RGBX8888
 
	`fourcc_code
('R', 'X', '2', '4'Ë

	)

91 
	#DRM_FORMAT_BGRX8888
 
	`fourcc_code
('B', 'X', '2', '4'Ë

	)

93 
	#DRM_FORMAT_ARGB8888
 
	`fourcc_code
('A', 'R', '2', '4'Ë

	)

94 
	#DRM_FORMAT_ABGR8888
 
	`fourcc_code
('A', 'B', '2', '4'Ë

	)

95 
	#DRM_FORMAT_RGBA8888
 
	`fourcc_code
('R', 'A', '2', '4'Ë

	)

96 
	#DRM_FORMAT_BGRA8888
 
	`fourcc_code
('B', 'A', '2', '4'Ë

	)

98 
	#DRM_FORMAT_XRGB2101010
 
	`fourcc_code
('X', 'R', '3', '0'Ë

	)

99 
	#DRM_FORMAT_XBGR2101010
 
	`fourcc_code
('X', 'B', '3', '0'Ë

	)

100 
	#DRM_FORMAT_RGBX1010102
 
	`fourcc_code
('R', 'X', '3', '0'Ë

	)

101 
	#DRM_FORMAT_BGRX1010102
 
	`fourcc_code
('B', 'X', '3', '0'Ë

	)

103 
	#DRM_FORMAT_ARGB2101010
 
	`fourcc_code
('A', 'R', '3', '0'Ë

	)

104 
	#DRM_FORMAT_ABGR2101010
 
	`fourcc_code
('A', 'B', '3', '0'Ë

	)

105 
	#DRM_FORMAT_RGBA1010102
 
	`fourcc_code
('R', 'A', '3', '0'Ë

	)

106 
	#DRM_FORMAT_BGRA1010102
 
	`fourcc_code
('B', 'A', '3', '0'Ë

	)

109 
	#DRM_FORMAT_YUYV
 
	`fourcc_code
('Y', 'U', 'Y', 'V'Ë

	)

110 
	#DRM_FORMAT_YVYU
 
	`fourcc_code
('Y', 'V', 'Y', 'U'Ë

	)

111 
	#DRM_FORMAT_UYVY
 
	`fourcc_code
('U', 'Y', 'V', 'Y'Ë

	)

112 
	#DRM_FORMAT_VYUY
 
	`fourcc_code
('V', 'Y', 'U', 'Y'Ë

	)

114 
	#DRM_FORMAT_AYUV
 
	`fourcc_code
('A', 'Y', 'U', 'V'Ë

	)

121 
	#DRM_FORMAT_XRGB8888_A8
 
	`fourcc_code
('X', 'R', 'A', '8')

	)

122 
	#DRM_FORMAT_XBGR8888_A8
 
	`fourcc_code
('X', 'B', 'A', '8')

	)

123 
	#DRM_FORMAT_RGBX8888_A8
 
	`fourcc_code
('R', 'X', 'A', '8')

	)

124 
	#DRM_FORMAT_BGRX8888_A8
 
	`fourcc_code
('B', 'X', 'A', '8')

	)

125 
	#DRM_FORMAT_RGB888_A8
 
	`fourcc_code
('R', '8', 'A', '8')

	)

126 
	#DRM_FORMAT_BGR888_A8
 
	`fourcc_code
('B', '8', 'A', '8')

	)

127 
	#DRM_FORMAT_RGB565_A8
 
	`fourcc_code
('R', '5', 'A', '8')

	)

128 
	#DRM_FORMAT_BGR565_A8
 
	`fourcc_code
('B', '5', 'A', '8')

	)

137 
	#DRM_FORMAT_NV12
 
	`fourcc_code
('N', 'V', '1', '2'Ë

	)

138 
	#DRM_FORMAT_NV21
 
	`fourcc_code
('N', 'V', '2', '1'Ë

	)

139 
	#DRM_FORMAT_NV16
 
	`fourcc_code
('N', 'V', '1', '6'Ë

	)

140 
	#DRM_FORMAT_NV61
 
	`fourcc_code
('N', 'V', '6', '1'Ë

	)

141 
	#DRM_FORMAT_NV24
 
	`fourcc_code
('N', 'V', '2', '4'Ë

	)

142 
	#DRM_FORMAT_NV42
 
	`fourcc_code
('N', 'V', '4', '2'Ë

	)

153 
	#DRM_FORMAT_YUV410
 
	`fourcc_code
('Y', 'U', 'V', '9'Ë

	)

154 
	#DRM_FORMAT_YVU410
 
	`fourcc_code
('Y', 'V', 'U', '9'Ë

	)

155 
	#DRM_FORMAT_YUV411
 
	`fourcc_code
('Y', 'U', '1', '1'Ë

	)

156 
	#DRM_FORMAT_YVU411
 
	`fourcc_code
('Y', 'V', '1', '1'Ë

	)

157 
	#DRM_FORMAT_YUV420
 
	`fourcc_code
('Y', 'U', '1', '2'Ë

	)

158 
	#DRM_FORMAT_YVU420
 
	`fourcc_code
('Y', 'V', '1', '2'Ë

	)

159 
	#DRM_FORMAT_YUV422
 
	`fourcc_code
('Y', 'U', '1', '6'Ë

	)

160 
	#DRM_FORMAT_YVU422
 
	`fourcc_code
('Y', 'V', '1', '6'Ë

	)

161 
	#DRM_FORMAT_YUV444
 
	`fourcc_code
('Y', 'U', '2', '4'Ë

	)

162 
	#DRM_FORMAT_YVU444
 
	`fourcc_code
('Y', 'V', '2', '4'Ë

	)

177 
	#DRM_FORMAT_MOD_NONE
 0

	)

178 
	#DRM_FORMAT_MOD_VENDOR_NONE
 0

	)

179 
	#DRM_FORMAT_MOD_VENDOR_INTEL
 0x01

	)

180 
	#DRM_FORMAT_MOD_VENDOR_AMD
 0x02

	)

181 
	#DRM_FORMAT_MOD_VENDOR_NV
 0x03

	)

182 
	#DRM_FORMAT_MOD_VENDOR_SAMSUNG
 0x04

	)

183 
	#DRM_FORMAT_MOD_VENDOR_QCOM
 0x05

	)

184 
	#DRM_FORMAT_MOD_VENDOR_VIVANTE
 0x06

	)

185 
	#DRM_FORMAT_MOD_VENDOR_BROADCOM
 0x07

	)

188 
	#DRM_FORMAT_RESERVED
 ((1ULL << 56Ë- 1)

	)

190 
	#fourcc_mod_code
(
víd‹
, 
vÆ
) \

191 ((((
__u64
)
DRM_FORMAT_MOD_VENDOR_
## 
víd‹
Ë<< 56Ë| (
vÆ
 & 0x00ffffffffffffffULL))

	)

208 
	#DRM_FORMAT_MOD_INVALID
 
	`fourcc_mod_code
(
NONE
, 
DRM_FORMAT_RESERVED
)

	)

218 
	#DRM_FORMAT_MOD_LINEAR
 
	`fourcc_mod_code
(
NONE
, 0)

	)

234 
	#I915_FORMAT_MOD_X_TILED
 
	`fourcc_mod_code
(
INTEL
, 1)

	)

249 
	#I915_FORMAT_MOD_Y_TILED
 
	`fourcc_mod_code
(
INTEL
, 2)

	)

264 
	#I915_FORMAT_MOD_Yf_TILED
 
	`fourcc_mod_code
(
INTEL
, 3)

	)

283 
	#I915_FORMAT_MOD_Y_TILED_CCS
 
	`fourcc_mod_code
(
INTEL
, 4)

	)

284 
	#I915_FORMAT_MOD_Yf_TILED_CCS
 
	`fourcc_mod_code
(
INTEL
, 5)

	)

299 
	#DRM_FORMAT_MOD_SAMSUNG_64_32_TILE
 
	`fourcc_mod_code
(
SAMSUNG
, 1)

	)

309 
	#DRM_FORMAT_MOD_VIVANTE_TILED
 
	`fourcc_mod_code
(
VIVANTE
, 1)

	)

321 
	#DRM_FORMAT_MOD_VIVANTE_SUPER_TILED
 
	`fourcc_mod_code
(
VIVANTE
, 2)

	)

330 
	#DRM_FORMAT_MOD_VIVANTE_SPLIT_TILED
 
	`fourcc_mod_code
(
VIVANTE
, 3)

	)

339 
	#DRM_FORMAT_MOD_VIVANTE_SPLIT_SUPER_TILED
 
	`fourcc_mod_code
(
VIVANTE
, 4)

	)

347 
	#__fourcc_mod_ãgø_mode_shi·
 32

	)

348 
	#fourcc_mod_ãgø_code
(
vÆ
, 
∑øms
) \

349 
	`fourcc_mod_code
(
NV
, ((((
__u64
)
vÆ
Ë<< 
__fourcc_mod_ãgø_mode_shi·
Ë| 
∑øms
))

	)

350 
	#fourcc_mod_ãgø_mod
(
m
) \

351 (
m
 & ~((1ULL << 
__fourcc_mod_ãgø_mode_shi·
Ë- 1))

	)

352 
	#fourcc_mod_ãgø_∑øm
(
m
) \

353 (
m
 & ((1ULL << 
__fourcc_mod_ãgø_mode_shi·
Ë- 1))

	)

360 
	#NV_FORMAT_MOD_TEGRA_TILED
 
	`fourcc_mod_ãgø_code
(1, 0)

	)

383 
	#NV_FORMAT_MOD_TEGRA_16BX2_BLOCK
(
v
Ë
	`fourcc_mod_ãgø_code
(2, v)

	)

404 
	#DRM_FORMAT_MOD_BROADCOM_VC4_T_TILED
 
	`fourcc_mod_code
(
BROADCOM
, 1)

	)

406 #i‡
deföed
(
__˝lu•lus
)

	@/usr/include/drm/drm_mode.h

27 #i‚de‡
_DRM_MODE_H


28 
	#_DRM_MODE_H


	)

30 
	~"drm.h
"

32 #i‡
deföed
(
__˝lu•lus
)

36 
	#DRM_DISPLAY_INFO_LEN
 32

	)

37 
	#DRM_CONNECTOR_NAME_LEN
 32

	)

38 
	#DRM_DISPLAY_MODE_LEN
 32

	)

39 
	#DRM_PROP_NAME_LEN
 32

	)

41 
	#DRM_MODE_TYPE_BUILTIN
 (1<<0)

	)

42 
	#DRM_MODE_TYPE_CLOCK_C
 ((1<<1Ë| 
DRM_MODE_TYPE_BUILTIN
)

	)

43 
	#DRM_MODE_TYPE_CRTC_C
 ((1<<2Ë| 
DRM_MODE_TYPE_BUILTIN
)

	)

44 
	#DRM_MODE_TYPE_PREFERRED
 (1<<3)

	)

45 
	#DRM_MODE_TYPE_DEFAULT
 (1<<4)

	)

46 
	#DRM_MODE_TYPE_USERDEF
 (1<<5)

	)

47 
	#DRM_MODE_TYPE_DRIVER
 (1<<6)

	)

59 
	#DRM_MODE_FLAG_PHSYNC
 (1<<0)

	)

60 
	#DRM_MODE_FLAG_NHSYNC
 (1<<1)

	)

61 
	#DRM_MODE_FLAG_PVSYNC
 (1<<2)

	)

62 
	#DRM_MODE_FLAG_NVSYNC
 (1<<3)

	)

63 
	#DRM_MODE_FLAG_INTERLACE
 (1<<4)

	)

64 
	#DRM_MODE_FLAG_DBLSCAN
 (1<<5)

	)

65 
	#DRM_MODE_FLAG_CSYNC
 (1<<6)

	)

66 
	#DRM_MODE_FLAG_PCSYNC
 (1<<7)

	)

67 
	#DRM_MODE_FLAG_NCSYNC
 (1<<8)

	)

68 
	#DRM_MODE_FLAG_HSKEW
 (1<<9Ë

	)

69 
	#DRM_MODE_FLAG_BCAST
 (1<<10)

	)

70 
	#DRM_MODE_FLAG_PIXMUX
 (1<<11)

	)

71 
	#DRM_MODE_FLAG_DBLCLK
 (1<<12)

	)

72 
	#DRM_MODE_FLAG_CLKDIV2
 (1<<13)

	)

77 
	#DRM_MODE_FLAG_3D_MASK
 (0x1f<<14)

	)

78 
	#DRM_MODE_FLAG_3D_NONE
 (0<<14)

	)

79 
	#DRM_MODE_FLAG_3D_FRAME_PACKING
 (1<<14)

	)

80 
	#DRM_MODE_FLAG_3D_FIELD_ALTERNATIVE
 (2<<14)

	)

81 
	#DRM_MODE_FLAG_3D_LINE_ALTERNATIVE
 (3<<14)

	)

82 
	#DRM_MODE_FLAG_3D_SIDE_BY_SIDE_FULL
 (4<<14)

	)

83 
	#DRM_MODE_FLAG_3D_L_DEPTH
 (5<<14)

	)

84 
	#DRM_MODE_FLAG_3D_L_DEPTH_GFX_GFX_DEPTH
 (6<<14)

	)

85 
	#DRM_MODE_FLAG_3D_TOP_AND_BOTTOM
 (7<<14)

	)

86 
	#DRM_MODE_FLAG_3D_SIDE_BY_SIDE_HALF
 (8<<14)

	)

89 
	#DRM_MODE_PICTURE_ASPECT_NONE
 0

	)

90 
	#DRM_MODE_PICTURE_ASPECT_4_3
 1

	)

91 
	#DRM_MODE_PICTURE_ASPECT_16_9
 2

	)

94 
	#DRM_MODE_FLAG_PIC_AR_MASK
 (0x0F<<19)

	)

95 
	#DRM_MODE_FLAG_PIC_AR_NONE
 \

96 (
DRM_MODE_PICTURE_ASPECT_NONE
<<19)

	)

97 
	#DRM_MODE_FLAG_PIC_AR_4_3
 \

98 (
DRM_MODE_PICTURE_ASPECT_4_3
<<19)

	)

99 
	#DRM_MODE_FLAG_PIC_AR_16_9
 \

100 (
DRM_MODE_PICTURE_ASPECT_16_9
<<19)

	)

104 
	#DRM_MODE_DPMS_ON
 0

	)

105 
	#DRM_MODE_DPMS_STANDBY
 1

	)

106 
	#DRM_MODE_DPMS_SUSPEND
 2

	)

107 
	#DRM_MODE_DPMS_OFF
 3

	)

110 
	#DRM_MODE_SCALE_NONE
 0

	)

112 
	#DRM_MODE_SCALE_FULLSCREEN
 1

	)

113 
	#DRM_MODE_SCALE_CENTER
 2

	)

114 
	#DRM_MODE_SCALE_ASPECT
 3

	)

117 
	#DRM_MODE_DITHERING_OFF
 0

	)

118 
	#DRM_MODE_DITHERING_ON
 1

	)

119 
	#DRM_MODE_DITHERING_AUTO
 2

	)

122 
	#DRM_MODE_DIRTY_OFF
 0

	)

123 
	#DRM_MODE_DIRTY_ON
 1

	)

124 
	#DRM_MODE_DIRTY_ANNOTATE
 2

	)

127 
	#DRM_MODE_LINK_STATUS_GOOD
 0

	)

128 
	#DRM_MODE_LINK_STATUS_BAD
 1

	)

139 
	#DRM_MODE_ROTATE_0
 (1<<0)

	)

140 
	#DRM_MODE_ROTATE_90
 (1<<1)

	)

141 
	#DRM_MODE_ROTATE_180
 (1<<2)

	)

142 
	#DRM_MODE_ROTATE_270
 (1<<3)

	)

149 
	#DRM_MODE_ROTATE_MASK
 (\

150 
DRM_MODE_ROTATE_0
 | \

151 
DRM_MODE_ROTATE_90
 | \

152 
DRM_MODE_ROTATE_180
 | \

153 
DRM_MODE_ROTATE_270
)

	)

164 
	#DRM_MODE_REFLECT_X
 (1<<4)

	)

165 
	#DRM_MODE_REFLECT_Y
 (1<<5)

	)

172 
	#DRM_MODE_REFLECT_MASK
 (\

173 
DRM_MODE_REFLECT_X
 | \

174 
DRM_MODE_REFLECT_Y
)

	)

177 
	sdrm_mode_modeöfo
 {

178 
__u32
 
˛ock
;

179 
__u16
 
hdi•œy
;

180 
__u16
 
hsync_°¨t
;

181 
__u16
 
hsync_íd
;

182 
__u16
 
htŸÆ
;

183 
__u16
 
hskew
;

184 
__u16
 
vdi•œy
;

185 
__u16
 
vsync_°¨t
;

186 
__u16
 
vsync_íd
;

187 
__u16
 
vtŸÆ
;

188 
__u16
 
vsˇn
;

190 
__u32
 
vª‰esh
;

192 
__u32
 
Êags
;

193 
__u32
 
ty≥
;

194 
«me
[
DRM_DISPLAY_MODE_LEN
];

197 
	sdrm_mode_ˇrd_ªs
 {

198 
__u64
 
fb_id_±r
;

199 
__u64
 
¸tc_id_±r
;

200 
__u64
 
c⁄√˘‹_id_±r
;

201 
__u64
 
ícodî_id_±r
;

202 
__u32
 
cou¡_fbs
;

203 
__u32
 
cou¡_¸tcs
;

204 
__u32
 
cou¡_c⁄√˘‹s
;

205 
__u32
 
cou¡_ícodîs
;

206 
__u32
 
mö_width
;

207 
__u32
 
max_width
;

208 
__u32
 
mö_height
;

209 
__u32
 
max_height
;

212 
	sdrm_mode_¸tc
 {

213 
__u64
 
£t_c⁄√˘‹s_±r
;

214 
__u32
 
cou¡_c⁄√˘‹s
;

216 
__u32
 
¸tc_id
;

217 
__u32
 
fb_id
;

219 
__u32
 
x
;

220 
__u32
 
y
;

222 
__u32
 
gamma_size
;

223 
__u32
 
mode_vÆid
;

224 
drm_mode_modeöfo
 
mode
;

227 
	#DRM_MODE_PRESENT_TOP_FIELD
 (1<<0)

	)

228 
	#DRM_MODE_PRESENT_BOTTOM_FIELD
 (1<<1)

	)

231 
	sdrm_mode_£t_∂™e
 {

232 
__u32
 
∂™e_id
;

233 
__u32
 
¸tc_id
;

234 
__u32
 
fb_id
;

235 
__u32
 
Êags
;

238 
__s32
 
¸tc_x
;

239 
__s32
 
¸tc_y
;

240 
__u32
 
¸tc_w
;

241 
__u32
 
¸tc_h
;

244 
__u32
 
§c_x
;

245 
__u32
 
§c_y
;

246 
__u32
 
§c_h
;

247 
__u32
 
§c_w
;

250 
	sdrm_mode_gë_∂™e
 {

251 
__u32
 
∂™e_id
;

253 
__u32
 
¸tc_id
;

254 
__u32
 
fb_id
;

256 
__u32
 
possibÀ_¸tcs
;

257 
__u32
 
gamma_size
;

259 
__u32
 
cou¡_f‹m©_ty≥s
;

260 
__u64
 
f‹m©_ty≥_±r
;

263 
	sdrm_mode_gë_∂™e_ªs
 {

264 
__u64
 
∂™e_id_±r
;

265 
__u32
 
cou¡_∂™es
;

268 
	#DRM_MODE_ENCODER_NONE
 0

	)

269 
	#DRM_MODE_ENCODER_DAC
 1

	)

270 
	#DRM_MODE_ENCODER_TMDS
 2

	)

271 
	#DRM_MODE_ENCODER_LVDS
 3

	)

272 
	#DRM_MODE_ENCODER_TVDAC
 4

	)

273 
	#DRM_MODE_ENCODER_VIRTUAL
 5

	)

274 
	#DRM_MODE_ENCODER_DSI
 6

	)

275 
	#DRM_MODE_ENCODER_DPMST
 7

	)

276 
	#DRM_MODE_ENCODER_DPI
 8

	)

278 
	sdrm_mode_gë_ícodî
 {

279 
__u32
 
ícodî_id
;

280 
__u32
 
ícodî_ty≥
;

282 
__u32
 
¸tc_id
;

284 
__u32
 
possibÀ_¸tcs
;

285 
__u32
 
possibÀ_˛⁄es
;

290 
	edrm_mode_subc⁄√˘‹
 {

291 
DRM_MODE_SUBCONNECTOR_Autom©ic
 = 0,

292 
DRM_MODE_SUBCONNECTOR_Unknown
 = 0,

293 
DRM_MODE_SUBCONNECTOR_DVID
 = 3,

294 
DRM_MODE_SUBCONNECTOR_DVIA
 = 4,

295 
DRM_MODE_SUBCONNECTOR_Composôe
 = 5,

296 
DRM_MODE_SUBCONNECTOR_SVIDEO
 = 6,

297 
DRM_MODE_SUBCONNECTOR_Comp⁄ít
 = 8,

298 
DRM_MODE_SUBCONNECTOR_SCART
 = 9,

301 
	#DRM_MODE_CONNECTOR_Unknown
 0

	)

302 
	#DRM_MODE_CONNECTOR_VGA
 1

	)

303 
	#DRM_MODE_CONNECTOR_DVII
 2

	)

304 
	#DRM_MODE_CONNECTOR_DVID
 3

	)

305 
	#DRM_MODE_CONNECTOR_DVIA
 4

	)

306 
	#DRM_MODE_CONNECTOR_Composôe
 5

	)

307 
	#DRM_MODE_CONNECTOR_SVIDEO
 6

	)

308 
	#DRM_MODE_CONNECTOR_LVDS
 7

	)

309 
	#DRM_MODE_CONNECTOR_Comp⁄ít
 8

	)

310 
	#DRM_MODE_CONNECTOR_9PöDIN
 9

	)

311 
	#DRM_MODE_CONNECTOR_Di•œyP‹t
 10

	)

312 
	#DRM_MODE_CONNECTOR_HDMIA
 11

	)

313 
	#DRM_MODE_CONNECTOR_HDMIB
 12

	)

314 
	#DRM_MODE_CONNECTOR_TV
 13

	)

315 
	#DRM_MODE_CONNECTOR_eDP
 14

	)

316 
	#DRM_MODE_CONNECTOR_VIRTUAL
 15

	)

317 
	#DRM_MODE_CONNECTOR_DSI
 16

	)

318 
	#DRM_MODE_CONNECTOR_DPI
 17

	)

320 
	sdrm_mode_gë_c⁄√˘‹
 {

322 
__u64
 
ícodîs_±r
;

323 
__u64
 
modes_±r
;

324 
__u64
 
¥›s_±r
;

325 
__u64
 
¥›_vÆues_±r
;

327 
__u32
 
cou¡_modes
;

328 
__u32
 
cou¡_¥›s
;

329 
__u32
 
cou¡_ícodîs
;

331 
__u32
 
ícodî_id
;

332 
__u32
 
c⁄√˘‹_id
;

333 
__u32
 
c⁄√˘‹_ty≥
;

334 
__u32
 
c⁄√˘‹_ty≥_id
;

336 
__u32
 
c⁄√˘i⁄
;

337 
__u32
 
mm_width
;

338 
__u32
 
mm_height
;

339 
__u32
 
subpixñ
;

341 
__u32
 
∑d
;

344 
	#DRM_MODE_PROP_PENDING
 (1<<0)

	)

345 
	#DRM_MODE_PROP_RANGE
 (1<<1)

	)

346 
	#DRM_MODE_PROP_IMMUTABLE
 (1<<2)

	)

347 
	#DRM_MODE_PROP_ENUM
 (1<<3Ë

	)

348 
	#DRM_MODE_PROP_BLOB
 (1<<4)

	)

349 
	#DRM_MODE_PROP_BITMASK
 (1<<5Ë

	)

352 
	#DRM_MODE_PROP_LEGACY_TYPE
 ( \

353 
DRM_MODE_PROP_RANGE
 | \

354 
DRM_MODE_PROP_ENUM
 | \

355 
DRM_MODE_PROP_BLOB
 | \

356 
DRM_MODE_PROP_BITMASK
)

	)

361 
	#DRM_MODE_PROP_EXTENDED_TYPE
 0x0000ffc0

	)

362 
	#DRM_MODE_PROP_TYPE
(
n
Ë(“Ë<< 6)

	)

363 
	#DRM_MODE_PROP_OBJECT
 
	`DRM_MODE_PROP_TYPE
(1)

	)

364 
	#DRM_MODE_PROP_SIGNED_RANGE
 
	`DRM_MODE_PROP_TYPE
(2)

	)

371 
	#DRM_MODE_PROP_ATOMIC
 0x80000000

	)

373 
	sdrm_mode_¥›îty_íum
 {

374 
__u64
 
vÆue
;

375 
«me
[
DRM_PROP_NAME_LEN
];

378 
	sdrm_mode_gë_¥›îty
 {

379 
__u64
 
vÆues_±r
;

380 
__u64
 
íum_blob_±r
;

382 
__u32
 
¥›_id
;

383 
__u32
 
Êags
;

384 
«me
[
DRM_PROP_NAME_LEN
];

386 
__u32
 
cou¡_vÆues
;

389 
__u32
 
cou¡_íum_blobs
;

392 
	sdrm_mode_c⁄√˘‹_£t_¥›îty
 {

393 
__u64
 
vÆue
;

394 
__u32
 
¥›_id
;

395 
__u32
 
c⁄√˘‹_id
;

398 
	#DRM_MODE_OBJECT_CRTC
 0xcccccccc

	)

399 
	#DRM_MODE_OBJECT_CONNECTOR
 0xc0c0c0c0

	)

400 
	#DRM_MODE_OBJECT_ENCODER
 0xe0e0e0e0

	)

401 
	#DRM_MODE_OBJECT_MODE
 0xdededede

	)

402 
	#DRM_MODE_OBJECT_PROPERTY
 0xb0b0b0b0

	)

403 
	#DRM_MODE_OBJECT_FB
 0xfbfbfbfb

	)

404 
	#DRM_MODE_OBJECT_BLOB
 0xbbbbbbbb

	)

405 
	#DRM_MODE_OBJECT_PLANE
 0xìììì

	)

406 
	#DRM_MODE_OBJECT_ANY
 0

	)

408 
	sdrm_mode_obj_gë_¥›îtõs
 {

409 
__u64
 
¥›s_±r
;

410 
__u64
 
¥›_vÆues_±r
;

411 
__u32
 
cou¡_¥›s
;

412 
__u32
 
obj_id
;

413 
__u32
 
obj_ty≥
;

416 
	sdrm_mode_obj_£t_¥›îty
 {

417 
__u64
 
vÆue
;

418 
__u32
 
¥›_id
;

419 
__u32
 
obj_id
;

420 
__u32
 
obj_ty≥
;

423 
	sdrm_mode_gë_blob
 {

424 
__u32
 
blob_id
;

425 
__u32
 
Àngth
;

426 
__u64
 
d©a
;

429 
	sdrm_mode_fb_cmd
 {

430 
__u32
 
fb_id
;

431 
__u32
 
width
;

432 
__u32
 
height
;

433 
__u32
 
pôch
;

434 
__u32
 
bµ
;

435 
__u32
 
dïth
;

437 
__u32
 
h™dÀ
;

440 
	#DRM_MODE_FB_INTERLACED
 (1<<0Ë

	)

441 
	#DRM_MODE_FB_MODIFIERS
 (1<<1Ë

	)

443 
	sdrm_mode_fb_cmd2
 {

444 
__u32
 
fb_id
;

445 
__u32
 
width
;

446 
__u32
 
height
;

447 
__u32
 
pixñ_f‹m©
;

448 
__u32
 
Êags
;

474 
__u32
 
h™dÀs
[4];

475 
__u32
 
pôches
[4];

476 
__u32
 
off£ts
[4];

477 
__u64
 
modifõr
[4];

480 
	#DRM_MODE_FB_DIRTY_ANNOTATE_COPY
 0x01

	)

481 
	#DRM_MODE_FB_DIRTY_ANNOTATE_FILL
 0x02

	)

482 
	#DRM_MODE_FB_DIRTY_FLAGS
 0x03

	)

484 
	#DRM_MODE_FB_DIRTY_MAX_CLIPS
 256

	)

513 
	sdrm_mode_fb_dúty_cmd
 {

514 
__u32
 
fb_id
;

515 
__u32
 
Êags
;

516 
__u32
 
cﬁ‹
;

517 
__u32
 
num_˛ùs
;

518 
__u64
 
˛ùs_±r
;

521 
	sdrm_mode_mode_cmd
 {

522 
__u32
 
c⁄√˘‹_id
;

523 
drm_mode_modeöfo
 
mode
;

526 
	#DRM_MODE_CURSOR_BO
 0x01

	)

527 
	#DRM_MODE_CURSOR_MOVE
 0x02

	)

528 
	#DRM_MODE_CURSOR_FLAGS
 0x03

	)

544 
	sdrm_mode_curs‹
 {

545 
__u32
 
Êags
;

546 
__u32
 
¸tc_id
;

547 
__s32
 
x
;

548 
__s32
 
y
;

549 
__u32
 
width
;

550 
__u32
 
height
;

552 
__u32
 
h™dÀ
;

555 
	sdrm_mode_curs‹2
 {

556 
__u32
 
Êags
;

557 
__u32
 
¸tc_id
;

558 
__s32
 
x
;

559 
__s32
 
y
;

560 
__u32
 
width
;

561 
__u32
 
height
;

563 
__u32
 
h™dÀ
;

564 
__s32
 
hŸ_x
;

565 
__s32
 
hŸ_y
;

568 
	sdrm_mode_¸tc_lut
 {

569 
__u32
 
¸tc_id
;

570 
__u32
 
gamma_size
;

573 
__u64
 
ªd
;

574 
__u64
 
gªí
;

575 
__u64
 
blue
;

578 
	sdrm_cﬁ‹_˘m
 {

580 
__s64
 
m©rix
[9];

583 
	sdrm_cﬁ‹_lut
 {

587 
__u16
 
ªd
;

588 
__u16
 
gªí
;

589 
__u16
 
blue
;

590 
__u16
 
ª£rved
;

593 
	#DRM_MODE_PAGE_FLIP_EVENT
 0x01

	)

594 
	#DRM_MODE_PAGE_FLIP_ASYNC
 0x02

	)

595 
	#DRM_MODE_PAGE_FLIP_TARGET_ABSOLUTE
 0x4

	)

596 
	#DRM_MODE_PAGE_FLIP_TARGET_RELATIVE
 0x8

	)

597 
	#DRM_MODE_PAGE_FLIP_TARGET
 (
DRM_MODE_PAGE_FLIP_TARGET_ABSOLUTE
 | \

598 
DRM_MODE_PAGE_FLIP_TARGET_RELATIVE
)

	)

599 
	#DRM_MODE_PAGE_FLIP_FLAGS
 (
DRM_MODE_PAGE_FLIP_EVENT
 | \

600 
DRM_MODE_PAGE_FLIP_ASYNC
 | \

601 
DRM_MODE_PAGE_FLIP_TARGET
)

	)

627 
	sdrm_mode_¸tc_∑ge_Êù
 {

628 
__u32
 
¸tc_id
;

629 
__u32
 
fb_id
;

630 
__u32
 
Êags
;

631 
__u32
 
ª£rved
;

632 
__u64
 
u£r_d©a
;

655 
	sdrm_mode_¸tc_∑ge_Êù_èrgë
 {

656 
__u32
 
¸tc_id
;

657 
__u32
 
fb_id
;

658 
__u32
 
Êags
;

659 
__u32
 
£quí˚
;

660 
__u64
 
u£r_d©a
;

664 
	sdrm_mode_¸óã_dumb
 {

665 
__u32
 
height
;

666 
__u32
 
width
;

667 
__u32
 
bµ
;

668 
__u32
 
Êags
;

670 
__u32
 
h™dÀ
;

671 
__u32
 
pôch
;

672 
__u64
 
size
;

676 
	sdrm_mode_m≠_dumb
 {

678 
__u32
 
h™dÀ
;

679 
__u32
 
∑d
;

685 
__u64
 
off£t
;

688 
	sdrm_mode_de°roy_dumb
 {

689 
__u32
 
h™dÀ
;

693 
	#DRM_MODE_ATOMIC_TEST_ONLY
 0x0100

	)

694 
	#DRM_MODE_ATOMIC_NONBLOCK
 0x0200

	)

695 
	#DRM_MODE_ATOMIC_ALLOW_MODESET
 0x0400

	)

697 
	#DRM_MODE_ATOMIC_FLAGS
 (\

698 
DRM_MODE_PAGE_FLIP_EVENT
 |\

699 
DRM_MODE_PAGE_FLIP_ASYNC
 |\

700 
DRM_MODE_ATOMIC_TEST_ONLY
 |\

701 
DRM_MODE_ATOMIC_NONBLOCK
 |\

702 
DRM_MODE_ATOMIC_ALLOW_MODESET
)

	)

704 
	sdrm_mode_©omic
 {

705 
__u32
 
Êags
;

706 
__u32
 
cou¡_objs
;

707 
__u64
 
objs_±r
;

708 
__u64
 
cou¡_¥›s_±r
;

709 
__u64
 
¥›s_±r
;

710 
__u64
 
¥›_vÆues_±r
;

711 
__u64
 
ª£rved
;

712 
__u64
 
u£r_d©a
;

715 
	sdrm_f‹m©_modifõr_blob
 {

716 
	#FORMAT_BLOB_CURRENT
 1

	)

718 
__u32
 
vîsi⁄
;

721 
__u32
 
Êags
;

724 
__u32
 
cou¡_f‹m©s
;

727 
__u32
 
f‹m©s_off£t
;

730 
__u32
 
cou¡_modifõrs
;

733 
__u32
 
modifõrs_off£t
;

739 
	sdrm_f‹m©_modifõr
 {

757 
__u64
 
f‹m©s
;

758 
__u32
 
off£t
;

759 
__u32
 
∑d
;

762 
__u64
 
modifõr
;

769 
	sdrm_mode_¸óã_blob
 {

771 
__u64
 
d©a
;

773 
__u32
 
Àngth
;

775 
__u32
 
blob_id
;

781 
	sdrm_mode_de°roy_blob
 {

782 
__u32
 
blob_id
;

788 
	sdrm_mode_¸óã_Àa£
 {

790 
__u64
 
obje˘_ids
;

792 
__u32
 
obje˘_cou¡
;

794 
__u32
 
Êags
;

797 
__u32
 
Às£e_id
;

799 
__u32
 
fd
;

805 
	sdrm_mode_li°_Às£es
 {

813 
__u32
 
cou¡_Às£es
;

814 
__u32
 
∑d
;

819 
__u64
 
Às£es_±r
;

825 
	sdrm_mode_gë_Àa£
 {

833 
__u32
 
cou¡_obje˘s
;

834 
__u32
 
∑d
;

839 
__u64
 
obje˘s_±r
;

845 
	sdrm_mode_ªvoke_Àa£
 {

848 
__u32
 
Às£e_id
;

851 #i‡
deföed
(
__˝lu•lus
)

	@/usr/include/linux/errno.h

1 
	~<asm/î∫o.h
>

	@/usr/include/linux/i2c.h

28 #i‚de‡
_LINUX_I2C_H


29 
	#_LINUX_I2C_H


	)

31 
	~<löux/ty≥s.h
>

69 
	si2c_msg
 {

70 
__u16
 
	maddr
;

71 
__u16
 
	mÊags
;

72 
	#I2C_M_RD
 0x0001

	)

74 
	#I2C_M_TEN
 0x0010

	)

75 
	#I2C_M_DMA_SAFE
 0x0200

	)

78 
	#I2C_M_RECV_LEN
 0x0400

	)

79 
	#I2C_M_NO_RD_ACK
 0x0800

	)

80 
	#I2C_M_IGNORE_NAK
 0x1000

	)

81 
	#I2C_M_REV_DIR_ADDR
 0x2000

	)

82 
	#I2C_M_NOSTART
 0x4000

	)

83 
	#I2C_M_STOP
 0x8000

	)

84 
__u16
 
	mÀn
;

85 
__u8
 *
	mbuf
;

90 
	#I2C_FUNC_I2C
 0x00000001

	)

91 
	#I2C_FUNC_10BIT_ADDR
 0x00000002

	)

92 
	#I2C_FUNC_PROTOCOL_MANGLING
 0x00000004

	)

93 
	#I2C_FUNC_SMBUS_PEC
 0x00000008

	)

94 
	#I2C_FUNC_NOSTART
 0x00000010

	)

95 
	#I2C_FUNC_SLAVE
 0x00000020

	)

96 
	#I2C_FUNC_SMBUS_BLOCK_PROC_CALL
 0x00008000

	)

97 
	#I2C_FUNC_SMBUS_QUICK
 0x00010000

	)

98 
	#I2C_FUNC_SMBUS_READ_BYTE
 0x00020000

	)

99 
	#I2C_FUNC_SMBUS_WRITE_BYTE
 0x00040000

	)

100 
	#I2C_FUNC_SMBUS_READ_BYTE_DATA
 0x00080000

	)

101 
	#I2C_FUNC_SMBUS_WRITE_BYTE_DATA
 0x00100000

	)

102 
	#I2C_FUNC_SMBUS_READ_WORD_DATA
 0x00200000

	)

103 
	#I2C_FUNC_SMBUS_WRITE_WORD_DATA
 0x00400000

	)

104 
	#I2C_FUNC_SMBUS_PROC_CALL
 0x00800000

	)

105 
	#I2C_FUNC_SMBUS_READ_BLOCK_DATA
 0x01000000

	)

106 
	#I2C_FUNC_SMBUS_WRITE_BLOCK_DATA
 0x02000000

	)

107 
	#I2C_FUNC_SMBUS_READ_I2C_BLOCK
 0x04000000

	)

108 
	#I2C_FUNC_SMBUS_WRITE_I2C_BLOCK
 0x08000000

	)

109 
	#I2C_FUNC_SMBUS_HOST_NOTIFY
 0x10000000

	)

111 
	#I2C_FUNC_SMBUS_BYTE
 (
I2C_FUNC_SMBUS_READ_BYTE
 | \

112 
I2C_FUNC_SMBUS_WRITE_BYTE
)

	)

113 
	#I2C_FUNC_SMBUS_BYTE_DATA
 (
I2C_FUNC_SMBUS_READ_BYTE_DATA
 | \

114 
I2C_FUNC_SMBUS_WRITE_BYTE_DATA
)

	)

115 
	#I2C_FUNC_SMBUS_WORD_DATA
 (
I2C_FUNC_SMBUS_READ_WORD_DATA
 | \

116 
I2C_FUNC_SMBUS_WRITE_WORD_DATA
)

	)

117 
	#I2C_FUNC_SMBUS_BLOCK_DATA
 (
I2C_FUNC_SMBUS_READ_BLOCK_DATA
 | \

118 
I2C_FUNC_SMBUS_WRITE_BLOCK_DATA
)

	)

119 
	#I2C_FUNC_SMBUS_I2C_BLOCK
 (
I2C_FUNC_SMBUS_READ_I2C_BLOCK
 | \

120 
I2C_FUNC_SMBUS_WRITE_I2C_BLOCK
)

	)

122 
	#I2C_FUNC_SMBUS_EMUL
 (
I2C_FUNC_SMBUS_QUICK
 | \

123 
I2C_FUNC_SMBUS_BYTE
 | \

124 
I2C_FUNC_SMBUS_BYTE_DATA
 | \

125 
I2C_FUNC_SMBUS_WORD_DATA
 | \

126 
I2C_FUNC_SMBUS_PROC_CALL
 | \

127 
I2C_FUNC_SMBUS_WRITE_BLOCK_DATA
 | \

128 
I2C_FUNC_SMBUS_I2C_BLOCK
 | \

129 
I2C_FUNC_SMBUS_PEC
)

	)

134 
	#I2C_SMBUS_BLOCK_MAX
 32

	)

135 
	ui2c_smbus_d©a
 {

136 
__u8
 
	mbyã
;

137 
__u16
 
	mw‹d
;

138 
__u8
 
	mblock
[
I2C_SMBUS_BLOCK_MAX
 + 2];

143 
	#I2C_SMBUS_READ
 1

	)

144 
	#I2C_SMBUS_WRITE
 0

	)

148 
	#I2C_SMBUS_QUICK
 0

	)

149 
	#I2C_SMBUS_BYTE
 1

	)

150 
	#I2C_SMBUS_BYTE_DATA
 2

	)

151 
	#I2C_SMBUS_WORD_DATA
 3

	)

152 
	#I2C_SMBUS_PROC_CALL
 4

	)

153 
	#I2C_SMBUS_BLOCK_DATA
 5

	)

154 
	#I2C_SMBUS_I2C_BLOCK_BROKEN
 6

	)

155 
	#I2C_SMBUS_BLOCK_PROC_CALL
 7

	)

156 
	#I2C_SMBUS_I2C_BLOCK_DATA
 8

	)

	@/usr/include/linux/kernel.h

2 #i‚de‡
_LINUX_KERNEL_H


3 
	#_LINUX_KERNEL_H


	)

5 
	~<löux/sysöfo.h
>

10 
	#__ALIGN_KERNEL
(
x
, 
a
Ë
	`__ALIGN_KERNEL_MASK
(x, (
	`ty≥of
(x))◊Ë- 1)

	)

11 
	#__ALIGN_KERNEL_MASK
(
x
, 
mask
Ë(((xË+ (mask)Ë& ~(mask))

	)

13 
	#__KERNEL_DIV_ROUND_UP
(
n
, 
d
Ë((“Ë+ (dË- 1Ë/ (d))

	)

	@/usr/include/linux/module.h

2 #i‚de‡
_LINUX_MODULE_H


3 
	#_LINUX_MODULE_H


	)

6 
	#MODULE_INIT_IGNORE_MODVERSIONS
 1

	)

7 
	#MODULE_INIT_IGNORE_VERMAGIC
 2

	)

	@/usr/include/linux/pci.h

18 #i‚de‡
LINUX_PCI_H


19 
	#LINUX_PCI_H


	)

21 
	~<löux/pci_ªgs.h
>

31 
	#PCI_DEVFN
(
¶Ÿ
, 
func
Ë((((¶ŸË& 0x1fË<< 3Ë| ((funcË& 0x07))

	)

32 
	#PCI_SLOT
(
dev‚
Ë(((dev‚Ë>> 3Ë& 0x1f)

	)

33 
	#PCI_FUNC
(
dev‚
Ë((dev‚Ë& 0x07)

	)

36 
	#PCIIOC_BASE
 ('P' << 24 | 'C' << 16 | 'I' << 8)

	)

37 
	#PCIIOC_CONTROLLER
 (
PCIIOC_BASE
 | 0x00Ë

	)

38 
	#PCIIOC_MMAP_IS_IO
 (
PCIIOC_BASE
 | 0x01Ë

	)

39 
	#PCIIOC_MMAP_IS_MEM
 (
PCIIOC_BASE
 | 0x02Ë

	)

40 
	#PCIIOC_WRITE_COMBINE
 (
PCIIOC_BASE
 | 0x03Ë

	)

	@/usr/include/linux/string.h

2 #i‚de‡
_LINUX_STRING_H_


3 
	#_LINUX_STRING_H_


	)

7 
	~<°rög.h
>

	@/usr/include/linux/tty.h

2 #i‚de‡
_LINUX_TTY_H


3 
	#_LINUX_TTY_H


	)

9 
	#NR_LDISCS
 30

	)

12 
	#N_TTY
 0

	)

13 
	#N_SLIP
 1

	)

14 
	#N_MOUSE
 2

	)

15 
	#N_PPP
 3

	)

16 
	#N_STRIP
 4

	)

17 
	#N_AX25
 5

	)

18 
	#N_X25
 6

	)

19 
	#N_6PACK
 7

	)

20 
	#N_MASC
 8

	)

21 
	#N_R3964
 9

	)

22 
	#N_PROFIBUS_FDL
 10

	)

23 
	#N_IRDA
 11

	)

24 
	#N_SMSBLOCK
 12

	)

26 
	#N_HDLC
 13

	)

27 
	#N_SYNC_PPP
 14

	)

28 
	#N_HCI
 15

	)

29 
	#N_GIGASET_M101
 16

	)

30 
	#N_SLCAN
 17

	)

31 
	#N_PPS
 18

	)

32 
	#N_V253
 19

	)

33 
	#N_CAIF
 20

	)

34 
	#N_GSM0710
 21

	)

35 
	#N_TI_WL
 22

	)

36 
	#N_TRACESINK
 23

	)

37 
	#N_TRACEROUTER
 24

	)

38 
	#N_NCI
 25

	)

39 
	#N_SPEAKUP
 26

	)

40 
	#N_NULL
 27

	)

	@/usr/include/linux/types.h

2 #i‚de‡
_LINUX_TYPES_H


3 
	#_LINUX_TYPES_H


	)

5 
	~<asm/ty≥s.h
>

7 #i‚de‡
__ASSEMBLY__


9 
	~<löux/posix_ty≥s.h
>

17 #ifde‡
__CHECKER__


18 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

20 
	#__bôwi£__


	)

22 
	#__bôwi£
 
__bôwi£__


	)

24 
__u16
 
	t__bôwi£
 
	t__À16
;

25 
__u16
 
	t__bôwi£
 
	t__be16
;

26 
__u32
 
	t__bôwi£
 
	t__À32
;

27 
__u32
 
	t__bôwi£
 
	t__be32
;

28 
__u64
 
	t__bôwi£
 
	t__À64
;

29 
__u64
 
	t__bôwi£
 
	t__be64
;

31 
__u16
 
	t__bôwi£
 
	t__sum16
;

32 
__u32
 
	t__bôwi£
 
	t__wsum
;

43 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

44 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

45 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

	@ast_dram_tables.h

1 #i‚de‡
AST_DRAM_TABLES_H


2 
	#AST_DRAM_TABLES_H


	)

5 
	sa°_døm°ru˘
 {

6 
u16
 
	mödex
;

7 
u32
 
	md©a
;

10 c⁄° 
a°_døm°ru˘
 
	ga°2000_døm_èbÀ_d©a
[] = {

38 c⁄° 
a°_døm°ru˘
 
	ga°1100_døm_èbÀ_d©a
[] = {

91 c⁄° 
a°_døm°ru˘
 
	ga°2100_døm_èbÀ_d©a
[] = {

147 
	#REGTBL_NUM
 17

	)

148 
	#REGIDX_010
 0

	)

149 
	#REGIDX_014
 1

	)

150 
	#REGIDX_018
 2

	)

151 
	#REGIDX_020
 3

	)

152 
	#REGIDX_024
 4

	)

153 
	#REGIDX_02C
 5

	)

154 
	#REGIDX_030
 6

	)

155 
	#REGIDX_214
 7

	)

156 
	#REGIDX_2E0
 8

	)

157 
	#REGIDX_2E4
 9

	)

158 
	#REGIDX_2E8
 10

	)

159 
	#REGIDX_2EC
 11

	)

160 
	#REGIDX_2F0
 12

	)

161 
	#REGIDX_2F4
 13

	)

162 
	#REGIDX_2F8
 14

	)

163 
	#REGIDX_RFC
 15

	)

164 
	#REGIDX_PLL
 16

	)

166 c⁄° 
u32
 
	ga°2500_ddr3_1600_timög_èbÀ
[
REGTBL_NUM
] = {

185 c⁄° 
u32
 
	ga°2500_ddr4_1600_timög_èbÀ
[
REGTBL_NUM
] = {

	@ast_drv.h

28 #i‚de‡
__AST_DRV_H__


29 
	#__AST_DRV_H__


	)

31 
	~<löux/ty≥s.h
>

32 
	~<löux/io.h
>

33 
	~<löux/i2c.h
>

34 
	~<löux/i2c-Ægo-bô.h
>

36 
	~<drm/drm_c⁄√˘‹.h
>

37 
	~<drm/drm_¸tc.h
>

38 
	~<drm/drm_ícodî.h
>

39 
	~<drm/drm_mode.h
>

40 
	~<drm/drm_‰amebuf„r.h
>

41 
	~<drm/drm_fb_hñ≥r.h
>

43 
	#DRIVER_AUTHOR
 "DavêAúlõ"

	)

45 
	#DRIVER_NAME
 "a°"

	)

46 
	#DRIVER_DESC
 "AST"

	)

47 
	#DRIVER_DATE
 "20210324"

	)

49 
	#DRIVER_MAJOR
 1

	)

50 
	#DRIVER_MINOR
 12

	)

51 
	#DRIVER_PATCHLEVEL
 0

	)

53 
	#PCI_CHIP_AST2000
 0x2000

	)

54 
	#PCI_CHIP_AST2100
 0x2010

	)

55 
	#PCI_CHIP_AST1180
 0x1180

	)

56 
	#PCI_CHIP_AIP200
 0xA200

	)

59 
	ea°_chù
 {

60 
	mAST2000
,

61 
	mAST2100
,

62 
	mAST1100
,

63 
	mAST2200
,

64 
	mAST2150
,

65 
	mAST2300
,

66 
	mAST2400
,

67 
	mAST2500
,

68 
	mAST2600
,

69 
	mAST1180
,

70 
	mAIP200
,

73 
	ea°_tx_chù
 {

74 
	mAST_TX_NONE
,

75 
	mAST_TX_SIL164
,

76 
	mAST_TX_ITE66121
,

77 
	mAST_TX_DP501
,

78 
	mAST_TX_ASTDP
,

81 
	#AST_DRAM_512Mx16
 0

	)

82 
	#AST_DRAM_1Gx16
 1

	)

83 
	#AST_DRAM_512Mx32
 2

	)

84 
	#AST_DRAM_1Gx32
 3

	)

85 
	#AST_DRAM_2Gx16
 6

	)

86 
	#AST_DRAM_4Gx16
 7

	)

87 
	#AST_DRAM_8Gx16
 8

	)

89 
	sa°_¥iv©e
 {

90 
drm_devi˚
 *
	mdev
;

92 
__iomem
 *
	mªgs
;

93 
__iomem
 *
	mi‹egs
;

94 
__iomem
 *
	mª£rvedbuf„r
;

96 
a°_chù
 
	mchù
;

97 
boﬁ
 
	mvga2_˛⁄e
;

98 
uöt32_t
 
	mdøm_bus_width
;

99 
uöt32_t
 
	mdøm_ty≥
;

100 
uöt32_t
 
	mm˛k
;

101 
uöt32_t
 
	mvøm_size
;

103 
	mfb_mår
;

105 
drm_gem_obje˘
 *
	mcurs‹_ˇche
;

106 
	m√xt_curs‹
;

107 
boﬁ
 
	msuµ‹t_wide_s¸ìn
;

108 
boﬁ
 
	msuµ‹t_√wvga_mode
;

109 
boﬁ
 
	mRefCLK25MHz
;

111 
	ma°_u£_p2a
,

112 
	ma°_u£_dt
,

113 
	ma°_u£_deÁu…s


114 } 
	mc⁄fig_mode
;

116 
a°_tx_chù
 
	mtx_chù_ty≥
;

117 
u8
 
	mdp501_max˛k
;

118 
u8
 *
	mdp501_fw_addr
;

119 c⁄° 
fúmw¨e
 *
	mdp501_fw
;

122 
u8
 
	mASTDP_Sèã
;

125 
a°_drivî_lﬂd
(
drm_devi˚
 *
dev
, 
Êags
);

126 
a°_drivî_u∆ﬂd
(
drm_devi˚
 *
dev
);

128 
	ga°_gem_obje˘
;

130 
	#AST_IO_AR_PORT_WRITE
 (0x40)

	)

131 
	#AST_IO_MISC_PORT_WRITE
 (0x42)

	)

132 
	#AST_IO_VGA_ENABLE_PORT
 (0x43)

	)

133 
	#AST_IO_SEQ_PORT
 (0x44)

	)

134 
	#AST_IO_DAC_INDEX_READ
 (0x47)

	)

135 
	#AST_IO_DAC_INDEX_WRITE
 (0x48)

	)

136 
	#AST_IO_DAC_DATA
 (0x49)

	)

137 
	#AST_IO_GR_PORT
 (0x4E)

	)

138 
	#AST_IO_CRTC_PORT
 (0x54)

	)

139 
	#AST_IO_INPUT_STATUS1_READ
 (0x5A)

	)

140 
	#AST_IO_MISC_PORT_READ
 (0x4C)

	)

142 
	#MMIOREG_DP_DATA
 (0x20000)

143 
	#MMIOREG_DP_EDID
 (0x20800)

	)

144 
	#MMIOREG_DP_REG
 (0x24000)

145 
	#MMIOREG_DP_INST
 (0x28000)

146 

	)

147 
	#AST_IO_MM_OFFSET
 (0x380)

	)

149 
	#__a°_ªad
(
x
) \

150 
ölöe
 
u
##
x
 
a°_ªad
##
	`x
(
a°_¥iv©e
 *
a°
, 
u32
 
ªg
) { \

151 
u
##
x
 
vÆ
 = 0;\

152 
vÆ
 = 
i‹ód
##
	`x
(
a°
->
ªgs
 + 
ªg
); \

153  
vÆ
;\

154 }

	)

156 
__a°_ªad
(8);

157 
__a°_ªad
(16);

158 
	$__a°_ªad
(32)

160 
	#__a°_io_ªad
(
x
) \

161 
ölöe
 
u
##
x
 
a°_io_ªad
##
	`x
(
a°_¥iv©e
 *
a°
, 
u32
 
ªg
) { \

162 
u
##
x
 
vÆ
 = 0;\

163 
vÆ
 = 
i‹ód
##
	`x
(
a°
->
i‹egs
 + 
ªg
); \

164  
vÆ
;\

165 
	}

	)
}

167 
__a°_io_ªad
(8);

168 
__a°_io_ªad
(16);

169 
__a°_io_ªad
(32);

171 
	#__a°_wrôe
(
x
) \

172 
ölöe
 
a°_wrôe
##
	`x
(
a°_¥iv©e
 *
a°
, 
u32
 
ªg
, 
u
##
x
 
vÆ
) {\

173 
iowrôe
##
	`x
(
vÆ
, 
a°
->
ªgs
 + 
ªg
);\

174 }

	)

176 
__a°_wrôe
(8);

177 
__a°_wrôe
(16);

178 
__a°_wrôe
(32);

180 
	#__a°_io_wrôe
(
x
) \

181 
ölöe
 
a°_io_wrôe
##
	`x
(
a°_¥iv©e
 *
a°
, 
u32
 
ªg
, 
u
##
x
 
vÆ
) {\

182 
iowrôe
##
	`x
(
vÆ
, 
a°
->
i‹egs
 + 
ªg
);\

183 }

	)

185 
__a°_io_wrôe
(8);

186 
__a°_io_wrôe
(16);

187 #unde‡
__a°_io_wrôe


189 
ölöe
 
	$a°_£t_ödex_ªg
(
a°_¥iv©e
 *
a°
,

190 
uöt32_t
 
ba£
, 
uöt8_t
 
ödex
,

191 
uöt8_t
 
vÆ
)

193 
	`a°_io_wrôe16
(
a°
, 
ba£
, ((
u16
)
vÆ
 << 8Ë| 
ödex
);

194 
	}
}

196 
a°_£t_ödex_ªg_mask
(
a°_¥iv©e
 *
a°
,

197 
uöt32_t
 
ba£
, 
uöt8_t
 
ödex
,

198 
uöt8_t
 
mask
, uöt8_à
vÆ
);

199 
uöt8_t
 
a°_gë_ödex_ªg
(
a°_¥iv©e
 *
a°
,

200 
uöt32_t
 
ba£
, 
uöt8_t
 
ödex
);

201 
uöt8_t
 
a°_gë_ödex_ªg_mask
(
a°_¥iv©e
 *
a°
,

202 
uöt32_t
 
ba£
, 
uöt8_t
 
ödex
, uöt8_à
mask
);

204 
ölöe
 
	$a°_›í_key
(
a°_¥iv©e
 *
a°
)

206 
	`a°_£t_ödex_ªg
(
a°
, 
AST_IO_CRTC_PORT
, 0x80, 0xA8);

207 
	}
}

209 
ölöe
 
a°_waô_⁄e_vsync
(
a°_¥iv©e
 *
a°
);

211 
	#AST_VIDMEM_SIZE_8M
 0x00800000

	)

212 
	#AST_VIDMEM_SIZE_16M
 0x01000000

	)

213 
	#AST_VIDMEM_SIZE_32M
 0x02000000

	)

214 
	#AST_VIDMEM_SIZE_64M
 0x04000000

	)

215 
	#AST_VIDMEM_SIZE_128M
 0x08000000

	)

217 
	#AST_VIDMEM_DEFAULT_SIZE
 
AST_VIDMEM_SIZE_8M


	)

219 
	#AST_MAX_HWC_WIDTH
 64

	)

220 
	#AST_MAX_HWC_HEIGHT
 64

	)

222 
	#AST_HWC_SIZE
 (
AST_MAX_HWC_WIDTH
*
AST_MAX_HWC_HEIGHT
*2)

	)

223 
	#AST_HWC_SIGNATURE_SIZE
 32

	)

225 
	#AST_DEFAULT_HWC_NUM
 2

	)

227 
	#AST_HWC_SIGNATURE_CHECKSUM
 0x00

	)

228 
	#AST_HWC_SIGNATURE_SizeX
 0x04

	)

229 
	#AST_HWC_SIGNATURE_SizeY
 0x08

	)

230 
	#AST_HWC_SIGNATURE_X
 0x0C

	)

231 
	#AST_HWC_SIGNATURE_Y
 0x10

	)

232 
	#AST_HWC_SIGNATURE_HOTSPOTX
 0x14

	)

233 
	#AST_HWC_SIGNATURE_HOTSPOTY
 0x18

	)

236 
	sa°_i2c_ch™
 {

237 
i2c_ad≠ãr
 
	mad≠ãr
;

238 
drm_devi˚
 *
	mdev
;

239 
i2c_Ægo_bô_d©a
 
	mbô
;

242 
	sa°_c⁄√˘‹
 {

243 
drm_c⁄√˘‹
 
	mba£
;

244 
a°_i2c_ch™
 *
	mi2c
;

247 
	sa°_¸tc
 {

248 
drm_¸tc
 
	mba£
;

249 
u8
 
	moff£t_x
, 
	moff£t_y
;

252 
	sa°_ícodî
 {

253 
drm_ícodî
 
	mba£
;

256 
	#to_a°_¸tc
(
x
Ë
	`c⁄èöî_of
(x, 
a°_¸tc
, 
ba£
)

	)

257 
	#to_a°_c⁄√˘‹
(
x
Ë
	`c⁄èöî_of
(x, 
a°_c⁄√˘‹
, 
ba£
)

	)

258 
	#to_a°_ícodî
(
x
Ë
	`c⁄èöî_of
(x, 
a°_ícodî
, 
ba£
)

	)

260 
	sa°_vbios_°dèbÀ
 {

261 
u8
 
	mmisc
;

262 
u8
 
	m£q
[4];

263 
u8
 
	m¸tc
[25];

264 
u8
 
	m¨
[20];

265 
u8
 
	mgr
[9];

268 
	sa°_vbios_íhèbÀ
 {

269 
u32
 
	mht
;

270 
u32
 
	mhde
;

271 
u32
 
	mhÂ
;

272 
u32
 
	mhsync
;

273 
u32
 
	mvt
;

274 
u32
 
	mvde
;

275 
u32
 
	mvÂ
;

276 
u32
 
	mvsync
;

277 
u32
 
	md˛k_ödex
;

278 
u32
 
	mÊags
;

279 
u32
 
	mª‰esh_øã
;

280 
u32
 
	mª‰esh_øã_ödex
;

281 
u32
 
	mmode_id
;

284 
	sa°_vbios_d˛k_öfo
 {

285 
u8
 
	m∑øm1
;

286 
u8
 
	m∑øm2
;

287 
u8
 
	m∑øm3
;

290 
	sa°_vbios_mode_öfo
 {

291 c⁄° 
a°_vbios_°dèbÀ
 *
	m°d_èbÀ
;

292 c⁄° 
a°_vbios_íhèbÀ
 *
	míh_èbÀ
;

295 
a°_mode_öô
(
drm_devi˚
 *
dev
);

296 
a°_mode_föi
(
drm_devi˚
 *
dev
);

298 
	#AST_MM_ALIGN_SHIFT
 4

	)

299 
	#AST_MM_ALIGN_MASK
 ((1 << 
AST_MM_ALIGN_SHIFT
Ë- 1)

	)

301 
a°_mm_öô
(
a°_¥iv©e
 *
a°
);

302 
a°_mm_föi
(
a°_¥iv©e
 *
a°
);

304 
a°_gem_¸óã
(
drm_devi˚
 *
dev
,

305 
u32
 
size
, 
boﬁ
 
iskî√l
,

306 
drm_gem_obje˘
 **
obj
);

309 
a°_íabÀ_vga
(
drm_devi˚
 *
dev
);

310 
a°_íabÀ_mmio
(
drm_devi˚
 *
dev
);

311 
boﬁ
 
a°_is_vga_íabÀd
(
drm_devi˚
 *
dev
);

312 
a°_po°_gpu
(
drm_devi˚
 *
dev
);

313 
u32
 
a°_mödwm
(
a°_¥iv©e
 *
a°
, u32 
r
);

314 
a°_moutdwm
(
a°_¥iv©e
 *
a°
, 
u32
 
r
, u32 
v
);

315 
∑tch_ahb_a°2500
(
a°_¥iv©e
 *
a°
);

317 
a°_£t_dp501_video_ouçut
(
drm_devi˚
 *
dev
, 
u8
 
mode
);

318 
boﬁ
 
a°_backup_fw
(
drm_devi˚
 *
dev
, 
u8
 *
addr
, 
u32
 
size
);

319 
boﬁ
 
a°_dp501_ªad_edid
(
drm_devi˚
 *
dev
, 
u8
 *
edidd©a
);

320 
u8
 
a°_gë_dp501_max_˛k
(
drm_devi˚
 *
dev
);

321 
a°_öô_3rdtx
(
drm_devi˚
 *
dev
);

322 
a°_ªÀa£_fúmw¨e
(
drm_devi˚
 *
dev
);

324 
	#DPC⁄åﬁPowî


	)

325 
boﬁ
 
a°_dp_ªad_edid
(
drm_devi˚
 *
dev
, 
u8
 *
edidd©a
);

326 
boﬁ
 
a°_dp_œunch
(
drm_devi˚
 *
dev
, 
u8
 
bPowî
);

327 #ifde‡
DPC⁄åﬁPowî


328 
a°_dp_PowîOnOff
(
drm_devi˚
 *
dev
, 
u8
 
Mode
);

330 
a°_dp_SëOnOff
(
drm_devi˚
 *
dev
, 
u8
 
Mode
);

331 
a°_dp_SëOuçut
(
drm_¸tc
 *
¸tc
, 
a°_vbios_mode_öfo
 *
vbios_mode
);

	@ast_hdmitx.h

5 
	#DDC_HDCP_ADDRESS
 0x74

	)

6 
	#DDC_EDID_ADDRESS
 0xA0

	)

7 
	#DDC_FIFO_MAXREQ
 0x20

	)

11 
	#_80MHz
 80000000

	)

12 
	#HDMI_I2C_CHANNEL
 1

	)

13 
	#HDMI_TX_I2C_SLAVE_ADDR
 0x98

	)

14 
	#CEC_I2C_SLAVE_ADDR
 0x9C

	)

19 
	#REG_TX_VENDOR_ID0
 0x00

	)

20 
	#REG_TX_VENDOR_ID1
 0x01

	)

21 
	#REG_TX_DEVICE_ID0
 0x02

	)

22 
	#REG_TX_DEVICE_ID1
 0x03

	)

24 
	#O_TX_DEVID
 0

	)

25 
	#M_TX_DEVID
 0xF

	)

26 
	#O_TX_REVID
 4

	)

27 
	#M_TX_REVID
 0xF

	)

29 
	#REG_TX_SW_RST
 0x04

	)

30 
	#B_TX_ENTEST
 (1<<7)

	)

31 
	#B_TX_REF_RST_HDMITX
 (1<<5)

	)

32 
	#B_TX_AREF_RST
 (1<<4)

	)

33 
	#B_HDMITX_VID_RST
 (1<<3)

	)

34 
	#B_HDMITX_AUD_RST
 (1<<2)

	)

35 
	#B_TX_HDMI_RST
 (1<<1)

	)

36 
	#B_TX_HDCP_RST_HDMITX
 (1<<0)

	)

38 
	#REG_TX_INT_CTRL
 0x05

	)

39 
	#B_TX_INTPOL_ACTL
 0

	)

40 
	#B_TX_INTPOL_ACTH
 (1<<7)

	)

41 
	#B_TX_INT_PUSHPULL
 0

	)

42 
	#B_TX_INT_OPENDRAIN
 (1<<6)

	)

44 
	#REG_TX_INT_STAT1
 0x06

	)

45 
	#B_TX_INT_AUD_OVERFLOW
 (1<<7)

	)

46 
	#B_TX_INT_ROMACQ_NOACK
 (1<<6)

	)

47 
	#B_TX_INT_RDDC_NOACK
 (1<<5)

	)

48 
	#B_TX_INT_DDCFIFO_ERR
 (1<<4)

	)

49 
	#B_TX_INT_ROMACQ_BUS_HANG
 (1<<3)

	)

50 
	#B_TX_INT_DDC_BUS_HANG
 (1<<2)

	)

51 
	#B_TX_INT_RX_SENSE
 (1<<1)

	)

52 
	#B_TX_INT_HPD_PLUG
 (1<<0)

	)

54 
	#REG_TX_INT_STAT2
 0x07

	)

55 
	#B_TX_INT_HDCP_SYNC_DET_FAIL
 (1<<7)

	)

56 
	#B_TX_INT_VID_UNSTABLE
 (1<<6)

	)

57 
	#B_TX_INT_PKTACP
 (1<<5)

	)

58 
	#B_TX_INT_PKTNULL
 (1<<4)

	)

59 
	#B_TX_INT_PKTGENERAL
 (1<<3)

	)

60 
	#B_TX_INT_KSVLIST_CHK
 (1<<2)

	)

61 
	#B_TX_INT_AUTH_DONE
 (1<<1)

	)

62 
	#B_TX_INT_AUTH_FAIL
 (1<<0)

	)

64 
	#REG_TX_INT_STAT3
 0x08

	)

65 
	#B_TX_INT_AUD_CTS
 (1<<6)

	)

66 
	#B_TX_INT_VSYNC
 (1<<5)

	)

67 
	#B_TX_INT_VIDSTABLE
 (1<<4)

	)

68 
	#B_TX_INT_PKTMPG
 (1<<3)

	)

69 
	#B_TX_INT_PKTSPD
 (1<<2)

	)

70 
	#B_TX_INT_PKTAUD
 (1<<1)

	)

71 
	#B_TX_INT_PKTAVI
 (1<<0)

	)

73 
	#REG_TX_INT_MASK1
 0x09

	)

74 
	#B_TX_AUDIO_OVFLW_MASK
 (1<<7)

	)

75 
	#B_TX_DDC_NOACK_MASK
 (1<<5)

	)

76 
	#B_TX_DDC_FIFO_ERR_MASK
 (1<<4)

	)

77 
	#B_TX_DDC_BUS_HANG_MASK
 (1<<2)

	)

78 
	#B_TX_RXSEN_MASK
 (1<<1)

	)

79 
	#B_TX_HPD_MASK
 (1<<0)

	)

81 
	#REG_TX_INT_MASK2
 0x0A

	)

82 
	#B_TX_PKT_AVI_MASK
 (1<<7)

	)

83 
	#B_TX_PKT_VID_UNSTABLE_MASK
 (1<<6)

	)

84 
	#B_TX_PKT_ACP_MASK
 (1<<5)

	)

85 
	#B_TX_PKT_NULL_MASK
 (1<<4)

	)

86 
	#B_TX_PKT_GEN_MASK
 (1<<3)

	)

87 
	#B_TX_KSVLISTCHK_MASK
 (1<<2)

	)

88 
	#B_TX_AUTH_DONE_MASK
 (1<<1)

	)

89 
	#B_TX_AUTH_FAIL_MASK
 (1<<0)

	)

91 
	#REG_TX_INT_MASK3
 0x0B

	)

92 
	#B_TX_HDCP_SYNC_DET_FAIL_MASK
 (1<<6)

	)

93 
	#B_TX_AUDCTS_MASK
 (1<<5)

	)

94 
	#B_TX_VSYNC_MASK
 (1<<4)

	)

95 
	#B_TX_VIDSTABLE_MASK
 (1<<3)

	)

96 
	#B_TX_PKT_MPG_MASK
 (1<<2)

	)

97 
	#B_TX_PKT_SPD_MASK
 (1<<1)

	)

98 
	#B_TX_PKT_AUD_MASK
 (1<<0)

	)

100 
	#REG_TX_INT_CLR0
 0x0C

	)

101 
	#B_TX_CLR_PKTACP
 (1<<7)

	)

102 
	#B_TX_CLR_PKTNULL
 (1<<6)

	)

103 
	#B_TX_CLR_PKTGENERAL
 (1<<5)

	)

104 
	#B_TX_CLR_KSVLISTCHK
 (1<<4)

	)

105 
	#B_TX_CLR_AUTH_DONE
 (1<<3)

	)

106 
	#B_TX_CLR_AUTH_FAIL
 (1<<2)

	)

107 
	#B_TX_CLR_RXSENSE
 (1<<1)

	)

108 
	#B_TX_CLR_HPD
 (1<<0)

	)

110 
	#REG_TX_INT_CLR1
 0x0D

	)

111 
	#B_TX_CLR_VSYNC
 (1<<7)

	)

112 
	#B_TX_CLR_VIDSTABLE
 (1<<6)

	)

113 
	#B_TX_CLR_PKTMPG
 (1<<5)

	)

114 
	#B_TX_CLR_PKTSPD
 (1<<4)

	)

115 
	#B_TX_CLR_PKTAUD
 (1<<3)

	)

116 
	#B_TX_CLR_PKTAVI
 (1<<2)

	)

117 
	#B_TX_CLR_HDCP_SYNC_DET_FAIL
 (1<<1)

	)

118 
	#B_TX_CLR_VID_UNSTABLE
 (1<<0)

	)

120 
	#REG_TX_SYS_STATUS
 0x0E

	)

122 
	#B_TX_INT_ACTIVE
 (1<<7)

	)

123 
	#B_TX_HPDETECT
 (1<<6)

	)

124 
	#B_TX_RXSENDETECT
 (1<<5)

	)

125 
	#B_TXVIDSTABLE
 (1<<4)

	)

127 
	#O_TX_CTSINTSTEP
 2

	)

128 
	#M_TX_CTSINTSTEP
 (3<<2)

	)

129 
	#B_TX_CLR_AUD_CTS
 (1<<1)

	)

130 
	#B_TX_INTACTDONE
 (1<<0)

	)

132 
	#REG_TX_BANK_CTRL
 0x0F

	)

133 
	#B_TX_BANK0
 0

	)

134 
	#B_TX_BANK1
 1

	)

138 
	#REG_TX_DDC_MASTER_CTRL
 0x10

	)

139 
	#B_TX_MASTERROM
 (1<<1)

	)

140 
	#B_TX_MASTERDDC
 (0<<1)

	)

141 
	#B_TX_MASTERHOST
 (1<<0)

	)

142 
	#B_TX_MASTERHDCP
 (0<<0)

	)

144 
	#REG_TX_DDC_HEADER
 0x11

	)

145 
	#REG_TX_DDC_REQOFF
 0x12

	)

146 
	#REG_TX_DDC_REQCOUNT
 0x13

	)

147 
	#REG_TX_DDC_EDIDSEG
 0x14

	)

148 
	#REG_TX_DDC_CMD
 0x15

	)

149 
	#CMD_DDC_SEQ_BURSTREAD
 0

	)

150 
	#CMD_LINK_CHKREAD
 2

	)

151 
	#CMD_EDID_READ
 3

	)

152 
	#CMD_FIFO_CLR
 9

	)

153 
	#CMD_GEN_SCLCLK
 0xA

	)

154 
	#CMD_DDC_ABORT
 0xF

	)

156 
	#REG_TX_DDC_STATUS
 0x16

	)

157 
	#B_TX_DDC_DONE
 (1<<7)

	)

158 
	#B_TX_DDC_ACT
 (1<<6)

	)

159 
	#B_TX_DDC_NOACK
 (1<<5)

	)

160 
	#B_TX_DDC_WAITBUS
 (1<<4)

	)

161 
	#B_TX_DDC_ARBILOSE
 (1<<3)

	)

162 
	#B_TX_DDC_ERROR
 (
B_TX_DDC_NOACK
|
B_TX_DDC_WAITBUS
|
B_TX_DDC_ARBILOSE
)

	)

163 
	#B_TX_DDC_FIFOFULL
 (1<<2)

	)

164 
	#B_TX_DDC_FIFOEMPTY
 (1<<1)

	)

166 
	#REG_TX_DDC_READFIFO
 0x17

	)

167 
	#REG_TX_ROM_STARTADDR
 0x18

	)

168 
	#REG_TX_HDCP_HEADER
 0x19

	)

169 
	#REG_TX_ROM_HEADER
 0x1A

	)

170 
	#REG_TX_BUSHOLD_T
 0x1B

	)

171 
	#REG_TX_ROM_STAT
 0x1C

	)

172 
	#B_TX_ROM_DONE
 (1<<7)

	)

173 
	#B_TX_ROM_ACTIVE
 (1<<6)

	)

174 
	#B_TX_ROM_NOACK
 (1<<5)

	)

175 
	#B_TX_ROM_WAITBUS
 (1<<4)

	)

176 
	#B_TX_ROM_ARBILOSE
 (1<<3)

	)

177 
	#B_TX_ROM_BUSHANG
 (1<<2)

	)

180 
	#REG_TX_AN_GENERATE
 0x1F

	)

181 
	#B_TX_START_CIPHER_GEN
 1

	)

182 
	#B_TX_STOP_CIPHER_GEN
 0

	)

184 
	#REG_TX_CLK_CTRL0
 0x58

	)

185 
	#O_TX_OSCLK_SEL
 5

	)

186 
	#M_TX_OSCLK_SEL
 3

	)

187 
	#B_TX_AUTO_OVER_SAMPLING_CLOCK
 (1<<4)

	)

188 
	#O_TX_EXT_MCLK_SEL
 2

	)

189 
	#M_TX_EXT_MCLK_SEL
 (3<<
O_TX_EXT_MCLK_SEL
)

	)

190 
	#B_TX_EXT_128FS
 (0<<
O_TX_EXT_MCLK_SEL
)

	)

191 
	#B_TX_EXT_256FS
 (1<<
O_TX_EXT_MCLK_SEL
)

	)

192 
	#B_TX_EXT_512FS
 (2<<
O_TX_EXT_MCLK_SEL
)

	)

193 
	#B_TX_EXT_1024FS
 (3<<
O_TX_EXT_MCLK_SEL
)

	)

195 
	#REG_TX_SHA_SEL
 0x50

	)

196 
	#REG_TX_SHA_RD_BYTE1
 0x51

	)

197 
	#REG_TX_SHA_RD_BYTE2
 0x52

	)

198 
	#REG_TX_SHA_RD_BYTE3
 0x53

	)

199 
	#REG_TX_SHA_RD_BYTE4
 0x54

	)

200 
	#REG_TX_AKSV_RD_BYTE5
 0x55

	)

203 
	#REG_TX_CLK_CTRL1
 0x59

	)

204 
	#B_TX_EN_TXCLK_COUNT
 (1<<5)

	)

205 
	#B_TX_VDO_LATCH_EDGE
 (1<<3)

	)

207 
	#REG_TX_CLK_STATUS1
 0x5E

	)

208 
	#REG_TX_CLK_STATUS2
 0x5F

	)

209 
	#B_TX_IP_LOCK
 (1<<7)

	)

210 
	#B_TX_XP_LOCK
 (1<<6)

	)

211 
	#B_TX_OSF_LOCK
 (1<<5)

	)

213 
	#REG_TX_AUD_COUNT
 0x60

	)

214 
	#REG_TX_AFE_DRV_CTRL
 0x61

	)

216 
	#B_TX_AFE_DRV_PWD
 (1<<5)

	)

217 
	#B_TX_AFE_DRV_RST
 (1<<4)

	)

220 
	#REG_TX_INPUT_MODE
 0x70

	)

221 
	#O_TX_INCLKDLY
 0

	)

222 
	#M_TX_INCLKDLY
 3

	)

223 
	#B_TX_INDDR
 (1<<2)

	)

224 
	#B_TX_SYNCEMB
 (1<<3)

	)

225 
	#B_TX_2X656CLK
 (1<<4)

	)

226 
	#B_TX_PCLKDIV2
 (1<<5)

	)

227 
	#M_TX_INCOLMOD
 (3<<6)

	)

228 
	#B_TX_IN_RGB
 0

	)

229 
	#B_TX_IN_YUV422
 (1<<6)

	)

230 
	#B_TX_IN_YUV444
 (2<<6)

	)

232 
	#REG_TX_TXFIFO_RST
 0x71

	)

233 
	#B_TX_ENAVMUTERST
 1

	)

234 
	#B_TXFFRST
 (1<<1)

	)

236 
	#REG_TX_CSC_CTRL
 0x72

	)

237 
	#B_HDMITX_CSC_BYPASS
 0

	)

238 
	#B_HDMITX_CSC_RGB2YUV
 2

	)

239 
	#B_HDMITX_CSC_YUV2RGB
 3

	)

240 
	#M_TX_CSC_SEL
 3

	)

241 
	#B_TX_EN_DITHER
 (1<<7)

	)

242 
	#B_TX_EN_UDFILTER
 (1<<6)

	)

243 
	#B_TX_DNFREE_GO
 (1<<5)

	)

245 
	#SIZEOF_CSCMTX
 21

	)

246 
	#SIZEOF_CSCGAIN
 6

	)

247 
	#SIZEOF_CSCOFFSET
 3

	)

250 
	#REG_TX_CSC_YOFF
 0x73

	)

251 
	#REG_TX_CSC_COFF
 0x74

	)

252 
	#REG_TX_CSC_RGBOFF
 0x75

	)

254 
	#REG_TX_CSC_MTX11_L
 0x76

	)

255 
	#REG_TX_CSC_MTX11_H
 0x77

	)

256 
	#REG_TX_CSC_MTX12_L
 0x78

	)

257 
	#REG_TX_CSC_MTX12_H
 0x79

	)

258 
	#REG_TX_CSC_MTX13_L
 0x7A

	)

259 
	#REG_TX_CSC_MTX13_H
 0x7B

	)

260 
	#REG_TX_CSC_MTX21_L
 0x7C

	)

261 
	#REG_TX_CSC_MTX21_H
 0x7D

	)

262 
	#REG_TX_CSC_MTX22_L
 0x7E

	)

263 
	#REG_TX_CSC_MTX22_H
 0x7F

	)

264 
	#REG_TX_CSC_MTX23_L
 0x80

	)

265 
	#REG_TX_CSC_MTX23_H
 0x81

	)

266 
	#REG_TX_CSC_MTX31_L
 0x82

	)

267 
	#REG_TX_CSC_MTX31_H
 0x83

	)

268 
	#REG_TX_CSC_MTX32_L
 0x84

	)

269 
	#REG_TX_CSC_MTX32_H
 0x85

	)

270 
	#REG_TX_CSC_MTX33_L
 0x86

	)

271 
	#REG_TX_CSC_MTX33_H
 0x87

	)

273 
	#REG_TX_CSC_GAIN1V_L
 0x88

	)

274 
	#REG_TX_CSC_GAIN1V_H
 0x89

	)

275 
	#REG_TX_CSC_GAIN2V_L
 0x8A

	)

276 
	#REG_TX_CSC_GAIN2V_H
 0x8B

	)

277 
	#REG_TX_CSC_GAIN3V_L
 0x8C

	)

278 
	#REG_TX_CSC_GAIN3V_H
 0x8D

	)

280 
	#REG_TX_HVPﬁ
 0x90

	)

281 
	#REG_TX_HfPixñ
 0x91

	)

282 
	#REG_TX_HSSL
 0x95

	)

283 
	#REG_TX_HSEL
 0x96

	)

284 
	#REG_TX_HSH
 0x97

	)

285 
	#REG_TX_VSS1
 0xA0

	)

286 
	#REG_TX_VSE1
 0xA1

	)

287 
	#REG_TX_VSS2
 0xA2

	)

288 
	#REG_TX_VSE2
 0xA3

	)

292 
	#REG_TX_HDMI_MODE
 0xC0

	)

293 
	#B_TX_HDMI_MODE
 1

	)

294 
	#B_TX_DVI_MODE
 0

	)

295 
	#REG_TX_AV_MUTE
 0xC1

	)

296 
	#REG_TX_GCP
 0xC1

	)

297 
	#B_TX_CLR_AVMUTE
 0

	)

298 
	#B_TX_SET_AVMUTE
 1

	)

299 
	#B_TX_SETAVMUTE
 (1<<0)

	)

300 
	#B_TX_BLUE_SCR_MUTE
 (1<<1)

	)

301 
	#B_TX_NODEF_PHASE
 (1<<2)

	)

302 
	#B_TX_PHASE_RESYNC
 (1<<3)

	)

304 
	#O_TX_COLOR_DEPTH
 4

	)

305 
	#M_TX_COLOR_DEPTH
 7

	)

306 
	#B_TX_COLOR_DEPTH_MASK
 (
M_TX_COLOR_DEPTH
<<
O_TX_COLOR_DEPTH
)

	)

307 
	#B_TX_CD_NODEF
 0

	)

308 
	#B_TX_CD_24
 (4<<4)

	)

309 
	#B_TX_CD_30
 (5<<4)

	)

310 
	#B_TX_CD_36
 (6<<4)

	)

311 
	#B_TX_CD_48
 (7<<4)

	)

312 
	#REG_TX_PKT_GENERAL_CTRL
 0xC6

	)

314 
	#REG_TX_OESS_CYCLE
 0xC3

	)

320 
	#Swôch_HDMITX_B™k
(
pS¸n
, 
x
Ë
	`HDMITX_SëI2C_Byã
’S¸n, 0x0f,1, (x)&1)

	)

321 
	#HDMITX_OrReg_Byã
(
pS¸n
, 
ªg
,
‹mask
Ë
	`HDMITX_SëI2C_Byã
’S¸n,Ñeg,(‹mask),(‹mask))

	)

322 
	#HDMITX_AndReg_Byã
(
pS¸n
, 
ªg
,
™dmask
Ë
	`HDMITX_WrôeI2C_Byã
’S¸n,Ñeg,(
	`HDMITX_RódI2C_Byã
’S¸n,ÑegË& (™dmask)))

	)

327 
	s_HDMITXDEV_STRUCT
 {

329 
u8
 
	mI2C_DEV
 ;

330 
u8
 
	mI2C_ADDR
 ;

335 
u8
 
	mbI¡Ty≥
 ;

339 
u8
 
	mbI≈utVideoSig«lTy≥
 ;

343 
u8
 
	mbOuçutAudioMode
 ;

344 
u8
 
	mbAudioCh™√lSw≠
 ;

345 
u8
 
	mbAudioCh™√lE«bÀ
 ;

346 
u8
 
	mbAudFs
 ;

347 
	mTMDSClock
 ;

348 
	mRCLK
 ;

349 
u8
 
	mbAuthítiˇãd
:1 ;

350 
u8
 
	mbHDMIMode
: 1;

351 
u8
 
	mbI¡POL
:1 ;

352 
u8
 
	mbHPD
:1 ;

353 
u8
 
	mbSPDIF_OUT
;

354 
u8
 
	mTxEMEMSètus
:1 ;

355 } 
	tHDMITXDEV
 ;

357 
	e_mode_id
 {

358 
	mUNKNOWN_MODE
=0,

359 
	mCEA_640x480p60
,

360 
	mCEA_720x480p60
,

361 
	mCEA_1280x720p60
,

362 
	mCEA_1920x1080i60
,

363 
	mCEA_720x480i60
,

364 
	mCEA_720x240p60
,

365 
	mCEA_1440x480i60
,

366 
	mCEA_1440x240p60
,

367 
	mCEA_2880x480i60
,

368 
	mCEA_2880x240p60
,

369 
	mCEA_1440x480p60
,

370 
	mCEA_1920x1080p60
,

371 
	mCEA_720x576p50
,

372 
	mCEA_1280x720p50
,

373 
	mCEA_1920x1080i50
,

374 
	mCEA_720x576i50
,

375 
	mCEA_1440x576i50
,

376 
	mCEA_720x288p50
,

377 
	mCEA_1440x288p50
,

378 
	mCEA_2880x576i50
,

379 
	mCEA_2880x288p50
,

380 
	mCEA_1440x576p50
,

381 
	mCEA_1920x1080p50
,

382 
	mCEA_1920x1080p24
,

383 
	mCEA_1920x1080p25
,

384 
	mCEA_1920x1080p30
,

385 
	mVESA_640x350p85
,

386 
	mVESA_640x400p85
,

387 
	mVESA_720x400p85
,

388 
	mVESA_640x480p60
,

389 
	mVESA_640x480p72
,

390 
	mVESA_640x480p75
,

391 
	mVESA_640x480p85
,

392 
	mVESA_800x600p56
,

393 
	mVESA_800x600p60
,

394 
	mVESA_800x600p72
,

395 
	mVESA_800x600p75
,

396 
	mVESA_800X600p85
,

397 
	mVESA_840X480p60
,

398 
	mVESA_1024x768p60
,

399 
	mVESA_1024x768p70
,

400 
	mVESA_1024x768p75
,

401 
	mVESA_1024x768p85
,

402 
	mVESA_1152x864p75
,

403 
	mVESA_1280x768p60R
,

404 
	mVESA_1280x768p60
,

405 
	mVESA_1280x768p75
,

406 
	mVESA_1280x768p85
,

407 
	mVESA_1280x960p60
,

408 
	mVESA_1280x960p85
,

409 
	mVESA_1280x1024p60
,

410 
	mVESA_1280x1024p75
,

411 
	mVESA_1280X1024p85
,

412 
	mVESA_1360X768p60
,

413 
	mVESA_1400x768p60R
,

414 
	mVESA_1400x768p60
,

415 
	mVESA_1400x1050p75
,

416 
	mVESA_1400x1050p85
,

417 
	mVESA_1440x900p60R
,

418 
	mVESA_1440x900p60
,

419 
	mVESA_1440x900p75
,

420 
	mVESA_1440x900p85
,

421 
	mVESA_1600x1200p60
,

422 
	mVESA_1600x1200p65
,

423 
	mVESA_1600x1200p70
,

424 
	mVESA_1600x1200p75
,

425 
	mVESA_1600x1200p85
,

426 
	mVESA_1680x1050p60R
,

427 
	mVESA_1680x1050p60
,

428 
	mVESA_1680x1050p75
,

429 
	mVESA_1680x1050p85
,

430 
	mVESA_1792x1344p60
,

431 
	mVESA_1792x1344p75
,

432 
	mVESA_1856x1392p60
,

433 
	mVESA_1856x1392p75
,

434 
	mVESA_1920x1200p60R
,

435 
	mVESA_1920x1200p60
,

436 
	mVESA_1920x1200p75
,

437 
	mVESA_1920x1200p85
,

438 
	mVESA_1920x1440p60
,

439 
	mVESA_1920x1440p75
,

440 } 
	tMODE_ID
 ;

442 
	s°ru˘RegSëE¡ry
 {

443 
u8
 
	moff£t
 ;

444 
u8
 
	mövAndMask
 ;

445 
u8
 
	mOrMask
 ;

446 } 
	tRegSëE¡ry
;

449 
	#REG_TX_AUDIO_CTRL0
 0xE0

	)

450 
	#M_TX_AUD_SWL
 (3<<6)

	)

451 
	#M_TX_AUD_16BIT
 (0<<6)

	)

452 
	#M_TX_AUD_18BIT
 (1<<6)

	)

453 
	#M_TX_AUD_20BIT
 (2<<6)

	)

454 
	#M_TX_AUD_24BIT
 (3<<6)

	)

456 
	#B_TX_SPDIFTC
 (1<<5)

	)

458 
	#B_TX_AUD_SPDIF
 (1<<4)

	)

459 
	#B_TX_AUD_I2S
 (0<<4)

	)

460 
	#B_TX_AUD_EN_I2S3
 (1<<3)

	)

461 
	#B_TX_AUD_EN_I2S2
 (1<<2)

	)

462 
	#B_TX_AUD_EN_I2S1
 (1<<1)

	)

463 
	#B_TX_AUD_EN_I2S0
 (1<<0)

	)

464 
	#B_TX_AUD_EN_SPDIF
 1

	)

466 
	#REG_TX_AUDIO_CTRL1
 0xE1

	)

467 
	#B_TX_AUD_FULLPKT
 (1<<6)

	)

469 
	#B_TX_AUDFMT_STD_I2S
 (0<<0)

	)

470 
	#B_TX_AUDFMT_32BIT_I2S
 (1<<0)

	)

471 
	#B_TX_AUDFMT_LEFT_JUSTIFY
 (0<<1)

	)

472 
	#B_TX_AUDFMT_RIGHT_JUSTIFY
 (1<<1)

	)

473 
	#B_TX_AUDFMT_DELAY_1T_TO_WS
 (0<<2)

	)

474 
	#B_TX_AUDFMT_NO_DELAY_TO_WS
 (1<<2)

	)

475 
	#B_TX_AUDFMT_WS0_LEFT
 (0<<3)

	)

476 
	#B_TX_AUDFMT_WS0_RIGHT
 (1<<3)

	)

477 
	#B_TX_AUDFMT_MSB_SHIFT_FIRST
 (0<<4)

	)

478 
	#B_TX_AUDFMT_LSB_SHIFT_FIRST
 (1<<4)

	)

479 
	#B_TX_AUDFMT_RISE_EDGE_SAMPLE_WS
 (0<<5)

	)

480 
	#B_TX_AUDFMT_FALL_EDGE_SAMPLE_WS
 (1<<5)

	)

482 
	#REG_TX_AUDIO_FIFOMAP
 0xE2

	)

483 
	#O_TX_FIFO3SEL
 6

	)

484 
	#O_TX_FIFO2SEL
 4

	)

485 
	#O_TX_FIFO1SEL
 2

	)

486 
	#O_TX_FIFO0SEL
 0

	)

487 
	#B_TX_SELSRC3
 3

	)

488 
	#B_TX_SELSRC2
 2

	)

489 
	#B_TX_SELSRC1
 1

	)

490 
	#B_TX_SELSRC0
 0

	)

492 
	#REG_TX_AUDIO_CTRL3
 0xE3

	)

493 
	#B_TX_AUD_MULCH
 (1<<7)

	)

494 
	#B_TX_EN_ZERO_CTS
 (1<<6)

	)

495 
	#B_TX_CHSTSEL
 (1<<4)

	)

496 
	#B_TX_S3RLCHG
 (1<<3)

	)

497 
	#B_TX_S2RLCHG
 (1<<2)

	)

498 
	#B_TX_S1RLCHG
 (1<<1)

	)

499 
	#B_TX_S0RLCHG
 (1<<0)

	)

501 
	#REG_TX_AUD_SRCVALID_FLAT
 0xE4

	)

502 
	#B_TX_AUD_SPXFLAT_SRC3
 (1<<7)

	)

503 
	#B_TX_AUD_SPXFLAT_SRC2
 (1<<6)

	)

504 
	#B_TX_AUD_SPXFLAT_SRC1
 (1<<5)

	)

505 
	#B_TX_AUD_SPXFLAT_SRC0
 (1<<4)

	)

506 
	#B_TX_AUD_ERR2FLAT
 (1<<3)

	)

507 
	#B_TX_AUD_S3VALID
 (1<<2)

	)

508 
	#B_TX_AUD_S2VALID
 (1<<1)

	)

509 
	#B_TX_AUD_S1VALID
 (1<<0)

	)

511 
	#REG_TX_AUD_HDAUDIO
 0xE5

	)

512 
	#B_TX_HBR
 (1<<3)

	)

513 
	#B_TX_DSD
 (1<<1)

	)

519 
	#REGPktAudCTS0
 0x30

	)

520 
	#REGPktAudCTS1
 0x31

	)

521 
	#REGPktAudCTS2
 0x32

	)

522 
	#REGPktAudN0
 0x33

	)

523 
	#REGPktAudN1
 0x34

	)

524 
	#REGPktAudN2
 0x35

	)

525 
	#REGPktAudCTSC¡0
 0x35

	)

526 
	#REGPktAudCTSC¡1
 0x36

	)

527 
	#REGPktAudCTSC¡2
 0x37

	)

530 
	#REG_TX_AUDCHST_MODE
 0x91

	)

534 
	#REG_TX_AUDCHST_CAT
 0x92

	)

535 
	#REG_TX_AUDCHST_SRCNUM
 0x93

	)

536 
	#REG_TX_AUD0CHST_CHTNUM
 0x94

	)

538 
	#REG_TX_AUD1CHST_CHTNUM
 0x95

	)

540 
	#REG_TX_AUD2CHST_CHTNUM
 0x96

	)

542 
	#REG_TX_AUD3CHST_CHTNUM
 0x97

	)

544 
	#REG_TX_AUDCHST_CA_FS
 0x98

	)

546 
	#REG_TX_AUDCHST_OFS_WL
 0x99

	)

549 
	#REG_TX_PKT_SINGLE_CTRL
 0xC5

	)

550 
	#B_TX_SINGLE_PKT
 1

	)

551 
	#B_TX_BURST_PKT


	)

552 
	#B_TX_SW_CTS
 (1<<1)

	)

554 
	#REG_TX_NULL_CTRL
 0xC9

	)

555 
	#REG_TX_ACP_CTRL
 0xCA

	)

556 
	#REG_TX_ISRC1_CTRL
 0xCB

	)

557 
	#REG_TX_ISRC2_CTRL
 0xCC

	)

558 
	#REG_TX_AVI_INFOFRM_CTRL
 0xCD

	)

559 
	#REG_TX_AUD_INFOFRM_CTRL
 0xCE

	)

560 
	#REG_TX_SPD_INFOFRM_CTRL
 0xCF

	)

561 
	#REG_TX_MPG_INFOFRM_CTRL
 0xD0

	)

562 
	#B_TX_ENABLE_PKT
 1

	)

563 
	#B_TX_REPEAT_PKT
 (1<<1)

	)

565 
	#REG_TX_3D_INFO_CTRL
 0xD2

	)

571 
	#REG_TX_PKT_HB00
 0x38

	)

572 
	#REG_TX_PKT_HB01
 0x39

	)

573 
	#REG_TX_PKT_HB02
 0x3A

	)

575 
	#REG_TX_PKT_PB00
 0x3B

	)

576 
	#REG_TX_PKT_PB01
 0x3C

	)

577 
	#REG_TX_PKT_PB02
 0x3D

	)

578 
	#REG_TX_PKT_PB03
 0x3E

	)

579 
	#REG_TX_PKT_PB04
 0x3F

	)

580 
	#REG_TX_PKT_PB05
 0x40

	)

581 
	#REG_TX_PKT_PB06
 0x41

	)

582 
	#REG_TX_PKT_PB07
 0x42

	)

583 
	#REG_TX_PKT_PB08
 0x43

	)

584 
	#REG_TX_PKT_PB09
 0x44

	)

585 
	#REG_TX_PKT_PB10
 0x45

	)

586 
	#REG_TX_PKT_PB11
 0x46

	)

587 
	#REG_TX_PKT_PB12
 0x47

	)

588 
	#REG_TX_PKT_PB13
 0x48

	)

589 
	#REG_TX_PKT_PB14
 0x49

	)

590 
	#REG_TX_PKT_PB15
 0x4A

	)

591 
	#REG_TX_PKT_PB16
 0x4B

	)

592 
	#REG_TX_PKT_PB17
 0x4C

	)

593 
	#REG_TX_PKT_PB18
 0x4D

	)

594 
	#REG_TX_PKT_PB19
 0x4E

	)

595 
	#REG_TX_PKT_PB20
 0x4F

	)

596 
	#REG_TX_PKT_PB21
 0x50

	)

597 
	#REG_TX_PKT_PB22
 0x51

	)

598 
	#REG_TX_PKT_PB23
 0x52

	)

599 
	#REG_TX_PKT_PB24
 0x53

	)

600 
	#REG_TX_PKT_PB25
 0x54

	)

601 
	#REG_TX_PKT_PB26
 0x55

	)

602 
	#REG_TX_PKT_PB27
 0x56

	)

604 
	#REG_TX_AVIINFO_DB1
 0x58

	)

605 
	#REG_TX_AVIINFO_DB2
 0x59

	)

606 
	#REG_TX_AVIINFO_DB3
 0x5A

	)

607 
	#REG_TX_AVIINFO_DB4
 0x5B

	)

608 
	#REG_TX_AVIINFO_DB5
 0x5C

	)

609 
	#REG_TX_AVIINFO_DB6
 0x5E

	)

610 
	#REG_TX_AVIINFO_DB7
 0x5F

	)

611 
	#REG_TX_AVIINFO_DB8
 0x60

	)

612 
	#REG_TX_AVIINFO_DB9
 0x61

	)

613 
	#REG_TX_AVIINFO_DB10
 0x62

	)

614 
	#REG_TX_AVIINFO_DB11
 0x63

	)

615 
	#REG_TX_AVIINFO_DB12
 0x64

	)

616 
	#REG_TX_AVIINFO_DB13
 0x65

	)

617 
	#REG_TX_AVIINFO_SUM
 0x5D

	)

619 
	#REG_TX_PKT_AUDINFO_CC
 0x68

	)

620 
	#REG_TX_PKT_AUDINFO_SF
 0x69

	)

621 
	#REG_TX_PKT_AUDINFO_CA
 0x6B

	)

623 
	#REG_TX_PKT_AUDINFO_DM_LSV
 0x6C

	)

624 
	#REG_TX_PKT_AUDINFO_SUM
 0x6D

	)

627 
	#REG_TX_PKT_SPDINFO_SUM
 0x70

	)

628 
	#REG_TX_PKT_SPDINFO_PB1
 0x71

	)

629 
	#REG_TX_PKT_SPDINFO_PB2
 0x72

	)

630 
	#REG_TX_PKT_SPDINFO_PB3
 0x73

	)

631 
	#REG_TX_PKT_SPDINFO_PB4
 0x74

	)

632 
	#REG_TX_PKT_SPDINFO_PB5
 0x75

	)

633 
	#REG_TX_PKT_SPDINFO_PB6
 0x76

	)

634 
	#REG_TX_PKT_SPDINFO_PB7
 0x77

	)

635 
	#REG_TX_PKT_SPDINFO_PB8
 0x78

	)

636 
	#REG_TX_PKT_SPDINFO_PB9
 0x79

	)

637 
	#REG_TX_PKT_SPDINFO_PB10
 0x7A

	)

638 
	#REG_TX_PKT_SPDINFO_PB11
 0x7B

	)

639 
	#REG_TX_PKT_SPDINFO_PB12
 0x7C

	)

640 
	#REG_TX_PKT_SPDINFO_PB13
 0x7D

	)

641 
	#REG_TX_PKT_SPDINFO_PB14
 0x7E

	)

642 
	#REG_TX_PKT_SPDINFO_PB15
 0x7F

	)

643 
	#REG_TX_PKT_SPDINFO_PB16
 0x80

	)

644 
	#REG_TX_PKT_SPDINFO_PB17
 0x81

	)

645 
	#REG_TX_PKT_SPDINFO_PB18
 0x82

	)

646 
	#REG_TX_PKT_SPDINFO_PB19
 0x83

	)

647 
	#REG_TX_PKT_SPDINFO_PB20
 0x84

	)

648 
	#REG_TX_PKT_SPDINFO_PB21
 0x85

	)

649 
	#REG_TX_PKT_SPDINFO_PB22
 0x86

	)

650 
	#REG_TX_PKT_SPDINFO_PB23
 0x87

	)

651 
	#REG_TX_PKT_SPDINFO_PB24
 0x88

	)

652 
	#REG_TX_PKT_SPDINFO_PB25
 0x89

	)

654 
	#REG_TX_PKT_MPGINFO_FMT
 0x8A

	)

655 
	#B_TX_MPG_FR
 1

	)

656 
	#B_TX_MPG_MF_I
 (1<<1)

	)

657 
	#B_TX_MPG_MF_B
 (2<<1)

	)

658 
	#B_TX_MPG_MF_P
 (3<<1)

	)

659 
	#B_TX_MPG_MF_MASK
 (3<<1)

	)

660 
	#REG_TX_PKG_MPGINFO_DB0
 0x8B

	)

661 
	#REG_TX_PKG_MPGINFO_DB1
 0x8C

	)

662 
	#REG_TX_PKG_MPGINFO_DB2
 0x8D

	)

663 
	#REG_TX_PKG_MPGINFO_DB3
 0x8E

	)

664 
	#REG_TX_PKG_MPGINFO_SUM
 0x8F

	)

666 
	#Føme_Pˇkög
 0

	)

667 
	#T›_™d_BŸt⁄
 6

	)

668 
	#Side_by_Side
 8

	)

673 
	#hdmôx_ENABLE_NULL_PKT
(
pHWDE
Ë{ 
	`HDMITX_WrôeI2C_Byã
’HWDE, 
REG_TX_NULL_CTRL
,
B_TX_ENABLE_PKT
|
B_TX_REPEAT_PKT
); }

	)

674 
	#hdmôx_ENABLE_ACP_PKT
(
pHWDE
Ë{ 
	`HDMITX_WrôeI2C_Byã
’HWDE, 
REG_TX_ACP_CTRL
,
B_TX_ENABLE_PKT
|
B_TX_REPEAT_PKT
); }

	)

675 
	#hdmôx_ENABLE_ISRC1_PKT
(
pHWDE
Ë{ 
	`HDMITX_WrôeI2C_Byã
’HWDE, 
REG_TX_ISRC1_CTRL
,
B_TX_ENABLE_PKT
|
B_TX_REPEAT_PKT
); }

	)

676 
	#hdmôx_ENABLE_ISRC2_PKT
(
pHWDE
Ë{ 
	`HDMITX_WrôeI2C_Byã
’HWDE, 
REG_TX_ISRC2_CTRL
,
B_TX_ENABLE_PKT
|
B_TX_REPEAT_PKT
); }

	)

677 
	#hdmôx_ENABLE_AVI_INFOFRM_PKT
(
pHWDE
Ë{ 
	`HDMITX_WrôeI2C_Byã
’HWDE, 
REG_TX_AVI_INFOFRM_CTRL
,
B_TX_ENABLE_PKT
|
B_TX_REPEAT_PKT
); }

	)

678 
	#hdmôx_ENABLE_AUD_INFOFRM_PKT
(
pHWDE
Ë{ 
	`HDMITX_WrôeI2C_Byã
’HWDE, 
REG_TX_AUD_INFOFRM_CTRL
,
B_TX_ENABLE_PKT
|
B_TX_REPEAT_PKT
); }

	)

679 
	#hdmôx_ENABLE_SPD_INFOFRM_PKT
(
pHWDE
Ë{ 
	`HDMITX_WrôeI2C_Byã
’HWDE, 
REG_TX_SPD_INFOFRM_CTRL
,
B_TX_ENABLE_PKT
|
B_TX_REPEAT_PKT
); }

	)

680 
	#hdmôx_ENABLE_MPG_INFOFRM_PKT
(
pHWDE
Ë{ 
	`HDMITX_WrôeI2C_Byã
’HWDE, 
REG_TX_MPG_INFOFRM_CTRL
,
B_TX_ENABLE_PKT
|
B_TX_REPEAT_PKT
); }

	)

681 
	#hdmôx_ENABLE_GíîÆPuΩo£_PKT
(
pHWDE
Ë{ 
	`HDMITX_WrôeI2C_Byã
’HWDE, 
REG_TX_NULL_CTRL
,
B_TX_ENABLE_PKT
|
B_TX_REPEAT_PKT
); }

	)

682 
	#hdmôx_DISABLE_VSDB_PKT
(
pHWDE
Ë{ 
	`HDMITX_WrôeI2C_Byã
’HWDE, 
REG_TX_3D_INFO_CTRL
,0); }

	)

683 
	#hdmôx_DISABLE_NULL_PKT
(
pHWDE
Ë{ 
	`HDMITX_WrôeI2C_Byã
’HWDE, 
REG_TX_NULL_CTRL
,0); }

	)

684 
	#hdmôx_DISABLE_ACP_PKT
(
pHWDE
Ë{ 
	`HDMITX_WrôeI2C_Byã
’HWDE, 
REG_TX_ACP_CTRL
,0); }

	)

685 
	#hdmôx_DISABLE_ISRC1_PKT
(
pHWDE
Ë{ 
	`HDMITX_WrôeI2C_Byã
’HWDE, 
REG_TX_ISRC1_CTRL
,0); }

	)

686 
	#hdmôx_DISABLE_ISRC2_PKT
(
pHWDE
Ë{ 
	`HDMITX_WrôeI2C_Byã
’HWDE, 
REG_TX_ISRC2_CTRL
,0); }

	)

687 
	#hdmôx_DISABLE_AVI_INFOFRM_PKT
(
pHWDE
Ë{ 
	`HDMITX_WrôeI2C_Byã
’HWDE, 
REG_TX_AVI_INFOFRM_CTRL
,0); }

	)

688 
	#hdmôx_DISABLE_AUD_INFOFRM_PKT
(
pHWDE
Ë{ 
	`HDMITX_WrôeI2C_Byã
’HWDE, 
REG_TX_AUD_INFOFRM_CTRL
,0); }

	)

689 
	#hdmôx_DISABLE_SPD_INFOFRM_PKT
(
pHWDE
Ë{ 
	`HDMITX_WrôeI2C_Byã
’HWDE, 
REG_TX_SPD_INFOFRM_CTRL
,0); }

	)

690 
	#hdmôx_DISABLE_MPG_INFOFRM_PKT
(
pHWDE
Ë{ 
	`HDMITX_WrôeI2C_Byã
’HWDE, 
REG_TX_MPG_INFOFRM_CTRL
,0); }

	)

691 
	#hdmôx_DISABLE_GíîÆPuΩo£_PKT
(
pHWDE
Ë{ 
	`HDMITX_WrôeI2C_Byã
’HWDE, 
REG_TX_NULL_CTRL
,0); }

	)

698 
	mPCLK_LOW
 = 0 ,

699 
	mPCLK_MEDIUM
,

700 
	mPCLK_HIGH


701 } 
	tVIDEOPCLKLEVEL
 ;

706 
boﬁ
 
a°_hdmi_check
(
drm_devi˚
 *
dev
);

707 
a°_hdmi_öô
(
drm_devi˚
 *
dev
);

708 
a°_hdmi_dißbÀ
(
drm_devi˚
 *
dev
);

709 
boﬁ
 
a°_hdmi_ªad_edid
(
drm_devi˚
 *
dev
, 
u8
 *
pEDIDD©a
);

710 
a°_hdmi_£t_ouçut
(
drm_devi˚
 *
dev
);

	@ast_tables.h

24 #i‚de‡
AST_TABLES_H


25 
	#AST_TABLES_H


	)

28 
	#TextModeIndex
 0

	)

29 
	#EGAModeIndex
 1

	)

30 
	#VGAModeIndex
 2

	)

31 
	#HiCModeIndex
 3

	)

32 
	#TrueCModeIndex
 4

	)

34 
	#Ch¨x8DŸ
 0x00000001

	)

35 
	#HÆfDCLK
 0x00000002

	)

36 
	#DoubÀSˇnMode
 0x00000004

	)

37 
	#LöeCom∑ªOff
 0x00000008

	)

38 
	#HB‹dî
 0x00000020

	)

39 
	#VB‹dî
 0x00000010

	)

40 
	#WideS¸ìnMode
 0x00000100

	)

41 
	#NewModeInfo
 0x00000200

	)

42 
	#NHSync
 0x00000400

	)

43 
	#PHSync
 0x00000800

	)

44 
	#NVSync
 0x00001000

	)

45 
	#PVSync
 0x00002000

	)

46 
	#SyncPP
 (
PVSync
 | 
PHSync
)

	)

47 
	#SyncPN
 (
PVSync
 | 
NHSync
)

	)

48 
	#SyncNP
 (
NVSync
 | 
PHSync
)

	)

49 
	#SyncNN
 (
NVSync
 | 
NHSync
)

	)

50 
	#AST2500PªC©chCRT
 0x00004000

	)

53 
	#VCLK25_175
 0x00

	)

54 
	#VCLK28_322
 0x01

	)

55 
	#VCLK31_5
 0x02

	)

56 
	#VCLK36
 0x03

	)

57 
	#VCLK40
 0x04

	)

58 
	#VCLK49_5
 0x05

	)

59 
	#VCLK50
 0x06

	)

60 
	#VCLK56_25
 0x07

	)

61 
	#VCLK65
 0x08

	)

62 
	#VCLK75
 0x09

	)

63 
	#VCLK78_75
 0x0A

	)

64 
	#VCLK94_5
 0x0B

	)

65 
	#VCLK108
 0x0C

	)

66 
	#VCLK135
 0x0D

	)

67 
	#VCLK157_5
 0x0E

	)

68 
	#VCLK162
 0x0F

	)

70 
	#VCLK154
 0x10

	)

71 
	#VCLK83_5
 0x11

	)

72 
	#VCLK106_5
 0x12

	)

73 
	#VCLK146_25
 0x13

	)

74 
	#VCLK148_5
 0x14

	)

75 
	#VCLK71
 0x15

	)

76 
	#VCLK88_75
 0x16

	)

77 
	#VCLK119
 0x17

	)

78 
	#VCLK85_5
 0x18

	)

79 
	#VCLK97_75
 0x19

	)

80 
	#VCLK118_25
 0x1A

	)

82 
a°_vbios_d˛k_öfo
 
	gd˛k_èbÀ
[] = {

112 
a°_vbios_d˛k_öfo
 
	gd˛k_èbÀ_25MHz
[] = {

142 
a°_vbios_d˛k_öfo
 
	gd˛k_èbÀ_a°2500
[] = {

172 
a°_vbios_d˛k_öfo
 
	gd˛k_èbÀ_a°2500_25MHz
[] = {

202 
a°_vbios_°dèbÀ
 
	gvbios_°dèbÀ
[] = {

275 
a°_vbios_íhèbÀ
 
	gªs_640x480
[] = {

276 { 800, 640, 8, 96, 525, 480, 2, 2, 
VCLK25_175
,

277 (
SyncNN
 | 
HB‹dî
 | 
VB‹dî
 | 
Ch¨x8DŸ
), 60, 1, 0x2E },

278 { 832, 640, 16, 40, 520, 480, 1, 3, 
VCLK31_5
,

279 (
SyncNN
 | 
HB‹dî
 | 
VB‹dî
 | 
Ch¨x8DŸ
), 72, 2, 0x2E },

280 { 840, 640, 16, 64, 500, 480, 1, 3, 
VCLK31_5
,

281 (
SyncNN
 | 
Ch¨x8DŸ
) , 75, 3, 0x2E },

282 { 832, 640, 56, 56, 509, 480, 1, 3, 
VCLK36
,

283 (
SyncNN
 | 
Ch¨x8DŸ
) , 85, 4, 0x2E },

284 { 832, 640, 56, 56, 509, 480, 1, 3, 
VCLK36
,

285 (
SyncNN
 | 
Ch¨x8DŸ
) , 0xFF, 4, 0x2E },

288 
a°_vbios_íhèbÀ
 
	gªs_800x600
[] = {

289 {1024, 800, 24, 72, 625, 600, 1, 2, 
VCLK36
,

290 (
SyncPP
 | 
Ch¨x8DŸ
), 56, 1, 0x30 },

291 {1056, 800, 40, 128, 628, 600, 1, 4, 
VCLK40
,

292 (
SyncPP
 | 
Ch¨x8DŸ
), 60, 2, 0x30 },

293 {1040, 800, 56, 120, 666, 600, 37, 6, 
VCLK50
,

294 (
SyncPP
 | 
Ch¨x8DŸ
), 72, 3, 0x30 },

295 {1056, 800, 16, 80, 625, 600, 1, 3, 
VCLK49_5
,

296 (
SyncPP
 | 
Ch¨x8DŸ
), 75, 4, 0x30 },

297 {1048, 800, 32, 64, 631, 600, 1, 3, 
VCLK56_25
,

298 (
SyncPP
 | 
Ch¨x8DŸ
), 84, 5, 0x30 },

299 {1048, 800, 32, 64, 631, 600, 1, 3, 
VCLK56_25
,

300 (
SyncPP
 | 
Ch¨x8DŸ
), 0xFF, 5, 0x30 },

304 
a°_vbios_íhèbÀ
 
	gªs_1024x768
[] = {

305 {1344, 1024, 24, 136, 806, 768, 3, 6, 
VCLK65
,

306 (
SyncNN
 | 
Ch¨x8DŸ
), 60, 1, 0x31 },

307 {1328, 1024, 24, 136, 806, 768, 3, 6, 
VCLK75
,

308 (
SyncNN
 | 
Ch¨x8DŸ
), 70, 2, 0x31 },

309 {1312, 1024, 16, 96, 800, 768, 1, 3, 
VCLK78_75
,

310 (
SyncPP
 | 
Ch¨x8DŸ
), 75, 3, 0x31 },

311 {1376, 1024, 48, 96, 808, 768, 1, 3, 
VCLK94_5
,

312 (
SyncPP
 | 
Ch¨x8DŸ
), 84, 4, 0x31 },

313 {1376, 1024, 48, 96, 808, 768, 1, 3, 
VCLK94_5
,

314 (
SyncPP
 | 
Ch¨x8DŸ
), 0xFF, 4, 0x31 },

317 
a°_vbios_íhèbÀ
 
	gªs_1280x1024
[] = {

318 {1688, 1280, 48, 112, 1066, 1024, 1, 3, 
VCLK108
,

319 (
SyncPP
 | 
Ch¨x8DŸ
), 60, 1, 0x32 },

320 {1688, 1280, 16, 144, 1066, 1024, 1, 3, 
VCLK135
,

321 (
SyncPP
 | 
Ch¨x8DŸ
), 75, 2, 0x32 },

322 {1728, 1280, 64, 160, 1072, 1024, 1, 3, 
VCLK157_5
,

323 (
SyncPP
 | 
Ch¨x8DŸ
), 85, 3, 0x32 },

324 {1728, 1280, 64, 160, 1072, 1024, 1, 3, 
VCLK157_5
,

325 (
SyncPP
 | 
Ch¨x8DŸ
), 0xFF, 3, 0x32 },

328 
a°_vbios_íhèbÀ
 
	gªs_1600x1200
[] = {

329 {2160, 1600, 64, 192, 1250, 1200, 1, 3, 
VCLK162
,

330 (
SyncPP
 | 
Ch¨x8DŸ
), 60, 1, 0x33 },

331 {2160, 1600, 64, 192, 1250, 1200, 1, 3, 
VCLK162
,

332 (
SyncPP
 | 
Ch¨x8DŸ
), 0xFF, 1, 0x33 },

335 
a°_vbios_íhèbÀ
 
	gªs_1152x864
[] = {

336 {1600, 1152, 64, 128, 900, 864, 1, 3, 
VCLK108
,

337 (
SyncPP
 | 
Ch¨x8DŸ
 | 
NewModeInfo
), 75, 1, 0x3B },

338 {1600, 1152, 64, 128, 900, 864, 1, 3, 
VCLK108
,

339 (
SyncPP
 | 
Ch¨x8DŸ
 | 
NewModeInfo
), 0xFF, 1, 0x3B },

343 
a°_vbios_íhèbÀ
 
	gªs_1360x768
[] = {

344 {1792, 1360, 64,112, 795, 768, 3, 6, 
VCLK85_5
,

345 (
SyncPP
 | 
Ch¨x8DŸ
 | 
LöeCom∑ªOff
 | 
WideS¸ìnMode
 | 
NewModeInfo
 | 
AST2500PªC©chCRT
), 60, 1, 0x39 },

346 {1792, 1360, 64,112, 795, 768, 3, 6, 
VCLK85_5
,

347 (
SyncPP
 | 
Ch¨x8DŸ
 | 
LöeCom∑ªOff
 | 
WideS¸ìnMode
 | 
NewModeInfo
), 0xFF, 1, 0x39 },

350 
a°_vbios_íhèbÀ
 
	gªs_1600x900
[] = {

353 {1760, 1600, 48, 32, 926, 900, 3, 5, 
VCLK97_75
,

354 (
SyncNP
 | 
Ch¨x8DŸ
 | 
LöeCom∑ªOff
 | 
WideS¸ìnMode
 | 
NewModeInfo
 | 
AST2500PªC©chCRT
), 60, 1, 0x3A },

355 {2112, 1600, 88,168, 934, 900, 3, 5, 
VCLK118_25
,

356 (
SyncPN
 | 
Ch¨x8DŸ
 | 
LöeCom∑ªOff
 | 
WideS¸ìnMode
 | 
NewModeInfo
), 60, 2, 0x3A },

357 {2112, 1600, 88,168, 934, 900, 3, 5, 
VCLK118_25
,

358 (
SyncPN
 | 
Ch¨x8DŸ
 | 
LöeCom∑ªOff
 | 
WideS¸ìnMode
 | 
NewModeInfo
), 0xFF, 2, 0x3A },

361 
a°_vbios_íhèbÀ
 
	gªs_1920x1080
[] = {

362 {2200, 1920, 88, 44, 1125, 1080, 4, 5, 
VCLK148_5
,

363 (
SyncPP
 | 
Ch¨x8DŸ
 | 
LöeCom∑ªOff
 | 
WideS¸ìnMode
 | 
NewModeInfo
 | 
AST2500PªC©chCRT
), 60, 1, 0x38 },

364 {2200, 1920, 88, 44, 1125, 1080, 4, 5, 
VCLK148_5
,

365 (
SyncPP
 | 
Ch¨x8DŸ
 | 
LöeCom∑ªOff
 | 
WideS¸ìnMode
 | 
NewModeInfo
 | 
AST2500PªC©chCRT
), 0xFF, 1, 0x38 },

370 
a°_vbios_íhèbÀ
 
	gªs_1280x800
[] = {

371 {1440, 1280, 48, 32, 823, 800, 3, 6, 
VCLK71
,

372 (
SyncNP
 | 
Ch¨x8DŸ
 | 
LöeCom∑ªOff
 | 
WideS¸ìnMode
 | 
NewModeInfo
 | 
AST2500PªC©chCRT
), 60, 1, 0x35 },

373 {1680, 1280, 72,128, 831, 800, 3, 6, 
VCLK83_5
,

374 (
SyncPN
 | 
Ch¨x8DŸ
 | 
LöeCom∑ªOff
 | 
WideS¸ìnMode
 | 
NewModeInfo
), 60, 2, 0x35 },

375 {1680, 1280, 72,128, 831, 800, 3, 6, 
VCLK83_5
,

376 (
SyncPN
 | 
Ch¨x8DŸ
 | 
LöeCom∑ªOff
 | 
WideS¸ìnMode
 | 
NewModeInfo
), 0xFF, 2, 0x35 },

380 
a°_vbios_íhèbÀ
 
	gªs_1440x900
[] = {

381 {1600, 1440, 48, 32, 926, 900, 3, 6, 
VCLK88_75
,

382 (
SyncNP
 | 
Ch¨x8DŸ
 | 
LöeCom∑ªOff
 | 
WideS¸ìnMode
 | 
NewModeInfo
 | 
AST2500PªC©chCRT
), 60, 1, 0x36 },

383 {1904, 1440, 80,152, 934, 900, 3, 6, 
VCLK106_5
,

384 (
SyncPN
 | 
Ch¨x8DŸ
 | 
LöeCom∑ªOff
 | 
WideS¸ìnMode
 | 
NewModeInfo
), 60, 2, 0x36 },

385 {1904, 1440, 80,152, 934, 900, 3, 6, 
VCLK106_5
,

386 (
SyncPN
 | 
Ch¨x8DŸ
 | 
LöeCom∑ªOff
 | 
WideS¸ìnMode
 | 
NewModeInfo
), 0xFF, 2, 0x36 },

389 
a°_vbios_íhèbÀ
 
	gªs_1680x1050
[] = {

390 {1840, 1680, 48, 32, 1080, 1050, 3, 6, 
VCLK119
,

391 (
SyncNP
 | 
Ch¨x8DŸ
 | 
LöeCom∑ªOff
 | 
WideS¸ìnMode
 | 
NewModeInfo
 | 
AST2500PªC©chCRT
), 60, 1, 0x37 },

392 {2240, 1680,104,176, 1089, 1050, 3, 6, 
VCLK146_25
,

393 (
SyncPN
 | 
Ch¨x8DŸ
 | 
LöeCom∑ªOff
 | 
WideS¸ìnMode
 | 
NewModeInfo
), 60, 2, 0x37 },

394 {2240, 1680,104,176, 1089, 1050, 3, 6, 
VCLK146_25
,

395 (
SyncPN
 | 
Ch¨x8DŸ
 | 
LöeCom∑ªOff
 | 
WideS¸ìnMode
 | 
NewModeInfo
), 0xFF, 2, 0x37 },

398 
a°_vbios_íhèbÀ
 
	gªs_1920x1200
[] = {

399 {2080, 1920, 48, 32, 1235, 1200, 3, 6, 
VCLK154
,

400 (
SyncNP
 | 
Ch¨x8DŸ
 | 
LöeCom∑ªOff
 | 
WideS¸ìnMode
 | 
NewModeInfo
 | 
AST2500PªC©chCRT
), 60, 1, 0x34 },

401 {2080, 1920, 48, 32, 1235, 1200, 3, 6, 
VCLK154
,

402 (
SyncNP
 | 
Ch¨x8DŸ
 | 
LöeCom∑ªOff
 | 
WideS¸ìnMode
 | 
NewModeInfo
 | 
AST2500PªC©chCRT
), 0xFF, 1, 0x34 },

	@/usr/include/linux/pci_regs.h

23 #i‚de‡
LINUX_PCI_REGS_H


24 
	#LINUX_PCI_REGS_H


	)

31 
	#PCI_CFG_SPACE_SIZE
 256

	)

32 
	#PCI_CFG_SPACE_EXP_SIZE
 4096

	)

38 
	#PCI_STD_HEADER_SIZEOF
 64

	)

39 
	#PCI_VENDOR_ID
 0x00

	)

40 
	#PCI_DEVICE_ID
 0x02

	)

41 
	#PCI_COMMAND
 0x04

	)

42 
	#PCI_COMMAND_IO
 0x1

	)

43 
	#PCI_COMMAND_MEMORY
 0x2

	)

44 
	#PCI_COMMAND_MASTER
 0x4

	)

45 
	#PCI_COMMAND_SPECIAL
 0x8

	)

46 
	#PCI_COMMAND_INVALIDATE
 0x10

	)

47 
	#PCI_COMMAND_VGA_PALETTE
 0x20

	)

48 
	#PCI_COMMAND_PARITY
 0x40

	)

49 
	#PCI_COMMAND_WAIT
 0x80

	)

50 
	#PCI_COMMAND_SERR
 0x100

	)

51 
	#PCI_COMMAND_FAST_BACK
 0x200

	)

52 
	#PCI_COMMAND_INTX_DISABLE
 0x400

	)

54 
	#PCI_STATUS
 0x06

	)

55 
	#PCI_STATUS_INTERRUPT
 0x08

	)

56 
	#PCI_STATUS_CAP_LIST
 0x10

	)

57 
	#PCI_STATUS_66MHZ
 0x20

	)

58 
	#PCI_STATUS_UDF
 0x40

	)

59 
	#PCI_STATUS_FAST_BACK
 0x80

	)

60 
	#PCI_STATUS_PARITY
 0x100

	)

61 
	#PCI_STATUS_DEVSEL_MASK
 0x600

	)

62 
	#PCI_STATUS_DEVSEL_FAST
 0x000

	)

63 
	#PCI_STATUS_DEVSEL_MEDIUM
 0x200

	)

64 
	#PCI_STATUS_DEVSEL_SLOW
 0x400

	)

65 
	#PCI_STATUS_SIG_TARGET_ABORT
 0x800

	)

66 
	#PCI_STATUS_REC_TARGET_ABORT
 0x1000

	)

67 
	#PCI_STATUS_REC_MASTER_ABORT
 0x2000

	)

68 
	#PCI_STATUS_SIG_SYSTEM_ERROR
 0x4000

	)

69 
	#PCI_STATUS_DETECTED_PARITY
 0x8000

	)

71 
	#PCI_CLASS_REVISION
 0x08

	)

72 
	#PCI_REVISION_ID
 0x08

	)

73 
	#PCI_CLASS_PROG
 0x09

	)

74 
	#PCI_CLASS_DEVICE
 0x0®

	)

76 
	#PCI_CACHE_LINE_SIZE
 0x0¯

	)

77 
	#PCI_LATENCY_TIMER
 0x0d

	)

78 
	#PCI_HEADER_TYPE
 0x0ê

	)

79 
	#PCI_HEADER_TYPE_NORMAL
 0

	)

80 
	#PCI_HEADER_TYPE_BRIDGE
 1

	)

81 
	#PCI_HEADER_TYPE_CARDBUS
 2

	)

83 
	#PCI_BIST
 0x0‡

	)

84 
	#PCI_BIST_CODE_MASK
 0x0‡

	)

85 
	#PCI_BIST_START
 0x40

	)

86 
	#PCI_BIST_CAPABLE
 0x80

	)

94 
	#PCI_BASE_ADDRESS_0
 0x10

	)

95 
	#PCI_BASE_ADDRESS_1
 0x14

	)

96 
	#PCI_BASE_ADDRESS_2
 0x18

	)

97 
	#PCI_BASE_ADDRESS_3
 0x1¯

	)

98 
	#PCI_BASE_ADDRESS_4
 0x20

	)

99 
	#PCI_BASE_ADDRESS_5
 0x24

	)

100 
	#PCI_BASE_ADDRESS_SPACE
 0x01

	)

101 
	#PCI_BASE_ADDRESS_SPACE_IO
 0x01

	)

102 
	#PCI_BASE_ADDRESS_SPACE_MEMORY
 0x00

	)

103 
	#PCI_BASE_ADDRESS_MEM_TYPE_MASK
 0x06

	)

104 
	#PCI_BASE_ADDRESS_MEM_TYPE_32
 0x00

	)

105 
	#PCI_BASE_ADDRESS_MEM_TYPE_1M
 0x02

	)

106 
	#PCI_BASE_ADDRESS_MEM_TYPE_64
 0x04

	)

107 
	#PCI_BASE_ADDRESS_MEM_PREFETCH
 0x08

	)

108 
	#PCI_BASE_ADDRESS_MEM_MASK
 (~0x0fUL)

	)

109 
	#PCI_BASE_ADDRESS_IO_MASK
 (~0x03UL)

	)

113 
	#PCI_CARDBUS_CIS
 0x28

	)

114 
	#PCI_SUBSYSTEM_VENDOR_ID
 0x2c

	)

115 
	#PCI_SUBSYSTEM_ID
 0x2e

	)

116 
	#PCI_ROM_ADDRESS
 0x30

	)

117 
	#PCI_ROM_ADDRESS_ENABLE
 0x01

	)

118 
	#PCI_ROM_ADDRESS_MASK
 (~0x7ffU)

	)

120 
	#PCI_CAPABILITY_LIST
 0x34

	)

123 
	#PCI_INTERRUPT_LINE
 0x3¯

	)

124 
	#PCI_INTERRUPT_PIN
 0x3d

	)

125 
	#PCI_MIN_GNT
 0x3ê

	)

126 
	#PCI_MAX_LAT
 0x3‡

	)

129 
	#PCI_PRIMARY_BUS
 0x18

	)

130 
	#PCI_SECONDARY_BUS
 0x19

	)

131 
	#PCI_SUBORDINATE_BUS
 0x1®

	)

132 
	#PCI_SEC_LATENCY_TIMER
 0x1b

	)

133 
	#PCI_IO_BASE
 0x1¯

	)

134 
	#PCI_IO_LIMIT
 0x1d

	)

135 
	#PCI_IO_RANGE_TYPE_MASK
 0x0fUL

	)

136 
	#PCI_IO_RANGE_TYPE_16
 0x00

	)

137 
	#PCI_IO_RANGE_TYPE_32
 0x01

	)

138 
	#PCI_IO_RANGE_MASK
 (~0x0fULË

	)

139 
	#PCI_IO_1K_RANGE_MASK
 (~0x03ULË

	)

140 
	#PCI_SEC_STATUS
 0x1ê

	)

141 
	#PCI_MEMORY_BASE
 0x20

	)

142 
	#PCI_MEMORY_LIMIT
 0x22

	)

143 
	#PCI_MEMORY_RANGE_TYPE_MASK
 0x0fUL

	)

144 
	#PCI_MEMORY_RANGE_MASK
 (~0x0fUL)

	)

145 
	#PCI_PREF_MEMORY_BASE
 0x24

	)

146 
	#PCI_PREF_MEMORY_LIMIT
 0x26

	)

147 
	#PCI_PREF_RANGE_TYPE_MASK
 0x0fUL

	)

148 
	#PCI_PREF_RANGE_TYPE_32
 0x00

	)

149 
	#PCI_PREF_RANGE_TYPE_64
 0x01

	)

150 
	#PCI_PREF_RANGE_MASK
 (~0x0fUL)

	)

151 
	#PCI_PREF_BASE_UPPER32
 0x28

	)

152 
	#PCI_PREF_LIMIT_UPPER32
 0x2c

	)

153 
	#PCI_IO_BASE_UPPER16
 0x30

	)

154 
	#PCI_IO_LIMIT_UPPER16
 0x32

	)

157 
	#PCI_ROM_ADDRESS1
 0x38

	)

159 
	#PCI_BRIDGE_CONTROL
 0x3e

	)

160 
	#PCI_BRIDGE_CTL_PARITY
 0x01

	)

161 
	#PCI_BRIDGE_CTL_SERR
 0x02

	)

162 
	#PCI_BRIDGE_CTL_ISA
 0x04

	)

163 
	#PCI_BRIDGE_CTL_VGA
 0x08

	)

164 
	#PCI_BRIDGE_CTL_MASTER_ABORT
 0x20

	)

165 
	#PCI_BRIDGE_CTL_BUS_RESET
 0x40

	)

166 
	#PCI_BRIDGE_CTL_FAST_BACK
 0x80

	)

169 
	#PCI_CB_CAPABILITY_LIST
 0x14

	)

171 
	#PCI_CB_SEC_STATUS
 0x16

	)

172 
	#PCI_CB_PRIMARY_BUS
 0x18

	)

173 
	#PCI_CB_CARD_BUS
 0x19

	)

174 
	#PCI_CB_SUBORDINATE_BUS
 0x1®

	)

175 
	#PCI_CB_LATENCY_TIMER
 0x1b

	)

176 
	#PCI_CB_MEMORY_BASE_0
 0x1c

	)

177 
	#PCI_CB_MEMORY_LIMIT_0
 0x20

	)

178 
	#PCI_CB_MEMORY_BASE_1
 0x24

	)

179 
	#PCI_CB_MEMORY_LIMIT_1
 0x28

	)

180 
	#PCI_CB_IO_BASE_0
 0x2c

	)

181 
	#PCI_CB_IO_BASE_0_HI
 0x2e

	)

182 
	#PCI_CB_IO_LIMIT_0
 0x30

	)

183 
	#PCI_CB_IO_LIMIT_0_HI
 0x32

	)

184 
	#PCI_CB_IO_BASE_1
 0x34

	)

185 
	#PCI_CB_IO_BASE_1_HI
 0x36

	)

186 
	#PCI_CB_IO_LIMIT_1
 0x38

	)

187 
	#PCI_CB_IO_LIMIT_1_HI
 0x3a

	)

188 
	#PCI_CB_IO_RANGE_MASK
 (~0x03UL)

	)

190 
	#PCI_CB_BRIDGE_CONTROL
 0x3e

	)

191 
	#PCI_CB_BRIDGE_CTL_PARITY
 0x01

	)

192 
	#PCI_CB_BRIDGE_CTL_SERR
 0x02

	)

193 
	#PCI_CB_BRIDGE_CTL_ISA
 0x04

	)

194 
	#PCI_CB_BRIDGE_CTL_VGA
 0x08

	)

195 
	#PCI_CB_BRIDGE_CTL_MASTER_ABORT
 0x20

	)

196 
	#PCI_CB_BRIDGE_CTL_CB_RESET
 0x40

	)

197 
	#PCI_CB_BRIDGE_CTL_16BIT_INT
 0x80

	)

198 
	#PCI_CB_BRIDGE_CTL_PREFETCH_MEM0
 0x100

	)

199 
	#PCI_CB_BRIDGE_CTL_PREFETCH_MEM1
 0x200

	)

200 
	#PCI_CB_BRIDGE_CTL_POST_WRITES
 0x400

	)

201 
	#PCI_CB_SUBSYSTEM_VENDOR_ID
 0x40

	)

202 
	#PCI_CB_SUBSYSTEM_ID
 0x42

	)

203 
	#PCI_CB_LEGACY_MODE_BASE
 0x44

	)

208 
	#PCI_CAP_LIST_ID
 0

	)

209 
	#PCI_CAP_ID_PM
 0x01

	)

210 
	#PCI_CAP_ID_AGP
 0x02

	)

211 
	#PCI_CAP_ID_VPD
 0x03

	)

212 
	#PCI_CAP_ID_SLOTID
 0x04

	)

213 
	#PCI_CAP_ID_MSI
 0x05

	)

214 
	#PCI_CAP_ID_CHSWP
 0x06

	)

215 
	#PCI_CAP_ID_PCIX
 0x07

	)

216 
	#PCI_CAP_ID_HT
 0x08

	)

217 
	#PCI_CAP_ID_VNDR
 0x09

	)

218 
	#PCI_CAP_ID_DBG
 0x0A

	)

219 
	#PCI_CAP_ID_CCRC
 0x0B

	)

220 
	#PCI_CAP_ID_SHPC
 0x0C

	)

221 
	#PCI_CAP_ID_SSVID
 0x0D

	)

222 
	#PCI_CAP_ID_AGP3
 0x0E

	)

223 
	#PCI_CAP_ID_SECDEV
 0x0F

	)

224 
	#PCI_CAP_ID_EXP
 0x10

	)

225 
	#PCI_CAP_ID_MSIX
 0x11

	)

226 
	#PCI_CAP_ID_SATA
 0x12

	)

227 
	#PCI_CAP_ID_AF
 0x13

	)

228 
	#PCI_CAP_ID_EA
 0x14

	)

229 
	#PCI_CAP_ID_MAX
 
PCI_CAP_ID_EA


	)

230 
	#PCI_CAP_LIST_NEXT
 1

	)

231 
	#PCI_CAP_FLAGS
 2

	)

232 
	#PCI_CAP_SIZEOF
 4

	)

236 
	#PCI_PM_PMC
 2

	)

237 
	#PCI_PM_CAP_VER_MASK
 0x0007

	)

238 
	#PCI_PM_CAP_PME_CLOCK
 0x0008

	)

239 
	#PCI_PM_CAP_RESERVED
 0x0010

	)

240 
	#PCI_PM_CAP_DSI
 0x0020

	)

241 
	#PCI_PM_CAP_AUX_POWER
 0x01C0

	)

242 
	#PCI_PM_CAP_D1
 0x0200

	)

243 
	#PCI_PM_CAP_D2
 0x0400

	)

244 
	#PCI_PM_CAP_PME
 0x0800

	)

245 
	#PCI_PM_CAP_PME_MASK
 0xF800

	)

246 
	#PCI_PM_CAP_PME_D0
 0x0800

	)

247 
	#PCI_PM_CAP_PME_D1
 0x1000

	)

248 
	#PCI_PM_CAP_PME_D2
 0x2000

	)

249 
	#PCI_PM_CAP_PME_D3
 0x4000

	)

250 
	#PCI_PM_CAP_PME_D3cﬁd
 0x8000

	)

251 
	#PCI_PM_CAP_PME_SHIFT
 11

	)

252 
	#PCI_PM_CTRL
 4

	)

253 
	#PCI_PM_CTRL_STATE_MASK
 0x0003

	)

254 
	#PCI_PM_CTRL_NO_SOFT_RESET
 0x0008

	)

255 
	#PCI_PM_CTRL_PME_ENABLE
 0x0100

	)

256 
	#PCI_PM_CTRL_DATA_SEL_MASK
 0x1e00

	)

257 
	#PCI_PM_CTRL_DATA_SCALE_MASK
 0x6000

	)

258 
	#PCI_PM_CTRL_PME_STATUS
 0x8000

	)

259 
	#PCI_PM_PPB_EXTENSIONS
 6

	)

260 
	#PCI_PM_PPB_B2_B3
 0x40

	)

261 
	#PCI_PM_BPCC_ENABLE
 0x80

	)

262 
	#PCI_PM_DATA_REGISTER
 7

	)

263 
	#PCI_PM_SIZEOF
 8

	)

267 
	#PCI_AGP_VERSION
 2

	)

268 
	#PCI_AGP_RFU
 3

	)

269 
	#PCI_AGP_STATUS
 4

	)

270 
	#PCI_AGP_STATUS_RQ_MASK
 0xff000000

	)

271 
	#PCI_AGP_STATUS_SBA
 0x0200

	)

272 
	#PCI_AGP_STATUS_64BIT
 0x0020

	)

273 
	#PCI_AGP_STATUS_FW
 0x0010

	)

274 
	#PCI_AGP_STATUS_RATE4
 0x0004

	)

275 
	#PCI_AGP_STATUS_RATE2
 0x0002

	)

276 
	#PCI_AGP_STATUS_RATE1
 0x0001

	)

277 
	#PCI_AGP_COMMAND
 8

	)

278 
	#PCI_AGP_COMMAND_RQ_MASK
 0xff000000

	)

279 
	#PCI_AGP_COMMAND_SBA
 0x0200

	)

280 
	#PCI_AGP_COMMAND_AGP
 0x0100

	)

281 
	#PCI_AGP_COMMAND_64BIT
 0x0020

	)

282 
	#PCI_AGP_COMMAND_FW
 0x0010

	)

283 
	#PCI_AGP_COMMAND_RATE4
 0x0004

	)

284 
	#PCI_AGP_COMMAND_RATE2
 0x0002

	)

285 
	#PCI_AGP_COMMAND_RATE1
 0x0001

	)

286 
	#PCI_AGP_SIZEOF
 12

	)

290 
	#PCI_VPD_ADDR
 2

	)

291 
	#PCI_VPD_ADDR_MASK
 0x7ff‡

	)

292 
	#PCI_VPD_ADDR_F
 0x8000

	)

293 
	#PCI_VPD_DATA
 4

	)

294 
	#PCI_CAP_VPD_SIZEOF
 8

	)

298 
	#PCI_SID_ESR
 2

	)

299 
	#PCI_SID_ESR_NSLOTS
 0x1‡

	)

300 
	#PCI_SID_ESR_FIC
 0x20

	)

301 
	#PCI_SID_CHASSIS_NR
 3

	)

305 
	#PCI_MSI_FLAGS
 2

	)

306 
	#PCI_MSI_FLAGS_ENABLE
 0x0001

	)

307 
	#PCI_MSI_FLAGS_QMASK
 0x000ê

	)

308 
	#PCI_MSI_FLAGS_QSIZE
 0x0070

	)

309 
	#PCI_MSI_FLAGS_64BIT
 0x0080

	)

310 
	#PCI_MSI_FLAGS_MASKBIT
 0x0100

	)

311 
	#PCI_MSI_RFU
 3

	)

312 
	#PCI_MSI_ADDRESS_LO
 4

	)

313 
	#PCI_MSI_ADDRESS_HI
 8

	)

314 
	#PCI_MSI_DATA_32
 8

	)

315 
	#PCI_MSI_MASK_32
 12

	)

316 
	#PCI_MSI_PENDING_32
 16

	)

317 
	#PCI_MSI_DATA_64
 12

	)

318 
	#PCI_MSI_MASK_64
 16

	)

319 
	#PCI_MSI_PENDING_64
 20

	)

322 
	#PCI_MSIX_FLAGS
 2

	)

323 
	#PCI_MSIX_FLAGS_QSIZE
 0x07FF

	)

324 
	#PCI_MSIX_FLAGS_MASKALL
 0x4000

	)

325 
	#PCI_MSIX_FLAGS_ENABLE
 0x8000

	)

326 
	#PCI_MSIX_TABLE
 4

	)

327 
	#PCI_MSIX_TABLE_BIR
 0x00000007

	)

328 
	#PCI_MSIX_TABLE_OFFSET
 0xfffffff8

	)

329 
	#PCI_MSIX_PBA
 8

	)

330 
	#PCI_MSIX_PBA_BIR
 0x00000007

	)

331 
	#PCI_MSIX_PBA_OFFSET
 0xfffffff8

	)

332 
	#PCI_MSIX_FLAGS_BIRMASK
 
PCI_MSIX_PBA_BIR


	)

333 
	#PCI_CAP_MSIX_SIZEOF
 12

	)

336 
	#PCI_MSIX_ENTRY_SIZE
 16

	)

337 
	#PCI_MSIX_ENTRY_LOWER_ADDR
 0

	)

338 
	#PCI_MSIX_ENTRY_UPPER_ADDR
 4

	)

339 
	#PCI_MSIX_ENTRY_DATA
 8

	)

340 
	#PCI_MSIX_ENTRY_VECTOR_CTRL
 12

	)

341 
	#PCI_MSIX_ENTRY_CTRL_MASKBIT
 1

	)

345 
	#PCI_CHSWP_CSR
 2

	)

346 
	#PCI_CHSWP_DHA
 0x01

	)

347 
	#PCI_CHSWP_EIM
 0x02

	)

348 
	#PCI_CHSWP_PIE
 0x04

	)

349 
	#PCI_CHSWP_LOO
 0x08

	)

350 
	#PCI_CHSWP_PI
 0x30

	)

351 
	#PCI_CHSWP_EXT
 0x40

	)

352 
	#PCI_CHSWP_INS
 0x80

	)

356 
	#PCI_AF_LENGTH
 2

	)

357 
	#PCI_AF_CAP
 3

	)

358 
	#PCI_AF_CAP_TP
 0x01

	)

359 
	#PCI_AF_CAP_FLR
 0x02

	)

360 
	#PCI_AF_CTRL
 4

	)

361 
	#PCI_AF_CTRL_FLR
 0x01

	)

362 
	#PCI_AF_STATUS
 5

	)

363 
	#PCI_AF_STATUS_TP
 0x01

	)

364 
	#PCI_CAP_AF_SIZEOF
 6

	)

368 
	#PCI_EA_NUM_ENT
 2

	)

369 
	#PCI_EA_NUM_ENT_MASK
 0x3‡

	)

370 
	#PCI_EA_FIRST_ENT
 4

	)

371 
	#PCI_EA_FIRST_ENT_BRIDGE
 8

	)

372 
	#PCI_EA_ES
 0x00000007

	)

373 
	#PCI_EA_BEI
 0x000000f0

	)

375 
	#PCI_EA_BEI_BAR0
 0

	)

376 
	#PCI_EA_BEI_BAR5
 5

	)

377 
	#PCI_EA_BEI_BRIDGE
 6

	)

378 
	#PCI_EA_BEI_ENI
 7

	)

379 
	#PCI_EA_BEI_ROM
 8

	)

381 
	#PCI_EA_BEI_VF_BAR0
 9

	)

382 
	#PCI_EA_BEI_VF_BAR5
 14

	)

383 
	#PCI_EA_BEI_RESERVED
 15

	)

384 
	#PCI_EA_PP
 0x0000ff00

	)

385 
	#PCI_EA_SP
 0x00ff0000

	)

386 
	#PCI_EA_P_MEM
 0x00

	)

387 
	#PCI_EA_P_MEM_PREFETCH
 0x01

	)

388 
	#PCI_EA_P_IO
 0x02

	)

389 
	#PCI_EA_P_VF_MEM_PREFETCH
 0x03

	)

390 
	#PCI_EA_P_VF_MEM
 0x04

	)

391 
	#PCI_EA_P_BRIDGE_MEM
 0x05

	)

392 
	#PCI_EA_P_BRIDGE_MEM_PREFETCH
 0x06

	)

393 
	#PCI_EA_P_BRIDGE_IO
 0x07

	)

395 
	#PCI_EA_P_MEM_RESERVED
 0xfd

	)

396 
	#PCI_EA_P_IO_RESERVED
 0x„

	)

397 
	#PCI_EA_P_UNAVAILABLE
 0xf‡

	)

398 
	#PCI_EA_WRITABLE
 0x40000000

	)

399 
	#PCI_EA_ENABLE
 0x80000000

	)

400 
	#PCI_EA_BASE
 4

	)

401 
	#PCI_EA_MAX_OFFSET
 8

	)

403 
	#PCI_EA_IS_64
 0x00000002

	)

404 
	#PCI_EA_FIELD_MASK
 0xfffffff¯

	)

408 
	#PCI_X_CMD
 2

	)

409 
	#PCI_X_CMD_DPERR_E
 0x0001

	)

410 
	#PCI_X_CMD_ERO
 0x0002

	)

411 
	#PCI_X_CMD_READ_512
 0x0000

	)

412 
	#PCI_X_CMD_READ_1K
 0x0004

	)

413 
	#PCI_X_CMD_READ_2K
 0x0008

	)

414 
	#PCI_X_CMD_READ_4K
 0x000¯

	)

415 
	#PCI_X_CMD_MAX_READ
 0x000¯

	)

417 
	#PCI_X_CMD_SPLIT_1
 0x0000

	)

418 
	#PCI_X_CMD_SPLIT_2
 0x0010

	)

419 
	#PCI_X_CMD_SPLIT_3
 0x0020

	)

420 
	#PCI_X_CMD_SPLIT_4
 0x0030

	)

421 
	#PCI_X_CMD_SPLIT_8
 0x0040

	)

422 
	#PCI_X_CMD_SPLIT_12
 0x0050

	)

423 
	#PCI_X_CMD_SPLIT_16
 0x0060

	)

424 
	#PCI_X_CMD_SPLIT_32
 0x0070

	)

425 
	#PCI_X_CMD_MAX_SPLIT
 0x0070

	)

426 
	#PCI_X_CMD_VERSION
(
x
Ë(((xË>> 12Ë& 3Ë

	)

427 
	#PCI_X_STATUS
 4

	)

428 
	#PCI_X_STATUS_DEVFN
 0x000000f‡

	)

429 
	#PCI_X_STATUS_BUS
 0x0000ff00

	)

430 
	#PCI_X_STATUS_64BIT
 0x00010000

	)

431 
	#PCI_X_STATUS_133MHZ
 0x00020000

	)

432 
	#PCI_X_STATUS_SPL_DISC
 0x00040000

	)

433 
	#PCI_X_STATUS_UNX_SPL
 0x00080000

	)

434 
	#PCI_X_STATUS_COMPLEX
 0x00100000

	)

435 
	#PCI_X_STATUS_MAX_READ
 0x00600000

	)

436 
	#PCI_X_STATUS_MAX_SPLIT
 0x03800000

	)

437 
	#PCI_X_STATUS_MAX_CUM
 0x1c000000

	)

438 
	#PCI_X_STATUS_SPL_ERR
 0x20000000

	)

439 
	#PCI_X_STATUS_266MHZ
 0x40000000

	)

440 
	#PCI_X_STATUS_533MHZ
 0x80000000

	)

441 
	#PCI_X_ECC_CSR
 8

	)

442 
	#PCI_CAP_PCIX_SIZEOF_V0
 8

	)

443 
	#PCI_CAP_PCIX_SIZEOF_V1
 24

	)

444 
	#PCI_CAP_PCIX_SIZEOF_V2
 
PCI_CAP_PCIX_SIZEOF_V1


	)

448 
	#PCI_X_BRIDGE_SSTATUS
 2

	)

449 
	#PCI_X_SSTATUS_64BIT
 0x0001

	)

450 
	#PCI_X_SSTATUS_133MHZ
 0x0002

	)

451 
	#PCI_X_SSTATUS_FREQ
 0x03c0

	)

452 
	#PCI_X_SSTATUS_VERS
 0x3000

	)

453 
	#PCI_X_SSTATUS_V1
 0x1000

	)

454 
	#PCI_X_SSTATUS_V2
 0x2000

	)

455 
	#PCI_X_SSTATUS_266MHZ
 0x4000

	)

456 
	#PCI_X_SSTATUS_533MHZ
 0x8000

	)

457 
	#PCI_X_BRIDGE_STATUS
 4

	)

461 
	#PCI_SSVID_VENDOR_ID
 4

	)

462 
	#PCI_SSVID_DEVICE_ID
 6

	)

466 
	#PCI_EXP_FLAGS
 2

	)

467 
	#PCI_EXP_FLAGS_VERS
 0x000‡

	)

468 
	#PCI_EXP_FLAGS_TYPE
 0x00f0

	)

469 
	#PCI_EXP_TYPE_ENDPOINT
 0x0

	)

470 
	#PCI_EXP_TYPE_LEG_END
 0x1

	)

471 
	#PCI_EXP_TYPE_ROOT_PORT
 0x4

	)

472 
	#PCI_EXP_TYPE_UPSTREAM
 0x5

	)

473 
	#PCI_EXP_TYPE_DOWNSTREAM
 0x6

	)

474 
	#PCI_EXP_TYPE_PCI_BRIDGE
 0x7

	)

475 
	#PCI_EXP_TYPE_PCIE_BRIDGE
 0x8

	)

476 
	#PCI_EXP_TYPE_RC_END
 0x9

	)

477 
	#PCI_EXP_TYPE_RC_EC
 0x®

	)

478 
	#PCI_EXP_FLAGS_SLOT
 0x0100

	)

479 
	#PCI_EXP_FLAGS_IRQ
 0x3e00

	)

480 
	#PCI_EXP_DEVCAP
 4

	)

481 
	#PCI_EXP_DEVCAP_PAYLOAD
 0x00000007

	)

482 
	#PCI_EXP_DEVCAP_PHANTOM
 0x00000018

	)

483 
	#PCI_EXP_DEVCAP_EXT_TAG
 0x00000020

	)

484 
	#PCI_EXP_DEVCAP_L0S
 0x000001c0

	)

485 
	#PCI_EXP_DEVCAP_L1
 0x00000e00

	)

486 
	#PCI_EXP_DEVCAP_ATN_BUT
 0x00001000

	)

487 
	#PCI_EXP_DEVCAP_ATN_IND
 0x00002000

	)

488 
	#PCI_EXP_DEVCAP_PWR_IND
 0x00004000

	)

489 
	#PCI_EXP_DEVCAP_RBER
 0x00008000

	)

490 
	#PCI_EXP_DEVCAP_PWR_VAL
 0x03fc0000

	)

491 
	#PCI_EXP_DEVCAP_PWR_SCL
 0x0c000000

	)

492 
	#PCI_EXP_DEVCAP_FLR
 0x10000000

	)

493 
	#PCI_EXP_DEVCTL
 8

	)

494 
	#PCI_EXP_DEVCTL_CERE
 0x0001

	)

495 
	#PCI_EXP_DEVCTL_NFERE
 0x0002

	)

496 
	#PCI_EXP_DEVCTL_FERE
 0x0004

	)

497 
	#PCI_EXP_DEVCTL_URRE
 0x0008

	)

498 
	#PCI_EXP_DEVCTL_RELAX_EN
 0x0010

	)

499 
	#PCI_EXP_DEVCTL_PAYLOAD
 0x00e0

	)

500 
	#PCI_EXP_DEVCTL_EXT_TAG
 0x0100

	)

501 
	#PCI_EXP_DEVCTL_PHANTOM
 0x0200

	)

502 
	#PCI_EXP_DEVCTL_AUX_PME
 0x0400

	)

503 
	#PCI_EXP_DEVCTL_NOSNOOP_EN
 0x0800

	)

504 
	#PCI_EXP_DEVCTL_READRQ
 0x7000

	)

505 
	#PCI_EXP_DEVCTL_READRQ_128B
 0x0000

	)

506 
	#PCI_EXP_DEVCTL_READRQ_256B
 0x1000

	)

507 
	#PCI_EXP_DEVCTL_READRQ_512B
 0x2000

	)

508 
	#PCI_EXP_DEVCTL_READRQ_1024B
 0x3000

	)

509 
	#PCI_EXP_DEVCTL_BCR_FLR
 0x8000

	)

510 
	#PCI_EXP_DEVSTA
 10

	)

511 
	#PCI_EXP_DEVSTA_CED
 0x0001

	)

512 
	#PCI_EXP_DEVSTA_NFED
 0x0002

	)

513 
	#PCI_EXP_DEVSTA_FED
 0x0004

	)

514 
	#PCI_EXP_DEVSTA_URD
 0x0008

	)

515 
	#PCI_EXP_DEVSTA_AUXPD
 0x0010

	)

516 
	#PCI_EXP_DEVSTA_TRPND
 0x0020

	)

517 
	#PCI_CAP_EXP_RC_ENDPOINT_SIZEOF_V1
 12

	)

518 
	#PCI_EXP_LNKCAP
 12

	)

519 
	#PCI_EXP_LNKCAP_SLS
 0x0000000‡

	)

520 
	#PCI_EXP_LNKCAP_SLS_2_5GB
 0x00000001

	)

521 
	#PCI_EXP_LNKCAP_SLS_5_0GB
 0x00000002

	)

522 
	#PCI_EXP_LNKCAP_SLS_8_0GB
 0x00000003

	)

523 
	#PCI_EXP_LNKCAP_SLS_16_0GB
 0x00000004

	)

524 
	#PCI_EXP_LNKCAP_MLW
 0x000003f0

	)

525 
	#PCI_EXP_LNKCAP_ASPMS
 0x00000c00

	)

526 
	#PCI_EXP_LNKCAP_L0SEL
 0x00007000

	)

527 
	#PCI_EXP_LNKCAP_L1EL
 0x00038000

	)

528 
	#PCI_EXP_LNKCAP_CLKPM
 0x00040000

	)

529 
	#PCI_EXP_LNKCAP_SDERC
 0x00080000

	)

530 
	#PCI_EXP_LNKCAP_DLLLARC
 0x00100000

	)

531 
	#PCI_EXP_LNKCAP_LBNC
 0x00200000

	)

532 
	#PCI_EXP_LNKCAP_PN
 0xff000000

	)

533 
	#PCI_EXP_LNKCTL
 16

	)

534 
	#PCI_EXP_LNKCTL_ASPMC
 0x0003

	)

535 
	#PCI_EXP_LNKCTL_ASPM_L0S
 0x0001

	)

536 
	#PCI_EXP_LNKCTL_ASPM_L1
 0x0002

	)

537 
	#PCI_EXP_LNKCTL_RCB
 0x0008

	)

538 
	#PCI_EXP_LNKCTL_LD
 0x0010

	)

539 
	#PCI_EXP_LNKCTL_RL
 0x0020

	)

540 
	#PCI_EXP_LNKCTL_CCC
 0x0040

	)

541 
	#PCI_EXP_LNKCTL_ES
 0x0080

	)

542 
	#PCI_EXP_LNKCTL_CLKREQ_EN
 0x0100

	)

543 
	#PCI_EXP_LNKCTL_HAWD
 0x0200

	)

544 
	#PCI_EXP_LNKCTL_LBMIE
 0x0400

	)

545 
	#PCI_EXP_LNKCTL_LABIE
 0x0800

	)

546 
	#PCI_EXP_LNKSTA
 18

	)

547 
	#PCI_EXP_LNKSTA_CLS
 0x000‡

	)

548 
	#PCI_EXP_LNKSTA_CLS_2_5GB
 0x0001

	)

549 
	#PCI_EXP_LNKSTA_CLS_5_0GB
 0x0002

	)

550 
	#PCI_EXP_LNKSTA_CLS_8_0GB
 0x0003

	)

551 
	#PCI_EXP_LNKSTA_CLS_16_0GB
 0x0004

	)

552 
	#PCI_EXP_LNKSTA_NLW
 0x03f0

	)

553 
	#PCI_EXP_LNKSTA_NLW_X1
 0x0010

	)

554 
	#PCI_EXP_LNKSTA_NLW_X2
 0x0020

	)

555 
	#PCI_EXP_LNKSTA_NLW_X4
 0x0040

	)

556 
	#PCI_EXP_LNKSTA_NLW_X8
 0x0080

	)

557 
	#PCI_EXP_LNKSTA_NLW_SHIFT
 4

	)

558 
	#PCI_EXP_LNKSTA_LT
 0x0800

	)

559 
	#PCI_EXP_LNKSTA_SLC
 0x1000

	)

560 
	#PCI_EXP_LNKSTA_DLLLA
 0x2000

	)

561 
	#PCI_EXP_LNKSTA_LBMS
 0x4000

	)

562 
	#PCI_EXP_LNKSTA_LABS
 0x8000

	)

563 
	#PCI_CAP_EXP_ENDPOINT_SIZEOF_V1
 20

	)

564 
	#PCI_EXP_SLTCAP
 20

	)

565 
	#PCI_EXP_SLTCAP_ABP
 0x00000001

	)

566 
	#PCI_EXP_SLTCAP_PCP
 0x00000002

	)

567 
	#PCI_EXP_SLTCAP_MRLSP
 0x00000004

	)

568 
	#PCI_EXP_SLTCAP_AIP
 0x00000008

	)

569 
	#PCI_EXP_SLTCAP_PIP
 0x00000010

	)

570 
	#PCI_EXP_SLTCAP_HPS
 0x00000020

	)

571 
	#PCI_EXP_SLTCAP_HPC
 0x00000040

	)

572 
	#PCI_EXP_SLTCAP_SPLV
 0x00007f80

	)

573 
	#PCI_EXP_SLTCAP_SPLS
 0x00018000

	)

574 
	#PCI_EXP_SLTCAP_EIP
 0x00020000

	)

575 
	#PCI_EXP_SLTCAP_NCCS
 0x00040000

	)

576 
	#PCI_EXP_SLTCAP_PSN
 0xfff80000

	)

577 
	#PCI_EXP_SLTCTL
 24

	)

578 
	#PCI_EXP_SLTCTL_ABPE
 0x0001

	)

579 
	#PCI_EXP_SLTCTL_PFDE
 0x0002

	)

580 
	#PCI_EXP_SLTCTL_MRLSCE
 0x0004

	)

581 
	#PCI_EXP_SLTCTL_PDCE
 0x0008

	)

582 
	#PCI_EXP_SLTCTL_CCIE
 0x0010

	)

583 
	#PCI_EXP_SLTCTL_HPIE
 0x0020

	)

584 
	#PCI_EXP_SLTCTL_AIC
 0x00c0

	)

585 
	#PCI_EXP_SLTCTL_ATTN_IND_ON
 0x0040

	)

586 
	#PCI_EXP_SLTCTL_ATTN_IND_BLINK
 0x0080

	)

587 
	#PCI_EXP_SLTCTL_ATTN_IND_OFF
 0x00c0

	)

588 
	#PCI_EXP_SLTCTL_PIC
 0x0300

	)

589 
	#PCI_EXP_SLTCTL_PWR_IND_ON
 0x0100

	)

590 
	#PCI_EXP_SLTCTL_PWR_IND_BLINK
 0x0200

	)

591 
	#PCI_EXP_SLTCTL_PWR_IND_OFF
 0x0300

	)

592 
	#PCI_EXP_SLTCTL_PCC
 0x0400

	)

593 
	#PCI_EXP_SLTCTL_PWR_ON
 0x0000

	)

594 
	#PCI_EXP_SLTCTL_PWR_OFF
 0x0400

	)

595 
	#PCI_EXP_SLTCTL_EIC
 0x0800

	)

596 
	#PCI_EXP_SLTCTL_DLLSCE
 0x1000

	)

597 
	#PCI_EXP_SLTSTA
 26

	)

598 
	#PCI_EXP_SLTSTA_ABP
 0x0001

	)

599 
	#PCI_EXP_SLTSTA_PFD
 0x0002

	)

600 
	#PCI_EXP_SLTSTA_MRLSC
 0x0004

	)

601 
	#PCI_EXP_SLTSTA_PDC
 0x0008

	)

602 
	#PCI_EXP_SLTSTA_CC
 0x0010

	)

603 
	#PCI_EXP_SLTSTA_MRLSS
 0x0020

	)

604 
	#PCI_EXP_SLTSTA_PDS
 0x0040

	)

605 
	#PCI_EXP_SLTSTA_EIS
 0x0080

	)

606 
	#PCI_EXP_SLTSTA_DLLSC
 0x0100

	)

607 
	#PCI_EXP_RTCTL
 28

	)

608 
	#PCI_EXP_RTCTL_SECEE
 0x0001

	)

609 
	#PCI_EXP_RTCTL_SENFEE
 0x0002

	)

610 
	#PCI_EXP_RTCTL_SEFEE
 0x0004

	)

611 
	#PCI_EXP_RTCTL_PMEIE
 0x0008

	)

612 
	#PCI_EXP_RTCTL_CRSSVE
 0x0010

	)

613 
	#PCI_EXP_RTCAP
 30

	)

614 
	#PCI_EXP_RTCAP_CRSVIS
 0x0001

	)

615 
	#PCI_EXP_RTSTA
 32

	)

616 
	#PCI_EXP_RTSTA_PME
 0x00010000

	)

617 
	#PCI_EXP_RTSTA_PENDING
 0x00020000

	)

626 
	#PCI_EXP_DEVCAP2
 36

	)

627 
	#PCI_EXP_DEVCAP2_ARI
 0x00000020

	)

628 
	#PCI_EXP_DEVCAP2_ATOMIC_ROUTE
 0x00000040

	)

629 
	#PCI_EXP_DEVCAP2_ATOMIC_COMP64
 0x00000100

	)

630 
	#PCI_EXP_DEVCAP2_LTR
 0x00000800

	)

631 
	#PCI_EXP_DEVCAP2_OBFF_MASK
 0x000c0000

	)

632 
	#PCI_EXP_DEVCAP2_OBFF_MSG
 0x00040000

	)

633 
	#PCI_EXP_DEVCAP2_OBFF_WAKE
 0x00080000

	)

634 
	#PCI_EXP_DEVCTL2
 40

	)

635 
	#PCI_EXP_DEVCTL2_COMP_TIMEOUT
 0x000‡

	)

636 
	#PCI_EXP_DEVCTL2_ARI
 0x0020

	)

637 
	#PCI_EXP_DEVCTL2_ATOMIC_REQ
 0x0040

	)

638 
	#PCI_EXP_DEVCTL2_ATOMIC_EGRESS_BLOCK
 0x0080

	)

639 
	#PCI_EXP_DEVCTL2_IDO_REQ_EN
 0x0100

	)

640 
	#PCI_EXP_DEVCTL2_IDO_CMP_EN
 0x0200

	)

641 
	#PCI_EXP_DEVCTL2_LTR_EN
 0x0400

	)

642 
	#PCI_EXP_DEVCTL2_OBFF_MSGA_EN
 0x2000

	)

643 
	#PCI_EXP_DEVCTL2_OBFF_MSGB_EN
 0x4000

	)

644 
	#PCI_EXP_DEVCTL2_OBFF_WAKE_EN
 0x6000

	)

645 
	#PCI_EXP_DEVSTA2
 42

	)

646 
	#PCI_CAP_EXP_RC_ENDPOINT_SIZEOF_V2
 44

	)

647 
	#PCI_EXP_LNKCAP2
 44

	)

648 
	#PCI_EXP_LNKCAP2_SLS_2_5GB
 0x00000002

	)

649 
	#PCI_EXP_LNKCAP2_SLS_5_0GB
 0x00000004

	)

650 
	#PCI_EXP_LNKCAP2_SLS_8_0GB
 0x00000008

	)

651 
	#PCI_EXP_LNKCAP2_SLS_16_0GB
 0x00000010

	)

652 
	#PCI_EXP_LNKCAP2_CROSSLINK
 0x00000100

	)

653 
	#PCI_EXP_LNKCTL2
 48

	)

654 
	#PCI_EXP_LNKSTA2
 50

	)

655 
	#PCI_CAP_EXP_ENDPOINT_SIZEOF_V2
 52

	)

656 
	#PCI_EXP_SLTCAP2
 52

	)

657 
	#PCI_EXP_SLTCTL2
 56

	)

658 
	#PCI_EXP_SLTSTA2
 58

	)

661 
	#PCI_EXT_CAP_ID
(
hódî
Ë(hódî & 0x0000ffff)

	)

662 
	#PCI_EXT_CAP_VER
(
hódî
Ë((hódî >> 16Ë& 0xf)

	)

663 
	#PCI_EXT_CAP_NEXT
(
hódî
Ë((hódî >> 20Ë& 0xffc)

	)

665 
	#PCI_EXT_CAP_ID_ERR
 0x01

	)

666 
	#PCI_EXT_CAP_ID_VC
 0x02

	)

667 
	#PCI_EXT_CAP_ID_DSN
 0x03

	)

668 
	#PCI_EXT_CAP_ID_PWR
 0x04

	)

669 
	#PCI_EXT_CAP_ID_RCLD
 0x05

	)

670 
	#PCI_EXT_CAP_ID_RCILC
 0x06

	)

671 
	#PCI_EXT_CAP_ID_RCEC
 0x07

	)

672 
	#PCI_EXT_CAP_ID_MFVC
 0x08

	)

673 
	#PCI_EXT_CAP_ID_VC9
 0x09

	)

674 
	#PCI_EXT_CAP_ID_RCRB
 0x0A

	)

675 
	#PCI_EXT_CAP_ID_VNDR
 0x0B

	)

676 
	#PCI_EXT_CAP_ID_CAC
 0x0C

	)

677 
	#PCI_EXT_CAP_ID_ACS
 0x0D

	)

678 
	#PCI_EXT_CAP_ID_ARI
 0x0E

	)

679 
	#PCI_EXT_CAP_ID_ATS
 0x0F

	)

680 
	#PCI_EXT_CAP_ID_SRIOV
 0x10

	)

681 
	#PCI_EXT_CAP_ID_MRIOV
 0x11

	)

682 
	#PCI_EXT_CAP_ID_MCAST
 0x12

	)

683 
	#PCI_EXT_CAP_ID_PRI
 0x13

	)

684 
	#PCI_EXT_CAP_ID_AMD_XXX
 0x14

	)

685 
	#PCI_EXT_CAP_ID_REBAR
 0x15

	)

686 
	#PCI_EXT_CAP_ID_DPA
 0x16

	)

687 
	#PCI_EXT_CAP_ID_TPH
 0x17

	)

688 
	#PCI_EXT_CAP_ID_LTR
 0x18

	)

689 
	#PCI_EXT_CAP_ID_SECPCI
 0x19

	)

690 
	#PCI_EXT_CAP_ID_PMUX
 0x1A

	)

691 
	#PCI_EXT_CAP_ID_PASID
 0x1B

	)

692 
	#PCI_EXT_CAP_ID_DPC
 0x1D

	)

693 
	#PCI_EXT_CAP_ID_L1SS
 0x1E

	)

694 
	#PCI_EXT_CAP_ID_PTM
 0x1F

	)

695 
	#PCI_EXT_CAP_ID_MAX
 
PCI_EXT_CAP_ID_PTM


	)

697 
	#PCI_EXT_CAP_DSN_SIZEOF
 12

	)

698 
	#PCI_EXT_CAP_MCAST_ENDPOINT_SIZEOF
 40

	)

701 
	#PCI_ERR_UNCOR_STATUS
 4

	)

702 
	#PCI_ERR_UNC_UND
 0x00000001

	)

703 
	#PCI_ERR_UNC_DLP
 0x00000010

	)

704 
	#PCI_ERR_UNC_SURPDN
 0x00000020

	)

705 
	#PCI_ERR_UNC_POISON_TLP
 0x00001000

	)

706 
	#PCI_ERR_UNC_FCP
 0x00002000

	)

707 
	#PCI_ERR_UNC_COMP_TIME
 0x00004000

	)

708 
	#PCI_ERR_UNC_COMP_ABORT
 0x00008000

	)

709 
	#PCI_ERR_UNC_UNX_COMP
 0x00010000

	)

710 
	#PCI_ERR_UNC_RX_OVER
 0x00020000

	)

711 
	#PCI_ERR_UNC_MALF_TLP
 0x00040000

	)

712 
	#PCI_ERR_UNC_ECRC
 0x00080000

	)

713 
	#PCI_ERR_UNC_UNSUP
 0x00100000

	)

714 
	#PCI_ERR_UNC_ACSV
 0x00200000

	)

715 
	#PCI_ERR_UNC_INTN
 0x00400000

	)

716 
	#PCI_ERR_UNC_MCBTLP
 0x00800000

	)

717 
	#PCI_ERR_UNC_ATOMEG
 0x01000000

	)

718 
	#PCI_ERR_UNC_TLPPRE
 0x02000000

	)

719 
	#PCI_ERR_UNCOR_MASK
 8

	)

721 
	#PCI_ERR_UNCOR_SEVER
 12

	)

723 
	#PCI_ERR_COR_STATUS
 16

	)

724 
	#PCI_ERR_COR_RCVR
 0x00000001

	)

725 
	#PCI_ERR_COR_BAD_TLP
 0x00000040

	)

726 
	#PCI_ERR_COR_BAD_DLLP
 0x00000080

	)

727 
	#PCI_ERR_COR_REP_ROLL
 0x00000100

	)

728 
	#PCI_ERR_COR_REP_TIMER
 0x00001000

	)

729 
	#PCI_ERR_COR_ADV_NFAT
 0x00002000

	)

730 
	#PCI_ERR_COR_INTERNAL
 0x00004000

	)

731 
	#PCI_ERR_COR_LOG_OVER
 0x00008000

	)

732 
	#PCI_ERR_COR_MASK
 20

	)

734 
	#PCI_ERR_CAP
 24

	)

735 
	#PCI_ERR_CAP_FEP
(
x
Ë((xË& 31Ë

	)

736 
	#PCI_ERR_CAP_ECRC_GENC
 0x00000020

	)

737 
	#PCI_ERR_CAP_ECRC_GENE
 0x00000040

	)

738 
	#PCI_ERR_CAP_ECRC_CHKC
 0x00000080

	)

739 
	#PCI_ERR_CAP_ECRC_CHKE
 0x00000100

	)

740 
	#PCI_ERR_HEADER_LOG
 28

	)

741 
	#PCI_ERR_ROOT_COMMAND
 44

	)

742 
	#PCI_ERR_ROOT_CMD_COR_EN
 0x00000001

	)

743 
	#PCI_ERR_ROOT_CMD_NONFATAL_EN
 0x00000002

	)

744 
	#PCI_ERR_ROOT_CMD_FATAL_EN
 0x00000004

	)

745 
	#PCI_ERR_ROOT_STATUS
 48

	)

746 
	#PCI_ERR_ROOT_COR_RCV
 0x00000001

	)

747 
	#PCI_ERR_ROOT_MULTI_COR_RCV
 0x00000002

	)

748 
	#PCI_ERR_ROOT_UNCOR_RCV
 0x00000004

	)

749 
	#PCI_ERR_ROOT_MULTI_UNCOR_RCV
 0x00000008

	)

750 
	#PCI_ERR_ROOT_FIRST_FATAL
 0x00000010

	)

751 
	#PCI_ERR_ROOT_NONFATAL_RCV
 0x00000020

	)

752 
	#PCI_ERR_ROOT_FATAL_RCV
 0x00000040

	)

753 
	#PCI_ERR_ROOT_AER_IRQ
 0xf8000000

	)

754 
	#PCI_ERR_ROOT_ERR_SRC
 52

	)

757 
	#PCI_VC_PORT_CAP1
 4

	)

758 
	#PCI_VC_CAP1_EVCC
 0x00000007

	)

759 
	#PCI_VC_CAP1_LPEVCC
 0x00000070

	)

760 
	#PCI_VC_CAP1_ARB_SIZE
 0x00000c00

	)

761 
	#PCI_VC_PORT_CAP2
 8

	)

762 
	#PCI_VC_CAP2_32_PHASE
 0x00000002

	)

763 
	#PCI_VC_CAP2_64_PHASE
 0x00000004

	)

764 
	#PCI_VC_CAP2_128_PHASE
 0x00000008

	)

765 
	#PCI_VC_CAP2_ARB_OFF
 0xff000000

	)

766 
	#PCI_VC_PORT_CTRL
 12

	)

767 
	#PCI_VC_PORT_CTRL_LOAD_TABLE
 0x00000001

	)

768 
	#PCI_VC_PORT_STATUS
 14

	)

769 
	#PCI_VC_PORT_STATUS_TABLE
 0x00000001

	)

770 
	#PCI_VC_RES_CAP
 16

	)

771 
	#PCI_VC_RES_CAP_32_PHASE
 0x00000002

	)

772 
	#PCI_VC_RES_CAP_64_PHASE
 0x00000004

	)

773 
	#PCI_VC_RES_CAP_128_PHASE
 0x00000008

	)

774 
	#PCI_VC_RES_CAP_128_PHASE_TB
 0x00000010

	)

775 
	#PCI_VC_RES_CAP_256_PHASE
 0x00000020

	)

776 
	#PCI_VC_RES_CAP_ARB_OFF
 0xff000000

	)

777 
	#PCI_VC_RES_CTRL
 20

	)

778 
	#PCI_VC_RES_CTRL_LOAD_TABLE
 0x00010000

	)

779 
	#PCI_VC_RES_CTRL_ARB_SELECT
 0x000e0000

	)

780 
	#PCI_VC_RES_CTRL_ID
 0x07000000

	)

781 
	#PCI_VC_RES_CTRL_ENABLE
 0x80000000

	)

782 
	#PCI_VC_RES_STATUS
 26

	)

783 
	#PCI_VC_RES_STATUS_TABLE
 0x00000001

	)

784 
	#PCI_VC_RES_STATUS_NEGO
 0x00000002

	)

785 
	#PCI_CAP_VC_BASE_SIZEOF
 0x10

	)

786 
	#PCI_CAP_VC_PER_VC_SIZEOF
 0x0C

	)

789 
	#PCI_PWR_DSR
 4

	)

790 
	#PCI_PWR_DATA
 8

	)

791 
	#PCI_PWR_DATA_BASE
(
x
Ë((xË& 0xffË

	)

792 
	#PCI_PWR_DATA_SCALE
(
x
Ë(((xË>> 8Ë& 3Ë

	)

793 
	#PCI_PWR_DATA_PM_SUB
(
x
Ë(((xË>> 10Ë& 7Ë

	)

794 
	#PCI_PWR_DATA_PM_STATE
(
x
Ë(((xË>> 13Ë& 3Ë

	)

795 
	#PCI_PWR_DATA_TYPE
(
x
Ë(((xË>> 15Ë& 7Ë

	)

796 
	#PCI_PWR_DATA_RAIL
(
x
Ë(((xË>> 18Ë& 7Ë

	)

797 
	#PCI_PWR_CAP
 12

	)

798 
	#PCI_PWR_CAP_BUDGET
(
x
Ë((xË& 1Ë

	)

799 
	#PCI_EXT_CAP_PWR_SIZEOF
 16

	)

802 
	#PCI_VNDR_HEADER
 4

	)

803 
	#PCI_VNDR_HEADER_ID
(
x
Ë((xË& 0xffff)

	)

804 
	#PCI_VNDR_HEADER_REV
(
x
Ë(((xË>> 16Ë& 0xf)

	)

805 
	#PCI_VNDR_HEADER_LEN
(
x
Ë(((xË>> 20Ë& 0xfff)

	)

815 
	#HT_3BIT_CAP_MASK
 0xE0

	)

816 
	#HT_CAPTYPE_SLAVE
 0x00

	)

817 
	#HT_CAPTYPE_HOST
 0x20

	)

819 
	#HT_5BIT_CAP_MASK
 0xF8

	)

820 
	#HT_CAPTYPE_IRQ
 0x80

	)

821 
	#HT_CAPTYPE_REMAPPING_40
 0xA0

	)

822 
	#HT_CAPTYPE_REMAPPING_64
 0xA2

	)

823 
	#HT_CAPTYPE_UNITID_CLUMP
 0x90

	)

824 
	#HT_CAPTYPE_EXTCONF
 0x98

	)

825 
	#HT_CAPTYPE_MSI_MAPPING
 0xA8

	)

826 
	#HT_MSI_FLAGS
 0x02

	)

827 
	#HT_MSI_FLAGS_ENABLE
 0x1

	)

828 
	#HT_MSI_FLAGS_FIXED
 0x2

	)

829 
	#HT_MSI_FIXED_ADDR
 0x00000000FEE00000ULL

	)

830 
	#HT_MSI_ADDR_LO
 0x04

	)

831 
	#HT_MSI_ADDR_LO_MASK
 0xFFF00000

	)

832 
	#HT_MSI_ADDR_HI
 0x08

	)

833 
	#HT_CAPTYPE_DIRECT_ROUTE
 0xB0

	)

834 
	#HT_CAPTYPE_VCSET
 0xB8

	)

835 
	#HT_CAPTYPE_ERROR_RETRY
 0xC0

	)

836 
	#HT_CAPTYPE_GEN3
 0xD0

	)

837 
	#HT_CAPTYPE_PM
 0xE0

	)

838 
	#HT_CAP_SIZEOF_LONG
 28

	)

839 
	#HT_CAP_SIZEOF_SHORT
 24

	)

842 
	#PCI_ARI_CAP
 0x04

	)

843 
	#PCI_ARI_CAP_MFVC
 0x0001

	)

844 
	#PCI_ARI_CAP_ACS
 0x0002

	)

845 
	#PCI_ARI_CAP_NFN
(
x
Ë(((xË>> 8Ë& 0xffË

	)

846 
	#PCI_ARI_CTRL
 0x06

	)

847 
	#PCI_ARI_CTRL_MFVC
 0x0001

	)

848 
	#PCI_ARI_CTRL_ACS
 0x0002

	)

849 
	#PCI_ARI_CTRL_FG
(
x
Ë(((xË>> 4Ë& 7Ë

	)

850 
	#PCI_EXT_CAP_ARI_SIZEOF
 8

	)

853 
	#PCI_ATS_CAP
 0x04

	)

854 
	#PCI_ATS_CAP_QDEP
(
x
Ë((xË& 0x1fË

	)

855 
	#PCI_ATS_MAX_QDEP
 32

	)

856 
	#PCI_ATS_CTRL
 0x06

	)

857 
	#PCI_ATS_CTRL_ENABLE
 0x8000

	)

858 
	#PCI_ATS_CTRL_STU
(
x
Ë((xË& 0x1fË

	)

859 
	#PCI_ATS_MIN_STU
 12

	)

860 
	#PCI_EXT_CAP_ATS_SIZEOF
 8

	)

863 
	#PCI_PRI_CTRL
 0x04

	)

864 
	#PCI_PRI_CTRL_ENABLE
 0x01

	)

865 
	#PCI_PRI_CTRL_RESET
 0x02

	)

866 
	#PCI_PRI_STATUS
 0x06

	)

867 
	#PCI_PRI_STATUS_RF
 0x001

	)

868 
	#PCI_PRI_STATUS_UPRGI
 0x002

	)

869 
	#PCI_PRI_STATUS_STOPPED
 0x100

	)

870 
	#PCI_PRI_MAX_REQ
 0x08

	)

871 
	#PCI_PRI_ALLOC_REQ
 0x0¯

	)

872 
	#PCI_EXT_CAP_PRI_SIZEOF
 16

	)

875 
	#PCI_PASID_CAP
 0x04

	)

876 
	#PCI_PASID_CAP_EXEC
 0x02

	)

877 
	#PCI_PASID_CAP_PRIV
 0x04

	)

878 
	#PCI_PASID_CTRL
 0x06

	)

879 
	#PCI_PASID_CTRL_ENABLE
 0x01

	)

880 
	#PCI_PASID_CTRL_EXEC
 0x02

	)

881 
	#PCI_PASID_CTRL_PRIV
 0x04

	)

882 
	#PCI_EXT_CAP_PASID_SIZEOF
 8

	)

885 
	#PCI_SRIOV_CAP
 0x04

	)

886 
	#PCI_SRIOV_CAP_VFM
 0x01

	)

887 
	#PCI_SRIOV_CAP_INTR
(
x
Ë((xË>> 21Ë

	)

888 
	#PCI_SRIOV_CTRL
 0x08

	)

889 
	#PCI_SRIOV_CTRL_VFE
 0x01

	)

890 
	#PCI_SRIOV_CTRL_VFM
 0x02

	)

891 
	#PCI_SRIOV_CTRL_INTR
 0x04

	)

892 
	#PCI_SRIOV_CTRL_MSE
 0x08

	)

893 
	#PCI_SRIOV_CTRL_ARI
 0x10

	)

894 
	#PCI_SRIOV_STATUS
 0x0®

	)

895 
	#PCI_SRIOV_STATUS_VFM
 0x01

	)

896 
	#PCI_SRIOV_INITIAL_VF
 0x0¯

	)

897 
	#PCI_SRIOV_TOTAL_VF
 0x0ê

	)

898 
	#PCI_SRIOV_NUM_VF
 0x10

	)

899 
	#PCI_SRIOV_FUNC_LINK
 0x12

	)

900 
	#PCI_SRIOV_VF_OFFSET
 0x14

	)

901 
	#PCI_SRIOV_VF_STRIDE
 0x16

	)

902 
	#PCI_SRIOV_VF_DID
 0x1®

	)

903 
	#PCI_SRIOV_SUP_PGSIZE
 0x1¯

	)

904 
	#PCI_SRIOV_SYS_PGSIZE
 0x20

	)

905 
	#PCI_SRIOV_BAR
 0x24

	)

906 
	#PCI_SRIOV_NUM_BARS
 6

	)

907 
	#PCI_SRIOV_VFM
 0x3¯

	)

908 
	#PCI_SRIOV_VFM_BIR
(
x
Ë((xË& 7Ë

	)

909 
	#PCI_SRIOV_VFM_OFFSET
(
x
Ë((xË& ~7Ë

	)

910 
	#PCI_SRIOV_VFM_UA
 0x0

	)

911 
	#PCI_SRIOV_VFM_MI
 0x1

	)

912 
	#PCI_SRIOV_VFM_MO
 0x2

	)

913 
	#PCI_SRIOV_VFM_AV
 0x3

	)

914 
	#PCI_EXT_CAP_SRIOV_SIZEOF
 64

	)

916 
	#PCI_LTR_MAX_SNOOP_LAT
 0x4

	)

917 
	#PCI_LTR_MAX_NOSNOOP_LAT
 0x6

	)

918 
	#PCI_LTR_VALUE_MASK
 0x000003ff

	)

919 
	#PCI_LTR_SCALE_MASK
 0x00001c00

	)

920 
	#PCI_LTR_SCALE_SHIFT
 10

	)

921 
	#PCI_EXT_CAP_LTR_SIZEOF
 8

	)

924 
	#PCI_ACS_CAP
 0x04

	)

925 
	#PCI_ACS_SV
 0x01

	)

926 
	#PCI_ACS_TB
 0x02

	)

927 
	#PCI_ACS_RR
 0x04

	)

928 
	#PCI_ACS_CR
 0x08

	)

929 
	#PCI_ACS_UF
 0x10

	)

930 
	#PCI_ACS_EC
 0x20

	)

931 
	#PCI_ACS_DT
 0x40

	)

932 
	#PCI_ACS_EGRESS_BITS
 0x05

	)

933 
	#PCI_ACS_CTRL
 0x06

	)

934 
	#PCI_ACS_EGRESS_CTL_V
 0x08

	)

936 
	#PCI_VSEC_HDR
 4

	)

937 
	#PCI_VSEC_HDR_LEN_SHIFT
 20

	)

940 
	#PCI_SATA_REGS
 4

	)

941 
	#PCI_SATA_REGS_MASK
 0xF

	)

942 
	#PCI_SATA_REGS_INLINE
 0xF

	)

943 
	#PCI_SATA_SIZEOF_SHORT
 8

	)

944 
	#PCI_SATA_SIZEOF_LONG
 16

	)

947 
	#PCI_REBAR_CAP
 4

	)

948 
	#PCI_REBAR_CAP_SIZES
 0x00FFFFF0

	)

949 
	#PCI_REBAR_CTRL
 8

	)

950 
	#PCI_REBAR_CTRL_BAR_IDX
 0x00000007

	)

951 
	#PCI_REBAR_CTRL_NBAR_MASK
 0x000000E0

	)

952 
	#PCI_REBAR_CTRL_NBAR_SHIFT
 5

	)

953 
	#PCI_REBAR_CTRL_BAR_SIZE
 0x00001F00

	)

956 
	#PCI_DPA_CAP
 4

	)

957 
	#PCI_DPA_CAP_SUBSTATE_MASK
 0x1F

	)

958 
	#PCI_DPA_BASE_SIZEOF
 16

	)

961 
	#PCI_TPH_CAP
 4

	)

962 
	#PCI_TPH_CAP_LOC_MASK
 0x600

	)

963 
	#PCI_TPH_LOC_NONE
 0x000

	)

964 
	#PCI_TPH_LOC_CAP
 0x200

	)

965 
	#PCI_TPH_LOC_MSIX
 0x400

	)

966 
	#PCI_TPH_CAP_ST_MASK
 0x07FF0000

	)

967 
	#PCI_TPH_CAP_ST_SHIFT
 16

	)

968 
	#PCI_TPH_BASE_SIZEOF
 12

	)

971 
	#PCI_EXP_DPC_CAP
 4

	)

972 
	#PCI_EXP_DPC_IRQ
 0x1‡

	)

973 
	#PCI_EXP_DPC_CAP_RP_EXT
 0x20

	)

974 
	#PCI_EXP_DPC_CAP_POISONED_TLP
 0x40

	)

975 
	#PCI_EXP_DPC_CAP_SW_TRIGGER
 0x80

	)

976 
	#PCI_EXP_DPC_RP_PIO_LOG_SIZE
 0xF00

	)

977 
	#PCI_EXP_DPC_CAP_DL_ACTIVE
 0x1000

	)

979 
	#PCI_EXP_DPC_CTL
 6

	)

980 
	#PCI_EXP_DPC_CTL_EN_NONFATAL
 0x02

	)

981 
	#PCI_EXP_DPC_CTL_INT_EN
 0x08

	)

983 
	#PCI_EXP_DPC_STATUS
 8

	)

984 
	#PCI_EXP_DPC_STATUS_TRIGGER
 0x01

	)

985 
	#PCI_EXP_DPC_STATUS_INTERRUPT
 0x08

	)

986 
	#PCI_EXP_DPC_RP_BUSY
 0x10

	)

988 
	#PCI_EXP_DPC_SOURCE_ID
 10

	)

990 
	#PCI_EXP_DPC_RP_PIO_STATUS
 0x0C

	)

991 
	#PCI_EXP_DPC_RP_PIO_MASK
 0x10

	)

992 
	#PCI_EXP_DPC_RP_PIO_SEVERITY
 0x14

	)

993 
	#PCI_EXP_DPC_RP_PIO_SYSERROR
 0x18

	)

994 
	#PCI_EXP_DPC_RP_PIO_EXCEPTION
 0x1C

	)

995 
	#PCI_EXP_DPC_RP_PIO_HEADER_LOG
 0x20

	)

996 
	#PCI_EXP_DPC_RP_PIO_IMPSPEC_LOG
 0x30

	)

997 
	#PCI_EXP_DPC_RP_PIO_TLPPREFIX_LOG
 0x34

	)

1000 
	#PCI_PTM_CAP
 0x04

	)

1001 
	#PCI_PTM_CAP_REQ
 0x00000001

	)

1002 
	#PCI_PTM_CAP_ROOT
 0x00000004

	)

1003 
	#PCI_PTM_GRANULARITY_MASK
 0x0000FF00

	)

1004 
	#PCI_PTM_CTRL
 0x08

	)

1005 
	#PCI_PTM_CTRL_ENABLE
 0x00000001

	)

1006 
	#PCI_PTM_CTRL_ROOT
 0x00000002

	)

1009 
	#PCI_L1SS_CAP
 0x04

	)

1010 
	#PCI_L1SS_CAP_PCIPM_L1_2
 0x00000001

	)

1011 
	#PCI_L1SS_CAP_PCIPM_L1_1
 0x00000002

	)

1012 
	#PCI_L1SS_CAP_ASPM_L1_2
 0x00000004

	)

1013 
	#PCI_L1SS_CAP_ASPM_L1_1
 0x00000008

	)

1014 
	#PCI_L1SS_CAP_L1_PM_SS
 0x00000010

	)

1015 
	#PCI_L1SS_CAP_CM_RESTORE_TIME
 0x0000ff00

	)

1016 
	#PCI_L1SS_CAP_P_PWR_ON_SCALE
 0x00030000

	)

1017 
	#PCI_L1SS_CAP_P_PWR_ON_VALUE
 0x00f80000

	)

1018 
	#PCI_L1SS_CTL1
 0x08

	)

1019 
	#PCI_L1SS_CTL1_PCIPM_L1_2
 0x00000001

	)

1020 
	#PCI_L1SS_CTL1_PCIPM_L1_1
 0x00000002

	)

1021 
	#PCI_L1SS_CTL1_ASPM_L1_2
 0x00000004

	)

1022 
	#PCI_L1SS_CTL1_ASPM_L1_1
 0x00000008

	)

1023 
	#PCI_L1SS_CTL1_L1SS_MASK
 0x0000000f

	)

1024 
	#PCI_L1SS_CTL1_CM_RESTORE_TIME
 0x0000ff00

	)

1025 
	#PCI_L1SS_CTL1_LTR_L12_TH_VALUE
 0x03ff0000

	)

1026 
	#PCI_L1SS_CTL1_LTR_L12_TH_SCALE
 0xe0000000

	)

1027 
	#PCI_L1SS_CTL2
 0x0¯

	)

	@/usr/include/linux/posix_types.h

2 #i‚de‡
_LINUX_POSIX_TYPES_H


3 
	#_LINUX_POSIX_TYPES_H


	)

5 
	~<löux/°ddef.h
>

22 #unde‡
__FD_SETSIZE


23 
	#__FD_SETSIZE
 1024

	)

26 
	mfds_bôs
[
__FD_SETSIZE
 / (8 * ())];

27 } 
	t__kî√l_fd_£t
;

30 (*
	t__kî√l_sigh™dÀr_t
)();

33 
	t__kî√l_key_t
;

34 
	t__kî√l_mqd_t
;

36 
	~<asm/posix_ty≥s.h
>

	@/usr/include/linux/sysinfo.h

2 #i‚de‡
_LINUX_SYSINFO_H


3 
	#_LINUX_SYSINFO_H


	)

5 
	~<löux/ty≥s.h
>

7 
	#SI_LOAD_SHIFT
 16

	)

8 
	ssysöfo
 {

9 
__kî√l_l⁄g_t
 
	mu±ime
;

10 
__kî√l_ul⁄g_t
 
	mlﬂds
[3];

11 
__kî√l_ul⁄g_t
 
	mtŸÆøm
;

12 
__kî√l_ul⁄g_t
 
	m‰ìøm
;

13 
__kî√l_ul⁄g_t
 
	msh¨edøm
;

14 
__kî√l_ul⁄g_t
 
	mbuf„ºam
;

15 
__kî√l_ul⁄g_t
 
	mtŸÆsw≠
;

16 
__kî√l_ul⁄g_t
 
	m‰ìsw≠
;

17 
__u16
 
	m¥ocs
;

18 
__u16
 
	m∑d
;

19 
__kî√l_ul⁄g_t
 
	mtŸÆhigh
;

20 
__kî√l_ul⁄g_t
 
	m‰ìhigh
;

21 
__u32
 
	mmem_unô
;

22 
	m_f
[20-2*(
__kî√l_ul⁄g_t
)-(
__u32
)];

	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

28 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

36 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

37 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

42 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

43 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

46 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

47 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

52 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


53 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

54 
__c
, 
size_t
 
__n
)

55 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

60 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

63 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

64 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

67 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


70 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

71 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

72 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

73 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

75 #ifde‡
__OPTIMIZE__


76 
__exã∫_Æways_ölöe
 *

77 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


79  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

82 
__exã∫_Æways_ölöe
 const *

83 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


85  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

88 
	}
}

90 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

91 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

94 #ifde‡
__USE_GNU


97 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


98 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

99 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

100 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

101 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

103 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

104 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

108 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


109 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

110 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

111 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

112 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

115 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

121 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

122 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

124 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

125 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

129 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

132 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

133 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

137 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

139 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

140 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

146 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

147 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

148 
__THROW
 
	`__n⁄nuŒ
 ((2));

150 #ifde‡
__USE_XOPEN2K8


152 
	~<bôs/ty≥s/loˇÀ_t.h
>

155 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__l
)

156 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

159 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

160 
loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

163 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8
 \

164 || 
	$__GLIBC_USE
 (
LIB_EXT2
))

166 *
	$°rdup
 (c⁄° *
__s
)

167 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

173 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

174 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

175 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

178 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


180 
	#°rdu∑
(
s
) \

181 (
__exãnsi⁄__
 \

183 c⁄° *
__ﬁd
 = (
s
); \

184 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

185 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

186 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

187 
	}
}))

	)

190 
	#°∫du∑
(
s
, 
n
) \

191 (
__exãnsi⁄__
 \

193 c⁄° *
__ﬁd
 = (
s
); \

194 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

195 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

196 
__√w
[
__Àn
] = '\0'; \

197 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

198 }))

	)

202 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


205 *
°rchr
 (*
__s
, 
__c
)

206 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

207 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

208 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

210 #ifde‡
__OPTIMIZE__


211 
__exã∫_Æways_ölöe
 *

212 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


214  
__buûtö_°rchr
 (
__s
, 
__c
);

217 
__exã∫_Æways_ölöe
 const *

218 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


220  
__buûtö_°rchr
 (
__s
, 
__c
);

225 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

226 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

229 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


232 *
	`°ºchr
 (*
__s
, 
__c
)

233 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

234 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

235 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

237 #ifde‡
__OPTIMIZE__


238 
__exã∫_Æways_ölöe
 *

239 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


241  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

244 
__exã∫_Æways_ölöe
 const *

245 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


247  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

250 
	}
}

252 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

253 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

256 #ifde‡
__USE_GNU


259 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


260 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

261 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

262 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

263 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

265 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

266 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

272 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

273 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

276 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

277 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

279 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


282 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

283 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

284 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

285 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

287 #ifde‡
__OPTIMIZE__


288 
__exã∫_Æways_ölöe
 *

289 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


291  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

294 
__exã∫_Æways_ölöe
 const *

295 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


297  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

300 
	}
}

302 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

303 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

306 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


309 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

310 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

311 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

312 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

314 #ifde‡
__OPTIMIZE__


315 
__exã∫_Æways_ölöe
 *

316 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


318  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

321 
__exã∫_Æways_ölöe
 const *

322 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


324  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

327 
	}
}

329 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

330 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

335 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

336 
__THROW
 
	`__n⁄nuŒ
 ((2));

340 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

341 c⁄° *
__ª°ri˘
 
__dñim
,

342 **
__ª°ri˘
 
__ßve_±r
)

343 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

344 #ifde‡
__USE_POSIX


345 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

346 **
__ª°ri˘
 
__ßve_±r
)

347 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

350 #ifde‡
__USE_GNU


352 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


353 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

354 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

355 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

356 c⁄° *
__√edÀ
)

357 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

359 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

360 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

364 #ifde‡
__USE_GNU


368 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

369 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

370 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

374 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

375 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

377 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

378 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

379 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

384 
size_t
 
	$°æí
 (c⁄° *
__s
)

385 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

387 #ifdef 
__USE_XOPEN2K8


390 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

391 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

396 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

397 #ifde‡
__USE_XOPEN2K


405 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


408 #ifde‡
__REDIRECT_NTH


409 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

410 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

411 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

413 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

414 
__THROW
 
	`__n⁄nuŒ
 ((2));

415 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

420 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

421 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

425 #ifde‡
__USE_XOPEN2K8


427 *
	$°ªº‹_l
 (
__î∫um
, 
loˇÀ_t
 
__l
Ë
__THROW
;

430 #ifde‡
__USE_MISC


431 
	~<°rögs.h
>

435 
	$ex∂icô_bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

439 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

440 c⁄° *
__ª°ri˘
 
__dñim
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 #ifdef 
__USE_XOPEN2K8


446 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

449 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

451 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

452 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

456 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

457 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

458 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

460 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

464 #ifdef 
__USE_GNU


466 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

467 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

470 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

473 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

475 #i‚de‡
ba£«me


480 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


481 "C++" *
	$ba£«me
 (*
__fûíame
)

482 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

483 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

484 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

486 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

491 #i‡
	`__GNUC_PREREQ
 (3,4)

492 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


494 
	~<bôs/°rög_f‹tifõd.h
>

498 
__END_DECLS


	@/usr/include/linux/stddef.h

4 #i‚de‡
__Æways_ölöe


5 
	#__Æways_ölöe
 
__ölöe__


	)

	@/usr/include/strings.h

18 #i‚def 
_STRINGS_H


19 
	#_STRINGS_H
 1

	)

21 
	~<„©uªs.h
>

22 
	#__√ed_size_t


	)

23 
	~<°ddef.h
>

26 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

27 
	#__CORRECT_ISO_CPP_STRINGS_H_PROTO


	)

30 
	g__BEGIN_DECLS


32 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


34 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

35 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

38 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

39 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

42 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

45 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


48 *
	`ödex
 (*
__s
, 
__c
)

49 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

50 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

51 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

53 #i‡
deföed
 
__OPTIMIZE__


54 
__exã∫_Æways_ölöe
 *

55 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


57  
	`__buûtö_ödex
 (
__s
, 
__c
);

60 
__exã∫_Æways_ölöe
 const *

61 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


63  
	`__buûtö_ödex
 (
__s
, 
__c
);

66 
	}
}

68 *
	$ödex
 (c⁄° *
__s
, 
__c
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

73 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


76 *
	`rödex
 (*
__s
, 
__c
)

77 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

78 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

79 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #i‡
deföed
 
__OPTIMIZE__


82 
__exã∫_Æways_ölöe
 *

83 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


85  
	`__buûtö_rödex
 (
__s
, 
__c
);

88 
__exã∫_Æways_ölöe
 const *

89 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


91  
	`__buûtö_rödex
 (
__s
, 
__c
);

94 
	}
}

96 *
	$rödex
 (c⁄° *
__s
, 
__c
)

97 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

101 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8
 || deföed 
__USE_XOPEN2K8XSI


104 
	$ffs
 (
__i
Ë
__THROW
 
__©åibuã_c⁄°__
;

109 #ifdef 
__USE_MISC


110 
	$ff¶
 (
__l
Ë
__THROW
 
__©åibuã_c⁄°__
;

111 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

112 
__THROW
 
__©åibuã_c⁄°__
;

116 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

117 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

120 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

123 #ifdef 
__USE_XOPEN2K8


125 
	~<bôs/ty≥s/loˇÀ_t.h
>

128 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__loc
)

129 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

133 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

134 
size_t
 
__n
, 
loˇÀ_t
 
__loc
)

135 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

138 
__END_DECLS


140 #i‡
	`__GNUC_PREREQ
 (3,4Ë&& 
__USE_FORTIFY_LEVEL
 > 0 \

141 && 
deföed
 
__f‹tify_fun˘i⁄


143 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


144 
	~<bôs/°rögs_f‹tifõd.h
>

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

119 #unde‡
__USE_ISOC11


120 #unde‡
__USE_ISOC99


121 #unde‡
__USE_ISOC95


122 #unde‡
__USE_ISOCXX11


123 #unde‡
__USE_POSIX


124 #unde‡
__USE_POSIX2


125 #unde‡
__USE_POSIX199309


126 #unde‡
__USE_POSIX199506


127 #unde‡
__USE_XOPEN


128 #unde‡
__USE_XOPEN_EXTENDED


129 #unde‡
__USE_UNIX98


130 #unde‡
__USE_XOPEN2K


131 #unde‡
__USE_XOPEN2KXSI


132 #unde‡
__USE_XOPEN2K8


133 #unde‡
__USE_XOPEN2K8XSI


134 #unde‡
__USE_LARGEFILE


135 #unde‡
__USE_LARGEFILE64


136 #unde‡
__USE_FILE_OFFSET64


137 #unde‡
__USE_MISC


138 #unde‡
__USE_ATFILE


139 #unde‡
__USE_GNU


140 #unde‡
__USE_FORTIFY_LEVEL


141 #unde‡
__KERNEL_STRICT_NAMES


142 #unde‡
__GLIBC_USE_DEPRECATED_GETS


146 #i‚de‡
_LOOSE_KERNEL_NAMES


147 
	#__KERNEL_STRICT_NAMES


	)

157 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


158 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

159 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

161 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

168 #i‡
deföed
 
__˛™g_maj‹__
 && deföed 
__˛™g_mö‹__


169 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
) \

170 ((
__˛™g_maj‹__
 << 16Ë+ 
__˛™g_mö‹__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

172 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
Ë0

	)

176 
	#__GLIBC_USE
(
F
Ë
__GLIBC_USE_
 ## 
	)
F

182 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

183 && !
deföed
 
	g_DEFAULT_SOURCE


185 #unde‡
_DEFAULT_SOURCE


186 
	#_DEFAULT_SOURCE
 1

	)

190 #ifde‡
_GNU_SOURCE


191 #unde‡
_ISOC95_SOURCE


192 
	#_ISOC95_SOURCE
 1

	)

193 #unde‡
_ISOC99_SOURCE


194 
	#_ISOC99_SOURCE
 1

	)

195 #unde‡
_ISOC11_SOURCE


196 
	#_ISOC11_SOURCE
 1

	)

197 #unde‡
_POSIX_SOURCE


198 
	#_POSIX_SOURCE
 1

	)

199 #unde‡
_POSIX_C_SOURCE


200 
	#_POSIX_C_SOURCE
 200809L

	)

201 #unde‡
_XOPEN_SOURCE


202 
	#_XOPEN_SOURCE
 700

	)

203 #unde‡
_XOPEN_SOURCE_EXTENDED


204 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

205 #unde‡
_LARGEFILE64_SOURCE


206 
	#_LARGEFILE64_SOURCE
 1

	)

207 #unde‡
_DEFAULT_SOURCE


208 
	#_DEFAULT_SOURCE
 1

	)

209 #unde‡
_ATFILE_SOURCE


210 
	#_ATFILE_SOURCE
 1

	)

215 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

216 || (!
deföed
 
	g__STRICT_ANSI__
 \

217 && !
deföed
 
	g_ISOC99_SOURCE
 \

218 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

219 && !
deföed
 
	g_XOPEN_SOURCE
))

220 #unde‡
_DEFAULT_SOURCE


221 
	#_DEFAULT_SOURCE
 1

	)

225 #i‡(
deföed
 
_ISOC11_SOURCE
 \

226 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

227 
	#__USE_ISOC11
 1

	)

231 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

232 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

233 
	#__USE_ISOC99
 1

	)

237 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

238 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

239 
	#__USE_ISOC95
 1

	)

242 #ifde‡
__˝lu•lus


244 #i‡
__˝lu•lus
 >= 201703L

245 
	#__USE_ISOC11
 1

	)

249 #i‡
__˝lu•lus
 >201103L || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__


250 
	#__USE_ISOCXX11
 1

	)

251 
	#__USE_ISOC99
 1

	)

258 #ifde‡
_DEFAULT_SOURCE


259 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


260 
	#__USE_POSIX_IMPLICITLY
 1

	)

262 #unde‡
_POSIX_SOURCE


263 
	#_POSIX_SOURCE
 1

	)

264 #unde‡
_POSIX_C_SOURCE


265 
	#_POSIX_C_SOURCE
 200809L

	)

268 #i‡((!
deföed
 
__STRICT_ANSI__
 \

269 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

270 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

271 
	#_POSIX_SOURCE
 1

	)

272 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

273 
	#_POSIX_C_SOURCE
 2

	)

274 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

275 
	#_POSIX_C_SOURCE
 199506L

	)

276 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

277 
	#_POSIX_C_SOURCE
 200112L

	)

279 
	#_POSIX_C_SOURCE
 200809L

	)

281 
	#__USE_POSIX_IMPLICITLY
 1

	)

290 #i‡((!
deföed
 
_POSIX_C_SOURCE
 || (_POSIX_C_SOURCE - 0) < 199506L) \

291 && (
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE
))

292 
	#_POSIX_SOURCE
 1

	)

293 #unde‡
_POSIX_C_SOURCE


294 
	#_POSIX_C_SOURCE
 199506L

	)

297 #i‡(
deföed
 
_POSIX_SOURCE
 \

298 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

299 || 
deföed
 
_XOPEN_SOURCE
)

300 
	#__USE_POSIX
 1

	)

303 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


304 
	#__USE_POSIX2
 1

	)

307 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

308 
	#__USE_POSIX199309
 1

	)

311 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

312 
	#__USE_POSIX199506
 1

	)

315 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

316 
	#__USE_XOPEN2K
 1

	)

317 #unde‡
__USE_ISOC95


318 
	#__USE_ISOC95
 1

	)

319 #unde‡
__USE_ISOC99


320 
	#__USE_ISOC99
 1

	)

323 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

324 
	#__USE_XOPEN2K8
 1

	)

325 #unde‡
_ATFILE_SOURCE


326 
	#_ATFILE_SOURCE
 1

	)

329 #ifdef 
_XOPEN_SOURCE


330 
	#__USE_XOPEN
 1

	)

331 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

332 
	#__USE_XOPEN_EXTENDED
 1

	)

333 
	#__USE_UNIX98
 1

	)

334 #unde‡
_LARGEFILE_SOURCE


335 
	#_LARGEFILE_SOURCE
 1

	)

336 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

337 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

338 
	#__USE_XOPEN2K8
 1

	)

339 
	#__USE_XOPEN2K8XSI
 1

	)

341 
	#__USE_XOPEN2K
 1

	)

342 
	#__USE_XOPEN2KXSI
 1

	)

343 #unde‡
__USE_ISOC95


344 
	#__USE_ISOC95
 1

	)

345 #unde‡
__USE_ISOC99


346 
	#__USE_ISOC99
 1

	)

349 #ifde‡
_XOPEN_SOURCE_EXTENDED


350 
	#__USE_XOPEN_EXTENDED
 1

	)

355 #ifde‡
_LARGEFILE_SOURCE


356 
	#__USE_LARGEFILE
 1

	)

359 #ifde‡
_LARGEFILE64_SOURCE


360 
	#__USE_LARGEFILE64
 1

	)

363 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

364 
	#__USE_FILE_OFFSET64
 1

	)

367 #i‡
deföed
 
_DEFAULT_SOURCE


368 
	#__USE_MISC
 1

	)

371 #ifdef 
_ATFILE_SOURCE


372 
	#__USE_ATFILE
 1

	)

375 #ifdef 
_GNU_SOURCE


376 
	#__USE_GNU
 1

	)

379 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

380 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

381 #i‡
_FORTIFY_SOURCE
 > 1

382 
	#__USE_FORTIFY_LEVEL
 2

	)

384 
	#__USE_FORTIFY_LEVEL
 1

	)

387 
	#__USE_FORTIFY_LEVEL
 0

	)

394 #i‡
deföed
 
__˝lu•lus
 ? __˝lu•lu†>201402L : deföed 
__USE_ISOC11


395 
	#__GLIBC_USE_DEPRECATED_GETS
 0

	)

397 
	#__GLIBC_USE_DEPRECATED_GETS
 1

	)

402 
	~<°dc-¥edef.h
>

410 #unde‡
__GNU_LIBRARY__


411 
	#__GNU_LIBRARY__
 6

	)

415 
	#__GLIBC__
 2

	)

416 
	#__GLIBC_MINOR__
 27

	)

418 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

419 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

422 #i‚de‡
__ASSEMBLER__


423 #i‚de‡
_SYS_CDEFS_H


424 
	~<sys/cdefs.h
>

429 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


430 
	#__USE_LARGEFILE
 1

	)

431 
	#__USE_LARGEFILE64
 1

	)

437 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

438 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

439 && 
deföed
 
	g__exã∫_ölöe


440 
	#__USE_EXTERN_INLINES
 1

	)

448 
	~<gnu/°ubs.h
>

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

58 
	#__STDC_ISO_10646__
 201706L

	)

61 
	#__STDC_NO_THREADS__
 1

	)

	@
1
.
1
/usr/include
35
1081
/mnt/d/Src/DRM/sources/src504/ast_dp.c
/mnt/d/Src/DRM/sources/src504/ast_dp501.c
/mnt/d/Src/DRM/sources/src504/ast_dram_tables.h
/mnt/d/Src/DRM/sources/src504/ast_drv.c
/mnt/d/Src/DRM/sources/src504/ast_drv.h
/mnt/d/Src/DRM/sources/src504/ast_fb.c
/mnt/d/Src/DRM/sources/src504/ast_hdmitx.c
/mnt/d/Src/DRM/sources/src504/ast_hdmitx.h
/mnt/d/Src/DRM/sources/src504/ast_main.c
/mnt/d/Src/DRM/sources/src504/ast_mode.c
/mnt/d/Src/DRM/sources/src504/ast_post.c
/mnt/d/Src/DRM/sources/src504/ast_tables.h
/mnt/d/Src/DRM/sources/src504/ast_ttm.c
/usr/include/drm/drm_fourcc.h
/usr/include/drm/drm_mode.h
/usr/include/linux/errno.h
/usr/include/linux/i2c.h
/usr/include/linux/kernel.h
/usr/include/linux/module.h
/usr/include/linux/pci.h
/usr/include/linux/string.h
/usr/include/linux/tty.h
/usr/include/linux/types.h
ast_dram_tables.h
ast_drv.h
ast_hdmitx.h
ast_tables.h
/usr/include/linux/pci_regs.h
/usr/include/linux/posix_types.h
/usr/include/linux/sysinfo.h
/usr/include/string.h
/usr/include/linux/stddef.h
/usr/include/strings.h
/usr/include/features.h
/usr/include/stdc-predef.h
